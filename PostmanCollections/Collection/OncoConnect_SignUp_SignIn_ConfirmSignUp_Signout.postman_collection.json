{
	"info": {
		"_postman_id": "044a7ef3-6e61-45c7-bb48-4490384e51a6",
		"name": "OncoConnect_SignUp_SignIn_ConfirmSignUp_Signout",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33071978",
		"_collection_link": "https://planetary-moon-946240.postman.co/workspace/Team-Workspace~b71c68f9-be16-4953-8b0f-b19e310fc6ac/collection/33423351-044a7ef3-6e61-45c7-bb48-4490384e51a6?action=share&source=collection_link&creator=33071978"
	},
	"item": [
		{
			"name": "User Management",
			"item": [
				{
					"name": "signup",
					"item": [
						{
							"name": "Validate New User should be able to  register to OncoConnect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Sign up successful! Please confirm your account.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate a unique YupMail email address\r",
											"let uniqueNumber = Math.floor(Math.random() * 1000000);\r",
											"let temporary_email = `testuser${uniqueNumber}@yopmail.com`;\r",
											"\r",
											"// Save the unique email address to an environment variable\r",
											"pm.environment.set(\"temporary_email\", temporary_email);\r",
											"\r",
											"// Optionally, log the unique email to the console for debugging\r",
											"console.log(\"Generated Email: \", temporary_email);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{temporary_email}}\",\n  \"password\": \"Abc@1234\",\n  \"first_name\": \"TestABC\",\n  \"last_name\": \"Xyz\"    \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate New User should not be able to  register to OncoConnect with password not long enough",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\",() =>{\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Password is not correct\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"leul.ashok@floodouts.com\",\n  \"password\": \"Madhu\",\n  \"first_name\": \"FirstName\",\n  \"last_name\": \"LastName\"    \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate New User should not be able to  register to OncoConnect with password missing numeric numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Error message is valid',()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Password is not correct\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"leul.ashok@floodouts.com\",\n  \"password\": \"Madhu\",\n  \"first_name\": \"FirstName\",\n  \"last_name\": \"LastName\"    \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate New User should not be able to  register to OncoConnect with password missing special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Error message is valid',()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Password is not correct\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"leul.ashok@floodouts.com\",\n  \"password\": \"Madhu\",\n  \"first_name\": \"FirstName\",\n  \"last_name\": \"LastName\"    \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate New User should not be able to  register to OncoConnect with password missing lowercase characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\",()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Error message is valid',()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Password is not correct\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"leul.ashok@floodouts.com\",\n  \"password\": \"MADHU\",\n  \"first_name\": \"FirstName\",\n  \"last_name\": \"LastName\"    \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate New User should not be able to  register to OncoConnect with password missing uppercase characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\",()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Error message is valid',()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Password is not correct\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"leul.ashok@floodouts.com\",\n  \"password\": \"qwerty@123\",\n  \"first_name\": \"FirstName\",\n  \"last_name\": \"LastName\"    \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate New User should not be able to  register to OncoConnect with invalid data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\",()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Error message is valid',()=>{\r",
											"    pm.expect(pm.response.json().message ).to.eql(\"Invalid name\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"leul.ashok@floodouts.com\",\n  \"password\": \"Qwerty@123\",\n  \"first_name\": \"25\",\n  \"last_name\": \"\"    \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate New User should not be able to  register to OncoConnect with invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\",()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Error message is valid',()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Password is not correct\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const randomPart = Math.random().toString(36).substring(2, 10); // Generates a random string\r",
											"const mailinatorEmail = `${randomPart}@mailinator.com`;\r",
											"pm.environment.set(\"mailinator_email\", mailinatorEmail);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{temporary_email}}\",\n  \"password\": \"madhu@1234\",\n  \"first_name\": \"Madhusmita\",\n  \"last_name\": \"Nath\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate User should not be able to register - Missing Field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\",()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Error Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"leul.ashok@floodouts.com\",\n  \"password\": \"Madhu@1234\",\n  \"last_name\": \"Test\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate User should not be able to register if already registered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\",()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test('Response Error is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Email address is already registered\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{temporary_email}}\",\n  \"password\": \"Abc@1234\",\n  \"first_name\": \"TestABC\",\n  \"last_name\": \"Xyz\"    \n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								},
								"description": "This endpoint is used for registering a new user with the necessary details."
							},
							"response": [
								{
									"name": "User registered successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request if any required field is missing or data format is incorrect",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								},
								{
									"name": "Conflict if email already exists",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Conflict",
									"code": 409,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signup",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signup"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate user should not be able to register with incorrect CRUD operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test('Response message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"yasiki3786@huleos.com\",\r\n  \"password\": \"Mads@1234\",\r\n  \"first_name\": \"Madhusmita\",\r\n  \"last_name\": \"Nath\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-up",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-up"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"\r",
									""
								]
							}
						}
					]
				},
				{
					"name": "confirm signup",
					"item": [
						{
							"name": "Validate the user should be able to confirm email successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Status message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Account confirmed automatically.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{temporary_email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/confirm-sign-up/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"confirm-sign-up",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the user should not be able to confirm email for not registered Email.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Error message is valid',()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"User does not exist.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{mailinator_email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/confirm-sign-up/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"confirm-sign-up",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the user should not be able to confirm email if data format is incorrect or required field is missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/confirm-sign-up/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"confirm-sign-up",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the user should not be able to confirm email if incorrect CRUD operation is used.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test('Status message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{temporary_email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/confirm-sign-up/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"confirm-sign-up",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the user should not be able to confirm email if the email already exists.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Status message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Email address is already registered\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\" : \"japepav263@fincainc.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/confirm-sign-up/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"confirm-sign-up",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "signin",
					"item": [
						{
							"name": "Validate user should be able to login using valid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Status message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Sign in successful!!\");\r",
											"});\r",
											" const jsonData = pm.response.json();\r",
											"\r",
											"// Extract tokens from AuthenticationResult\r",
											"const tokenType = jsonData.AuthenticationResult.TokenType || \"Bearer\";\r",
											"const accessToken = jsonData.AuthenticationResult.AccessToken;\r",
											"const refreshToken = jsonData.AuthenticationResult.RefreshToken;\r",
											"\r",
											"if (accessToken && refreshToken) {\r",
											"    const bearerToken = `${accessToken}`;\r",
											"    pm.environment.set(\"bearer_token\", bearerToken);\r",
											"    pm.environment.set(\"refresh_token\", refreshToken);\r",
											"\r",
											"    console.log(\"Bearer token saved:\", bearerToken);\r",
											"    console.log(\"Refresh token saved:\", refreshToken);\r",
											"} else {\r",
											"    console.error(\"Tokens not found in the response\");\r",
											"}\r",
											"\r",
											"var response = pm.response.json();\r",
											"var id = response.user.id;\r",
											"\r",
											"pm.environment.set(\"uid\",id);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  //\"email\": \"{{temporary_email}}\",\n     \"email\" : \"madhusmitanath80@gmail.com\",\n  \"password\": \"Mads!23456\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-in/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-in",
										""
									]
								},
								"description": "Authenticates a user and returns an authentication token."
							},
							"response": [
								{
									"name": "Authentication successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized - Invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden - Account inactive",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate user should not be able to login using invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Email address is not registered\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n//   \"email\": \"{{temporary_email}}\",\n    \"email\" : \"madhusm0@gmail.com\",\n  \"password\": \"Abc@1234\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-in/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-in",
										""
									]
								},
								"description": "Authenticates a user and returns an authentication token."
							},
							"response": [
								{
									"name": "Authentication successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized - Invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden - Account inactive",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate user should not be able to login using invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Error message is valid',()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Password is not correct\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"email\": \"{{temporary_email}}\",\n //   \"email\" : \"madhusmitanath80@gmail.com \",\n  \"password\": \"Mads\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-in/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-in",
										""
									]
								},
								"description": "Authenticates a user and returns an authentication token."
							},
							"response": [
								{
									"name": "Authentication successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized - Invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden - Account inactive",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate user should not be able to login using missing password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{temporary_email}}\"\n    // \"email\" : \"madhusmitanath80@gmail.com\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-in/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-in",
										""
									]
								},
								"description": "Authenticates a user and returns an authentication token."
							},
							"response": [
								{
									"name": "Authentication successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized - Invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden - Account inactive",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate user should not be able to login using missing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n//   \"email\": \"{{temporary_email}}\",\n    \"password\":\"Mads!234\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-in/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-in",
										""
									]
								},
								"description": "Authenticates a user and returns an authentication token."
							},
							"response": [
								{
									"name": "Authentication successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized - Invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden - Account inactive",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate user should not be able to log in  with incorrect credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Error message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Password is not correct\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{temporary_email}}\",\n  \"password\": \"Madhusmita@12\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-in"
									]
								},
								"description": "Authenticates a user and returns an authentication token."
							},
							"response": [
								{
									"name": "Authentication successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized - Invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden - Account inactive",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate user should not be able to log in  if user is not confirmed.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test('Error Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"User has not been confirmed by the admin\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"hofyipedri@gufum.com\",\n  \"password\": \"GodSigma@1234\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-in"
									]
								},
								"description": "Authenticates a user and returns an authentication token."
							},
							"response": [
								{
									"name": "Authentication successful",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\",\n  \"last_login\": \"<string>\"\n}"
								},
								{
									"name": "Unauthorized - Invalid credentials",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden - Account inactive",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"message\": \"<string>\"\n}"
								},
								{
									"name": "In case of server fails to respond",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"<email>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/signin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"signin"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Validate user should not be able to  login with incorrect CRUD operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{temporary_email}}\",\r\n  \"password\": \"Abc@1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/sign-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-in"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "signout",
					"item": [
						{
							"name": "Validate user logged out successfully",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Sign out successful.\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"bearer_token\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: token\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"No Bearer token found\");\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate user should not be able to logged out successfully for invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const token = pm.environment.get(\"bearer_token\");\r",
											"if (token) {\r",
											"    pm.request.headers.add({\r",
											"        key: \"Authorization\",\r",
											"        value: token\r",
											"    });\r",
											"} else {\r",
											"    console.error(\"No Bearer token found\");\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0NGI4YjRhOC04MDMxLTcwNjQtMGFjYy0wZGZkOTM3MDViYmUiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIyYTg5MTE0Yi01ZjAwLTQ2MjMtOGI2Yy1jYzEwODk3NzYxMzgiLCJldmVudF9pZCI6ImZiOWE5ODliLTlhMDEtNDBhNi05NzVmLWQ2YzNmYjNiY2MyNSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTcxNDQ4MDYsImV4cCI6MTcxNzE0ODQwNiwiaWF0IjoxNzE3MTQ0ODA2LCJqdGkiOiJiOGY0MmYyMC0wNGFmLTQwZjYtOWY3OS00ODY3NjI0MTI2ZWYiLCJ1c2VybmFtZSI6IjQ0YjhiNGE4LTgwMzEtNzA2NC0wYWNjLTBkZmQ5MzcwNWJiZSJ9.ZWrT7UJ9WnRBogOllKy9MqM_PvEj5U4DGEDcRubhX_fpz44y2VnLuVsDsVjSFlpvI-npnUG_b8xhZT1uL-4XWNkJcRKJNjaWQslyejbfJ_0f8TI2ikhERzES7HhmNeCWpmWl2Hc4rRUViY-I7IQvUu5zeQTnbv2IADKxvCBBkFH6RytYXlPwubRLsA4s8XKt5aiVhbj9PdpJYhdYHKQtc2L0iiEzwKRbVoqq_3ECyGNyf3vzCPBCQIojzuDSbeh7oFFJibpgtXqQIQMXDncMxZefz6eU1r_e3GqYehQGPPII7J7yd7lpyZ6vCOJgqIRdbyGDx_BntS4PhQ-Qj6Jggg",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate user should not be able to log out if the Token has expired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.TB5WJ_xJafS7ArMxfKnoqtEALVOdRZyDDtuRgrH2LAHRrL17S-2CzHEwq4lbezCFVXXAMn50txZWYEqn2Hp3fvlSmt3bEFWrF5pwUwsFp8VWoIOb1Wk-b4e_xof95_VAYb2rwu0i4haANxtw-G2OZT-Q-Fx7FjyimcMSzVvWKbc66ouua_7XP3b4jRrQjbsIrBgJcsTJfquJXNNv3OVV4VnLC5kuzgCyVACgwnhPss0M4bR3BGbilTTL_5C4OdJoKdlSAh074Eh3SG1zo6LTJDYYaf0V-q_ATsNMFMMP3XuNkWCrGl2ATk4CB0MwAyLgu-vfaT9w25N_nP2UJ3GyHQ.ExNGC4kPQo_2ufSp.A5JKSBX87-Ya4dCmffTibMGzbLSOSFf0sHHu7QL_SKVfFMBl6CGHOmk5ebRvhilwHNT3S0DX-UFWKdVylqPWHbDZgR8vUSwWqFeK_4tMp3Jiavvoi7KAh_MNH5aGQrwWlC08SVPFnVjssOsWYJgZWexJonrY2fr1ESEmYndmfpEFDpmRqC_WNXlITOGZoHJ4zTkjf96vl_Tl-_ssW8ZQ_tzy7DlDiTKe7JeI_KAhGJkUSiPwbeQUQFRYT0rOqSaykl2etaMv73XW71FbBt2ti3PCeyGsESYURWoFpW9CgeJHqjTVkTHMSIwuB0zbgpZ_JRDH-QIO1378f5hHax8iB4Nv0uFocUcksScbWlu6Cf7BDXMHew0wUoXo0nPftSEiXe4QtyQDx_H6gHDZC3ZhGKmWWu8XP6rAp7Uh1XPudx7mogsCc1kAwis3fbfwsaGiCJhv8_fAmp5GfcLS_qjig-_IL8aOz8aG60KjjzeAOwpi8j9jQAO2Dbq7e55T41dZ5LK0p7Ckk2zoJlAE9xSPBL894b_eTMStRMVK_Ys1x2aLLt2BPVUREcSOb-jIh7fzJ8yin4cFKJtMAUwBJmmTxwqN0NrD3qRXEVu0O6_RgdkEqZGyGLJS0V2l2LD2OAcRixc-6S8bX7Z2_b7C_fSBl88MqPVRPOGmROVdbbr3R__9QLAOwmb6UKJ_h8NaNQ8Q6ReTjshb1d93W2lvFWS8gDz2bpICHvK-FrgrO4wa3S9wpjrfZUvXKoJxi0_vNg7-kTf_bJE4y77EsBP3-Bd7t_BkfdkBA6tugVh_M_EJb2ciGGtV8LfLXtm_Fv0tQGowihuQdRtEytj7nE2soD1ni8Tqt1YRF5eqi4dzb4qAS2-ofk4FxdXvCMIsmVZ-ESw-FOynXdTitb7LcNcB3TGHpcjfPfkRvap-cFlVcHmaRW2IzAcwIUmkPRLD9lVjPWoB0akhDqC7Gw72z5yAerSJzqroj2SElP0VuSoxAZvCste6Oai1fk2urFdPLwqn74ddnOVq9HTKMveyuGfA-JnpzjgB5e11IQleMETGF63qSPNh3n3EQLNC69zpLiIDn5ng-F-869EcEOMWwV1Z75mnYUU0rNcCfGnxzW8_eqbQ-tlBcu5oolhrSu1fDIocSx2a7oBARt4-O-AYRvHLqxyxBcNqiCcnF9hnyRKJE6cl_Hb561WauwZH4nDAFmK6_KbqxVCuAdEWMYn9pknl8e7siLoa-P07HFQZCWPfqH5_dB1C4QZ3O1y2rxcEHXHFDmENxiSZY6Hb-hDjAoLjYiKizTMHXP12ClaN34NtrjD6kUfgn6DHRNynezVMxaI.ZNqwRdcFFkSt6GesuuYpXw",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate user should not be able to register with incorrect CRUD operation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJjdHkiOiJKV1QiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAifQ.TB5WJ_xJafS7ArMxfKnoqtEALVOdRZyDDtuRgrH2LAHRrL17S-2CzHEwq4lbezCFVXXAMn50txZWYEqn2Hp3fvlSmt3bEFWrF5pwUwsFp8VWoIOb1Wk-b4e_xof95_VAYb2rwu0i4haANxtw-G2OZT-Q-Fx7FjyimcMSzVvWKbc66ouua_7XP3b4jRrQjbsIrBgJcsTJfquJXNNv3OVV4VnLC5kuzgCyVACgwnhPss0M4bR3BGbilTTL_5C4OdJoKdlSAh074Eh3SG1zo6LTJDYYaf0V-q_ATsNMFMMP3XuNkWCrGl2ATk4CB0MwAyLgu-vfaT9w25N_nP2UJ3GyHQ.ExNGC4kPQo_2ufSp.A5JKSBX87-Ya4dCmffTibMGzbLSOSFf0sHHu7QL_SKVfFMBl6CGHOmk5ebRvhilwHNT3S0DX-UFWKdVylqPWHbDZgR8vUSwWqFeK_4tMp3Jiavvoi7KAh_MNH5aGQrwWlC08SVPFnVjssOsWYJgZWexJonrY2fr1ESEmYndmfpEFDpmRqC_WNXlITOGZoHJ4zTkjf96vl_Tl-_ssW8ZQ_tzy7DlDiTKe7JeI_KAhGJkUSiPwbeQUQFRYT0rOqSaykl2etaMv73XW71FbBt2ti3PCeyGsESYURWoFpW9CgeJHqjTVkTHMSIwuB0zbgpZ_JRDH-QIO1378f5hHax8iB4Nv0uFocUcksScbWlu6Cf7BDXMHew0wUoXo0nPftSEiXe4QtyQDx_H6gHDZC3ZhGKmWWu8XP6rAp7Uh1XPudx7mogsCc1kAwis3fbfwsaGiCJhv8_fAmp5GfcLS_qjig-_IL8aOz8aG60KjjzeAOwpi8j9jQAO2Dbq7e55T41dZ5LK0p7Ckk2zoJlAE9xSPBL894b_eTMStRMVK_Ys1x2aLLt2BPVUREcSOb-jIh7fzJ8yin4cFKJtMAUwBJmmTxwqN0NrD3qRXEVu0O6_RgdkEqZGyGLJS0V2l2LD2OAcRixc-6S8bX7Z2_b7C_fSBl88MqPVRPOGmROVdbbr3R__9QLAOwmb6UKJ_h8NaNQ8Q6ReTjshb1d93W2lvFWS8gDz2bpICHvK-FrgrO4wa3S9wpjrfZUvXKoJxi0_vNg7-kTf_bJE4y77EsBP3-Bd7t_BkfdkBA6tugVh_M_EJb2ciGGtV8LfLXtm_Fv0tQGowihuQdRtEytj7nE2soD1ni8Tqt1YRF5eqi4dzb4qAS2-ofk4FxdXvCMIsmVZ-ESw-FOynXdTitb7LcNcB3TGHpcjfPfkRvap-cFlVcHmaRW2IzAcwIUmkPRLD9lVjPWoB0akhDqC7Gw72z5yAerSJzqroj2SElP0VuSoxAZvCste6Oai1fk2urFdPLwqn74ddnOVq9HTKMveyuGfA-JnpzjgB5e11IQleMETGF63qSPNh3n3EQLNC69zpLiIDn5ng-F-869EcEOMWwV1Z75mnYUU0rNcCfGnxzW8_eqbQ-tlBcu5oolhrSu1fDIocSx2a7oBARt4-O-AYRvHLqxyxBcNqiCcnF9hnyRKJE6cl_Hb561WauwZH4nDAFmK6_KbqxVCuAdEWMYn9pknl8e7siLoa-P07HFQZCWPfqH5_dB1C4QZ3O1y2rxcEHXHFDmENxiSZY6Hb-hDjAoLjYiKizTMHXP12ClaN34NtrjD6kUfgn6DHRNynezVMxaI.ZNqwRdcFFkSt6GesuuYpXw",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-out"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the user should not be able to logout if already logged out.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test('Response Message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearer_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/sign-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sign-out"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "forgot password",
					"item": [
						{
							"name": "Validate the verification code has been sent to the user successfully.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(`Status Code is ${pm.response.code === 200 ? 'valid' : 'invalid'}`, () => {\r",
											"    const expectedStatusCode = 200;\r",
											"    const actualStatusCode = pm.response.code;\r",
											"    pm.expect(actualStatusCode, `Expected status code ${expectedStatusCode} but got ${actualStatusCode}`).to.equal(expectedStatusCode);\r",
											"});\r",
											"\r",
											"pm.test(`Response Message is ${pm.response.json().message === \"OTP sent successfully\" ? 'valid' : 'invalid'}`, () => {\r",
											"    const expectedMessage = \"OTP sent successfully\";\r",
											"    const actualMessage = pm.response.json().message;\r",
											"    pm.expect(actualMessage, `Expected response message \"${expectedMessage}\" but got \"${actualMessage}\"`).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{temporary_email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the verification code has not been sent to the user as an unregistered email is provided.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Status message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Email address is not registered\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"madhusmitanath0327@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the verification code has not been sent to the user as an incorrect email is provided",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has all required fields\", ()=> {\r",
											"    pm.expect(response).to.have.property(\"status\");\r",
											"    pm.expect(response).to.have.property(\"message\");\r",
											"});\r",
											"\r",
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test('Response message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().message).to.eql(\"Email address is not registered\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"madhusmitanath0327@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the verification code has not been sent to the user whose email is not confirmed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let response = pm.response.json();\r",
											"\r",
											"pm.test(`Status Code is ${pm.response.code === 403 ? 'valid' : 'invalid'}`, () => {\r",
											"    const expectedStatusCode = 403;\r",
											"    const actualStatusCode = pm.response.code;\r",
											"    pm.expect(actualStatusCode, `Expected status code ${expectedStatusCode} but got ${actualStatusCode}`).to.equal(expectedStatusCode);\r",
											"});\r",
											"\r",
											"pm.test(`Response Message is ${pm.response.json().message === \"User has not been confirmed by the admin\" ? 'valid' : 'invalid'}`, () => {\r",
											"    const expectedMessage = \"User has not been confirmed by the admin\";\r",
											"    const actualMessage = pm.response.json().message;\r",
											"    pm.expect(actualMessage, `Expected response message \"${expectedMessage}\" but got \"${actualMessage}\"`).to.eql(expectedMessage);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"alon.naveen@floodouts.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"forgot-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate the user should not receive a verification code if incorrect CRUD operation is used.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status Code is valid',()=>{\r",
											"    pm.response.to.have.status(405);\r",
											"});\r",
											"\r",
											"pm.test('Status message is Valid', ()=>{\r",
											"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{temporary_email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"forgot-password"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"console.log(\"Email:\", pm.environment.get(\"temporary_email\"));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	]
}