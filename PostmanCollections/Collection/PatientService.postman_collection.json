{
	"info": {
		"_postman_id": "8d91950a-d4a0-494b-b157-923533a8e4c4",
		"name": "PatientService",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33071978",
		"_collection_link": "https://planetary-moon-946240.postman.co/workspace/Team-Workspace~b71c68f9-be16-4953-8b0f-b19e310fc6ac/collection/32153414-8d91950a-d4a0-494b-b157-923533a8e4c4?action=share&source=collection_link&creator=33071978"
	},
	"item": [
		{
			"name": "Lists information of all patients' data whose state is confirmed",
			"item": [
				{
					"name": "Validate list of confirmed Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/plain, */*"
							},
							{
								"key": "Accept-Language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Origin",
								"value": "http://localhost:3000"
							},
							{
								"key": "Referer",
								"value": "http://localhost:3000/"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
							}
						],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-all-patients?page=1&limit=10",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-all-patients"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate list of confirmed Patient not displaying without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-all-patients?page=1&limit=1",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-all-patients"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-all-patients?page=1&limit=1",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-all-patients"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate list of confirmed Patient not displaying with incorrect query data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-all-patients?page=100&limit=100",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-all-patients"
							],
							"query": [
								{
									"key": "page",
									"value": "100"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-all-patients?page=1&limit=0",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-all-patients"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "0"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "patient variant file upload",
			"item": [
				{
					"name": "Validate user is able to upload variants file successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"let p_info_task_id = response.data.id;\r",
									"// Set the ID as an environment variable\r",
									"pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
									"\r",
									"// Log the environment variable to the Postman console for verification\r",
									"console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
									"\r",
									"let url = response.data.data[0].url;\r",
									"\r",
									"// Set the URL as an environment variable\r",
									"pm.environment.set(\"file_url\", url);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-variant-file-upload/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-variant-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is able to upload multiple variants file successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": [
										"postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
										"postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
									]
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-variant-file-upload/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-variant-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to upload variants file other than vcf and tsv file type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-variant-file-upload/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-variant-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is able  to upload variants file without id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
									"});\r",
									"let response = pm.response.json();\r",
									"\r",
									"let p_info_task_id = response.data.id;\r",
									"// Set the ID as an environment variable\r",
									"pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
									"\r",
									"// Log the environment variable to the Postman console for verification\r",
									"console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
									"\r",
									"let url = response.data.data[0].url;\r",
									"\r",
									"// Set the URL as an environment variable\r",
									"pm.environment.set(\"file_url\", url);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-variant-file-upload/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-variant-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to upload without variants file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
									"\r",
									"setTimeout(function() {\r",
									"    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
									"}, delay);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"value": "",
									"type": "file"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-variant-file-upload",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-variant-file-upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to upload variants file as user is unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-variant-file-upload/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-variant-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-variant-file-upload/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-variant-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Start Validation Variants",
			"item": [
				{
					"name": "Validate the user is able to validate variants successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
									"});\r",
									"\r",
									"\r",
									"let p_variant_task_id = response.data.task_id;\r",
									"// Set the ID as an environment variable\r",
									"pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
									"\r",
									"// Log the environment variable to the Postman console for verification\r",
									"console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-validation-variants/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-validation-variants",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate the user is unable to validate variants with incorrect query data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-validation-variants/?id=12345",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-validation-variants",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "12345"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate the user is unable to validate variants without query data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-validation-variants/?id=\"12345\"",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-validation-variants",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "\"12345\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate the user is unable to validate variants without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-validation-variants/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-validation-variants",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate the user is unable to validate variants as token is invalid/expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-validation-variants/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-validation-variants",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-validation-variants/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-validation-variants",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "patient medical file upload",
			"item": [
				{
					"name": "Validate user is able to upload medical files successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-medical-file-upload/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-medical-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is able to upload medical files successfully without id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-medical-file-upload/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-medical-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is able to upload multiple medical files successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
									"});\r",
									"let responseData = pm.response.json();\r",
									"let p_other_task_id = responseData.task_id;\r",
									"pm.environment.set(\"p_other_task_id\", p_other_task_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": [
										"postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
										"postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
									]
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-medical-file-upload/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-medical-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to upload medical fileswith incorrect id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-medical-file-upload/?id=12345",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-medical-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "12345"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to upload medical files as user is unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "files",
									"type": "file",
									"src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-medical-file-upload/?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-medical-file-upload",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-medical-file-upload/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-medical-file-upload",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "check task status",
			"item": [
				{
					"name": "Validate user is able to check status of task successfully for Patient info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-task-status/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-task-status",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is able to check status of task successfully for Patient Variant File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-task-status/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-task-status",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check status as task_id is incorrect.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-task-status/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-task-status",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-task-status/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-task-status",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-task-status/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-task-status",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check status as the token is invalid.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-task-status/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-task-status",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable check status as incorrect CRUD operation is used.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-medical-file-upload/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-medical-file-upload",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lists information of a Patient's data",
			"item": [
				{
					"name": "Validate user is able to fetch patient's data successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-details?id=05434c8b-d8bc-4f30-ba48-548b6ca3c2ad",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-details"
							],
							"query": [
								{
									"key": "id",
									"value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to fetch patient's data with incorrect query data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-details?id=12345",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-details"
							],
							"query": [
								{
									"key": "id",
									"value": "12345"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to fetch patient's data without query data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-details?id=",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-details"
							],
							"query": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to fetch patient's data without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-details?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-details"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to fetch patient's data with invalid/expired token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-details?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-details"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-details?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-details"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Updates the information of Patient's data",
			"item": [
				{
					"name": "Validate user is able to check patient id successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let patientId = \"patient_\" + new Date().getTime();\r",
									"\r",
									"// Set the environment variable\r",
									"pm.environment.set(\"patient_id\", patientId);\r",
									"\r",
									"console.log(\"Environment Patient ID set to:\", patientId);\r",
									"\r",
									"function getRandomString(length) {\r",
									"    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate a unique name using a random string\r",
									"let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
									"pm.environment.set(\"name\", name);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-patient-id/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-patient-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is able to update patient's information successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-details/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-details",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to update patient's information with missing required field in the body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-details/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-details",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to update patient's information without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-details/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-details",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to update patient's information as token is invalid/expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-details/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-details",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-details/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-details",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Patient ID",
			"item": [
				{
					"name": "Validate user is able to check patient id successfully(true)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-patient-id/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-patient-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check patient id as patient_id is missing in the body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-patient-id/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-patient-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check patient id as incorrect patient_id is provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-patient-id/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-patient-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check patient id without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-patient-id/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-patient-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check patient id as token is invalid/expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-patient-id/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-patient-id",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/check-patient-id/",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"check-patient-id",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search patients",
			"item": [
				{
					"name": "Validate user is able to search patients successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/search-patients?keyword={{patient_id}}&page=1&limit=10",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"search-patients"
							],
							"query": [
								{
									"key": "keyword",
									"value": "{{patient_id}}"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "sort_field",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is able to search patients if optional parameters are missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/search-patients?keyword={{patient_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"search-patients"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort_field",
									"value": "",
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": "",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "{{patient_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to search patients as required parameter is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/search-patients?keyword=",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"search-patients"
							],
							"query": [
								{
									"key": "keyword",
									"value": ""
								},
								{
									"key": "limit",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort_field",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to search patients without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/search-patients?keyword={{patient_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"search-patients"
							],
							"query": [
								{
									"key": "keyword",
									"value": "{{patient_id}}"
								},
								{
									"key": "limit",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort_field",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to search patients as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/search-patients?keyword={{patient_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"search-patients"
							],
							"query": [
								{
									"key": "keyword",
									"value": "{{patient_id}}"
								},
								{
									"key": "limit",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort_field",
									"value": null,
									"disabled": true
								},
								{
									"key": "sort_by",
									"value": null,
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get current user task info",
			"item": [
				{
					"name": "Validate user is able to get current user task info successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-current-user-task-info",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-current-user-task-info"
							],
							"query": [
								{
									"key": "id",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to get current user task info without authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-current-user-task-info",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-current-user-task-info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to get current user task info as token is invalid/expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-current-user-task-info",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-current-user-task-info"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-current-user-task-info",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-current-user-task-info"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Start variant processing",
			"item": [
				{
					"name": "Validate user is able to start variant processing successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"    pm.expect(response).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-variant-processing?id=4a92ba9f-d7be-4eb1-bad0-2b22660b2a79",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-variant-processing"
							],
							"query": [
								{
									"key": "id",
									"value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to start variant processing as required parameter is missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-variant-processing?id=\"12345\"",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-variant-processing"
							],
							"query": [
								{
									"key": "id",
									"value": "\"12345\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to start variant processing without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-variant-processing?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-variant-processing"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to start variant processing as token is invalid/expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-variant-processing?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-variant-processing"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/start-variant-processing?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"start-variant-processing"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Patient demograph dropdown",
			"item": [
				{
					"name": "Validate user is able to display patient demograph dropdown successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Expected array elements\r",
									"let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
									"\r",
									"// Validate the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(response).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Validate the response contains all expected elements\r",
									"pm.test(\"Response contains all expected elements\", function () {\r",
									"    expectedElements.forEach(function(element) {\r",
									"        pm.expect(response).to.include(element);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Validate the response does not contain any unexpected elements\r",
									"pm.test(\"Response does not contain unexpected elements\", function () {\r",
									"    response.forEach(function(element) {\r",
									"        pm.expect(expectedElements).to.include(element);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-demograph-dropdown?key=tmb",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-demograph-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "tmb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-demograph-dropdown?key=",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-demograph-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-demograph-dropdown?key=\"12345\"",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-demograph-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "\"12345\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display patient demograph dropdown without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-demograph-dropdown?key=tmb",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-demograph-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "tmb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-demograph-dropdown?key=tmb",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-demograph-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "tmb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/patient-demograph-dropdown?key=tmb",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"patient-demograph-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "tmb"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sub tumor dropdown",
			"item": [
				{
					"name": "Validate user is able to display sub tumor type dropdown successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Expected array elements\r",
									"let expectedElements = [\r",
									"    \"Small Cell Lung Cancer\",\r",
									"    \"Non-Small Cell Lung Cancer\",\r",
									"    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
									"    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
									"    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
									"    \"Lung Neuroendocrine Tumor (LNET)\",\r",
									"    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
									"    \"Pleuropulmonary Blastoma (PPB)\",\r",
									"    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
									"    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
									"    \"Atypical Lung Carcinoid (ALUCA)\",\r",
									"    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
									"    \"Lung Carcinoid (LUCA)\",\r",
									"    \"Small Cell Lung Cancer (SCLC)\",\r",
									"    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
									"    \"Large Cell Lung Carcinoma (LCLC)\",\r",
									"    \"Lung Adenocarcinoma (LUAD)\",\r",
									"    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
									"    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
									"    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
									"    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
									"    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
									"    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
									"    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
									"    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
									"    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
									"    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
									"    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
									"    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
									"    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
									"    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
									"];\r",
									"\r",
									"// Validate the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(response).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Validate the response contains all expected elements\r",
									"pm.test(\"Response contains all expected elements\", function () {\r",
									"    expectedElements.forEach(function(element) {\r",
									"        pm.expect(response).to.include(element);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Validate the response does not contain any unexpected elements\r",
									"pm.test(\"Response does not contain unexpected elements\", function () {\r",
									"    response.forEach(function(element) {\r",
									"        pm.expect(expectedElements).to.include(element);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/sub-tumor-dropdown?key=lung_cancer",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"sub-tumor-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "lung_cancer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/sub-tumor-dropdown?key=",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"sub-tumor-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/sub-tumor-dropdown?key=\"12345\"",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"sub-tumor-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "\"12345\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display sub tumor type dropdown without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/sub-tumor-dropdown?key=lung_cancer",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"sub-tumor-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "lung_cancer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/sub-tumor-dropdown?key=lung_cancer",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"sub-tumor-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "lung_cancer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/sub-tumor-dropdown?key={{key}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"sub-tumor-dropdown"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get patient file details",
			"item": [
				{
					"name": "Validate user is able to get patient file details successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response has all required fields\", ()=> {\r",
									"    pm.expect(response).to.have.property(\"status\");\r",
									"    pm.expect(response).to.have.property(\"message\");\r",
									"});\r",
									"\r",
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "13.233.37.45:8001/get-patient-file-details?id=958fd271-1a6f-4cbb-8c53-bb1cbd3405cc",
							"host": [
								"13",
								"233",
								"37",
								"45"
							],
							"port": "8001",
							"path": [
								"get-patient-file-details"
							],
							"query": [
								{
									"key": "id",
									"value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to get patient file details with missing required parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-file-details?id=",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-file-details"
							],
							"query": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to get patient file details with incorrect query parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-file-details?id=\"12345\"",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-file-details"
							],
							"query": [
								{
									"key": "id",
									"value": "\"12345\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to get patient file details without Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-file-details?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-file-details"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to get patient file details as token is invalid/expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-file-details?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-file-details"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid',()=>{\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"\r",
									"pm.test('Response message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/get-patient-file-details?id={{uid}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"get-patient-file-details"
							],
							"query": [
								{
									"key": "id",
									"value": "{{uid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Export Files",
			"item": [
				{
					"name": "Successfully export files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/export-files?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"export-files"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Successfully could not export files with incorrect id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/export-files?id=1234567890",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"export-files"
							],
							"query": [
								{
									"key": "id",
									"value": "1234567890"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Could not export files  due to missing authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/export-files?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"export-files"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Could not export files  due to invalid  authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/export-files?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"export-files"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Could not export files  due to invalid CRUD operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl_patient_service}}/export-files?id={{p_info_task_id}}",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"export-files"
							],
							"query": [
								{
									"key": "id",
									"value": "{{p_info_task_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
							"\r",
							"setTimeout(function() {\r",
							"    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
							"}, delay);\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Update Patient Workflow",
			"item": [
				{
					"name": "Update patient workflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "13.233.37.45:8001/update-patient-workflow",
							"host": [
								"13",
								"233",
								"37",
								"45"
							],
							"port": "8001",
							"path": [
								"update-patient-workflow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Could not Update patient workflow with incorrect id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-workflow",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-workflow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Could not Update patient workflow with missing required fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-workflow",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-workflow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Could not Update patient workflow with missing Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-workflow",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-workflow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Could not Update patient workflow with invalid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-workflow",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-workflow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Could not Update patient workflow with invalid CRUD  operation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status Code is valid', () => {\r",
									"    pm.response.to.have.status(405);\r",
									"});\r",
									"pm.test('Status message is Valid', ()=>{\r",
									"    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_patient_service}}/update-patient-workflow",
							"host": [
								"{{baseUrl_patient_service}}"
							],
							"path": [
								"update-patient-workflow"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"const currentUTCTime = new Date().toISOString();\r",
							"\r",
							"// Log the current time in UTC ISO format (optional)\r",
							"console.log(currentUTCTime);\r",
							"\r",
							"// Set the current time as an environment variable\r",
							"pm.environment.set(\"currentUTCTime\", currentUTCTime);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	]
}