{
  "collection": {
    "_": {
      "postman_id": "8d91950a-d4a0-494b-b157-923533a8e4c4",
      "exporter_id": "33071978",
      "collection_link": "https://planetary-moon-946240.postman.co/workspace/Team-Workspace~b71c68f9-be16-4953-8b0f-b19e310fc6ac/collection/32153414-8d91950a-d4a0-494b-b157-923533a8e4c4?action=share&source=collection_link&creator=33071978"
    },
    "item": [
      {
        "id": "836b7bbd-09df-430d-ab36-83d3fdad6cc5",
        "name": "Lists information of all patients' data whose state is confirmed",
        "item": [
          {
            "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
            "name": "Validate list of confirmed Patient",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "10"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json, text/plain, */*"
                },
                {
                  "key": "Accept-Language",
                  "value": "en-GB,en-US;q=0.9,en;q=0.8"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Origin",
                  "value": "http://localhost:3000"
                },
                {
                  "key": "Referer",
                  "value": "http://localhost:3000/"
                },
                {
                  "key": "User-Agent",
                  "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
                }
              ],
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "9b57939f-ea01-4235-8699-c5fe404ab4a1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "affd158a-7c6e-409b-8f1c-ae738704b382"
                }
              }
            ]
          },
          {
            "id": "bc138774-85a3-4f2f-b73d-e7ca0cd2797c",
            "name": "Validate list of confirmed Patient not displaying without Authorization",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "1"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "95c18107-3611-4bea-bf3d-9d83143aeab9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "308c6643-1ae2-4d7c-abd8-88892263993d"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "b722bae6-6550-4ba8-8af2-ebc57a481087",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2acf8e9c-7a18-4d80-ac2e-bf7f1f378933"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "51329f46-1ea6-4e0c-bb48-88d26f72e5ca",
            "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "1"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6ac5f94a-db89-41c7-8b08-c738be9be6f2",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "d25ec83a-0315-4b1e-a6c7-c9ae608fa29f"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
            "name": "Validate list of confirmed Patient not displaying with incorrect query data",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "100"
                  },
                  {
                    "key": "limit",
                    "value": "100"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "b58254d9-9fe5-475b-a11b-8e240838c21f",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5fb8d19d-9b5f-4b63-81ac-7f7180926f06"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          },
          {
            "id": "7c4b623e-f68c-4d4a-85ce-9f1201a9b695",
            "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "get-all-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "0"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e6b8ce8b-19cb-4b35-91ad-4bd0868bbfef",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "1bc4d824-1e58-4d5d-a748-d2d18727b776"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "e20fc2c1-f769-4e30-838b-d23b5550d397",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fa16e0ce-45ed-4dc2-939f-8b16774b0355"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
        "name": "patient variant file upload",
        "item": [
          {
            "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
            "name": "Validate user is able to upload variants file successfully",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                    "});\r",
                    "\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "let p_info_task_id = response.data.id;\r",
                    "// Set the ID as an environment variable\r",
                    "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                    "\r",
                    "// Log the environment variable to the Postman console for verification\r",
                    "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                    "\r",
                    "let url = response.data.data[0].url;\r",
                    "\r",
                    "// Set the URL as an environment variable\r",
                    "pm.environment.set(\"file_url\", url);"
                  ],
                  "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                }
              }
            ]
          },
          {
            "id": "35425e08-fa5d-4983-9329-815773ea6507",
            "name": "Validate user is able to upload multiple variants file successfully",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": [
                      "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                      "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    ]
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                }
              }
            ]
          },
          {
            "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
            "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                  "type": "text/javascript",
                  "exec": [],
                  "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                }
              }
            ]
          },
          {
            "id": "5ad92959-a548-4694-94bd-8308dfed5732",
            "name": "Validate user is able  to upload variants file without id",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                    "});\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "let p_info_task_id = response.data.id;\r",
                    "// Set the ID as an environment variable\r",
                    "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                    "\r",
                    "// Log the environment variable to the Postman console for verification\r",
                    "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                    "\r",
                    "let url = response.data.data[0].url;\r",
                    "\r",
                    "// Set the URL as an environment variable\r",
                    "pm.environment.set(\"file_url\", url);\r",
                    ""
                  ],
                  "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                }
              }
            ]
          },
          {
            "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
            "name": "Validate user is unable to upload without variants file",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                    "\r",
                    "setTimeout(function() {\r",
                    "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                    "}, delay);\r",
                    ""
                  ],
                  "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                }
              }
            ]
          },
          {
            "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
            "name": "Validate user is unable to upload variants file as user is unauthorized",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                }
              }
            ]
          },
          {
            "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
            "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
            "request": {
              "url": {
                "path": [
                  "patient-variant-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
        "name": "Start Validation Variants",
        "item": [
          {
            "id": "9689578b-8678-47b6-bce2-881acd82b533",
            "name": "Validate the user is able to validate variants successfully",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                    "});\r",
                    "\r",
                    "\r",
                    "let p_variant_task_id = response.data.task_id;\r",
                    "// Set the ID as an environment variable\r",
                    "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                    "\r",
                    "// Log the environment variable to the Postman console for verification\r",
                    "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                  ],
                  "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                }
              }
            ]
          },
          {
            "id": "3968770d-8255-4598-9c4f-b5e330281550",
            "name": "Validate the user is unable to validate variants with incorrect query data",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "12345"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                }
              }
            ]
          },
          {
            "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
            "name": "Validate the user is unable to validate variants without query data",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                }
              }
            ]
          },
          {
            "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
            "name": "Validate the user is unable to validate variants without Authorization",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                }
              }
            ]
          },
          {
            "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
            "name": "Validate the user is unable to validate variants as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                }
              }
            ]
          },
          {
            "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
            "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "start-validation-variants",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
        "name": "patient medical file upload",
        "item": [
          {
            "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
            "name": "Validate user is able to upload medical files successfully",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                }
              }
            ]
          },
          {
            "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
            "name": "Validate user is able to upload medical files successfully without id",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                }
              }
            ]
          },
          {
            "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
            "name": "Validate user is able to upload multiple medical files successfully",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": [
                      "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                      "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    ]
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                    "});\r",
                    "let responseData = pm.response.json();\r",
                    "let p_other_task_id = responseData.task_id;\r",
                    "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                  ],
                  "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                }
              }
            ]
          },
          {
            "id": "02e2143b-4576-4d81-9638-59d099134868",
            "name": "Validate user is unable to upload medical fileswith incorrect id",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "12345"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                }
              }
            ]
          },
          {
            "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
            "name": "Validate user is unable to upload medical files as user is unauthorized",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "files",
                    "type": "file",
                    "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                }
              }
            ]
          },
          {
            "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
            "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "formdata",
                "formdata": []
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
        "name": "check task status",
        "item": [
          {
            "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
            "name": "Validate user is able to check status of task successfully for Patient info",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                }
              }
            ]
          },
          {
            "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
            "name": "Validate user is able to check status of task successfully for Patient Variant File",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                }
              }
            ]
          },
          {
            "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
            "name": "Validate user is unable to check status as task_id is incorrect.",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                }
              }
            ]
          },
          {
            "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
            "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                }
              }
            ]
          },
          {
            "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
            "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                }
              }
            ]
          },
          {
            "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
            "name": "Validate user is unable to check status as the token is invalid.",
            "request": {
              "url": {
                "path": [
                  "check-task-status",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                }
              }
            ]
          },
          {
            "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
            "name": "Validate user is unable check status as incorrect CRUD operation is used.",
            "request": {
              "url": {
                "path": [
                  "patient-medical-file-upload",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "9f2d4c8e-87db-4dec-b767-10d589123073",
        "name": "Lists information of a Patient's data",
        "item": [
          {
            "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
            "name": "Validate user is able to fetch patient's data successfully",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Status Code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
                }
              }
            ]
          },
          {
            "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
            "name": "Validate user is unable to fetch patient's data with incorrect query data",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "12345"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Status Code is 400\", function () {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
                }
              }
            ]
          },
          {
            "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
            "name": "Validate user is unable to fetch patient's data without query data",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
                }
              }
            ]
          },
          {
            "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
            "name": "Validate user is unable to fetch patient's data without Authorization",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f73aa3f2-9790-48ca-9a2d-8b75450c9864",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "d9e37313-b8b5-4227-83fc-579d789e7c44"
                }
              }
            ]
          },
          {
            "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
            "name": "Validate user is unable to fetch patient's data with invalid/expired token",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b3e932ea-a8a5-431b-a765-ca42758169b5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "8221d3fa-407a-472d-87d9-6d9be8bb49ae"
                }
              }
            ]
          },
          {
            "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
            "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "get-patient-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52c1f5ae-ab9e-4e68-9e85-092ee726b6bf",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "02d1a159-6dd8-4d1f-b904-08c7e733f6b9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
        "name": "Updates the information of Patient's data",
        "item": [
          {
            "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
            "name": "Validate user is able to check patient id successfully",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let patientId = \"patient_\" + new Date().getTime();\r",
                    "\r",
                    "// Set the environment variable\r",
                    "pm.environment.set(\"patient_id\", patientId);\r",
                    "\r",
                    "console.log(\"Environment Patient ID set to:\", patientId);\r",
                    "\r",
                    "function getRandomString(length) {\r",
                    "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                    "    let result = '';\r",
                    "    for (let i = 0; i < length; i++) {\r",
                    "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                    "    }\r",
                    "    return result;\r",
                    "}\r",
                    "\r",
                    "// Generate a unique name using a random string\r",
                    "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                    "pm.environment.set(\"name\", name);"
                  ],
                  "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                }
              }
            ]
          },
          {
            "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
            "name": "Validate user is able to update patient's information successfully",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                }
              }
            ]
          },
          {
            "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
            "name": "Validate user is unable to update patient's information with missing required field in the body",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                }
              }
            ]
          },
          {
            "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
            "name": "Validate user is unable to update patient's information without Authorization",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                }
              }
            ]
          },
          {
            "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
            "name": "Validate user is unable to update patient's information as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                }
              }
            ]
          },
          {
            "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
            "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "update-patient-details",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1aaaefda-69f3-4d0d-b2c5-7fc66b81e3e0",
        "name": "Check Patient ID",
        "item": [
          {
            "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
            "name": "Validate user is able to check patient id successfully(true)",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
                }
              }
            ]
          },
          {
            "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
            "name": "Validate user is unable to check patient id as patient_id is missing in the body",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
                }
              }
            ]
          },
          {
            "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
            "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
                }
              }
            ]
          },
          {
            "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
            "name": "Validate user is unable to check patient id without authorization",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52e3a331-5763-4767-ad66-fa455389775c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
                }
              }
            ]
          },
          {
            "id": "726cca06-c036-4706-9714-96f6570eebf1",
            "name": "Validate user is unable to check patient id as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
                }
              }
            ]
          },
          {
            "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
            "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "check-patient-id",
                  ""
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": []
      },
      {
        "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
        "name": "Search patients",
        "item": [
          {
            "id": "b0e983b1-5deb-4ace-858a-19b072190522",
            "name": "Validate user is able to search patients successfully",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "keyword",
                    "value": "{{patient_id}}"
                  },
                  {
                    "key": "page",
                    "value": "1"
                  },
                  {
                    "key": "limit",
                    "value": "10"
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                }
              }
            ]
          },
          {
            "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
            "name": "Validate user is able to search patients if optional parameters are missing",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "page",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "limit",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": ""
                  },
                  {
                    "key": "keyword",
                    "value": "{{patient_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                }
              }
            ]
          },
          {
            "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
            "name": "Validate user is unable to search patients as required parameter is missing",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "keyword",
                    "value": ""
                  },
                  {
                    "disabled": true,
                    "key": "limit",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "page",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                }
              }
            ]
          },
          {
            "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
            "name": "Validate user is unable to search patients without Authorization",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "keyword",
                    "value": "{{patient_id}}"
                  },
                  {
                    "disabled": true,
                    "key": "limit",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "page",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                }
              }
            ]
          },
          {
            "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
            "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "search-patients"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "keyword",
                    "value": "{{patient_id}}"
                  },
                  {
                    "disabled": true,
                    "key": "limit",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_field",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "sort_by",
                    "value": null
                  },
                  {
                    "disabled": true,
                    "key": "page",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f9ea7e78-a84c-4923-810f-594712794883",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bc301fa0-71eb-43be-89a8-0d78af67802e",
        "name": "Get current user task info",
        "item": [
          {
            "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
            "name": "Validate user is able to get current user task info successfully",
            "request": {
              "url": {
                "path": [
                  "get-current-user-task-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "disabled": true,
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
                }
              }
            ]
          },
          {
            "id": "691f3c81-4a23-4ed5-b0a1-4a46dfc603b7",
            "name": "Validate user is unable to get current user task info without authorization",
            "request": {
              "url": {
                "path": [
                  "get-current-user-task-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6181861e-dffa-46f3-882b-6c0488d04ed7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "    });"
                  ],
                  "_lastExecutionId": "57aba010-6129-4289-ad45-6d847bb75668"
                }
              }
            ]
          },
          {
            "id": "7f29083a-45fd-48d4-a12a-fdf34626fd3d",
            "name": "Validate user is unable to get current user task info as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "get-current-user-task-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "38aae98b-0911-4686-944e-e19902c7dd33",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "f445ef88-48ab-4ab5-89b9-3df8c1711231"
                }
              }
            ]
          },
          {
            "id": "53159003-0a15-4368-bef2-b3497d667daf",
            "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "get-current-user-task-info"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c1f8f75e-60e1-4c92-9556-346b0a29ec91",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "92b8620a-0222-45b0-b942-b2567304b2ef"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "92756a69-feba-4bad-8fd8-519e167152b7",
        "name": "Start variant processing",
        "item": [
          {
            "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
            "name": "Validate user is able to start variant processing successfully",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "    pm.expect(response).to.have.property(\"data\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
                }
              }
            ]
          },
          {
            "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
            "name": "Validate user is unable to start variant processing as required parameter is missing",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a52b03e7-654d-4822-97af-a375811bab03",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
                }
              }
            ]
          },
          {
            "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
            "name": "Validate user is unable to start variant processing without Authorization",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e141686a-3b1c-47e6-b952-d789c9452d51",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "c758d5a2-12cf-4164-b255-8a0686cb232d"
                }
              }
            ]
          },
          {
            "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
            "name": "Validate user is unable to start variant processing as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5f5d5f17-3618-455d-ba62-feadd5bc6837",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "886a17fd-e3c4-45c5-80ae-ae3ead5de4cb"
                }
              }
            ]
          },
          {
            "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
            "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "start-variant-processing"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8e9004f3-e059-417a-b6f4-1ffb5f94cced",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "be9f8cec-9243-4157-81dc-a96bcb1fd656"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "39e42a72-c61c-4a9d-98fc-07f3d18cc956",
        "name": "Patient demograph dropdown",
        "item": [
          {
            "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
            "name": "Validate user is able to display patient demograph dropdown successfully",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "tmb"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Parse the JSON response\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "// Expected array elements\r",
                    "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                    "\r",
                    "// Validate the response is an array\r",
                    "pm.test(\"Response is an array\", function () {\r",
                    "    pm.expect(response).to.be.an('array');\r",
                    "});\r",
                    "\r",
                    "// Validate the response contains all expected elements\r",
                    "pm.test(\"Response contains all expected elements\", function () {\r",
                    "    expectedElements.forEach(function(element) {\r",
                    "        pm.expect(response).to.include(element);\r",
                    "    });\r",
                    "});\r",
                    "\r",
                    "// Validate the response does not contain any unexpected elements\r",
                    "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                    "    response.forEach(function(element) {\r",
                    "        pm.expect(expectedElements).to.include(element);\r",
                    "    });\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
                }
              }
            ]
          },
          {
            "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
            "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
                }
              }
            ]
          },
          {
            "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
            "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
                }
              }
            ]
          },
          {
            "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
            "name": "Validate user is unable to display patient demograph dropdown without Authorization",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "tmb"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
                }
              }
            ]
          },
          {
            "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
            "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "tmb"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
                }
              }
            ]
          },
          {
            "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
            "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "patient-demograph-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "tmb"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e9c3e956-ce7b-46af-8b4d-fdd077da8b4e",
        "name": "Sub tumor dropdown",
        "item": [
          {
            "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
            "name": "Validate user is able to display sub tumor type dropdown successfully",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "lung_cancer"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// Parse the JSON response\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "// Expected array elements\r",
                    "let expectedElements = [\r",
                    "    \"Small Cell Lung Cancer\",\r",
                    "    \"Non-Small Cell Lung Cancer\",\r",
                    "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                    "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                    "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                    "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                    "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                    "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                    "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                    "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                    "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                    "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                    "    \"Lung Carcinoid (LUCA)\",\r",
                    "    \"Small Cell Lung Cancer (SCLC)\",\r",
                    "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                    "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                    "    \"Lung Adenocarcinoma (LUAD)\",\r",
                    "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                    "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                    "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                    "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                    "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                    "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                    "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                    "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                    "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                    "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                    "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                    "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                    "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                    "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                    "];\r",
                    "\r",
                    "// Validate the response is an array\r",
                    "pm.test(\"Response is an array\", function () {\r",
                    "    pm.expect(response).to.be.an('array');\r",
                    "});\r",
                    "\r",
                    "// Validate the response contains all expected elements\r",
                    "pm.test(\"Response contains all expected elements\", function () {\r",
                    "    expectedElements.forEach(function(element) {\r",
                    "        pm.expect(response).to.include(element);\r",
                    "    });\r",
                    "});\r",
                    "\r",
                    "// Validate the response does not contain any unexpected elements\r",
                    "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                    "    response.forEach(function(element) {\r",
                    "        pm.expect(expectedElements).to.include(element);\r",
                    "    });\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
                }
              }
            ]
          },
          {
            "id": "66248610-7e52-4f55-91fd-d87342f31812",
            "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
                }
              }
            ]
          },
          {
            "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
            "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
                }
              }
            ]
          },
          {
            "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
            "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "lung_cancer"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
                }
              }
            ]
          },
          {
            "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
            "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "lung_cancer"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
                }
              }
            ]
          },
          {
            "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
            "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "sub-tumor-dropdown"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "key",
                    "value": "{{key}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "92963e18-ba4a-45cd-9bd8-fe0b07cfbd17",
        "name": "Get patient file details",
        "item": [
          {
            "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
            "name": "Validate user is able to get patient file details successfully",
            "request": {
              "url": {
                "port": "8001",
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "13",
                  "233",
                  "37",
                  "45"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "\r",
                    "pm.test(\"Response has all required fields\", ()=> {\r",
                    "    pm.expect(response).to.have.property(\"status\");\r",
                    "    pm.expect(response).to.have.property(\"message\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
                }
              }
            ]
          },
          {
            "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
            "name": "Validate user is unable to get patient file details with missing required parameter",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": ""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
                }
              }
            ]
          },
          {
            "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
            "name": "Validate user is unable to get patient file details with incorrect query parameter",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "\"12345\""
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
                }
              }
            ]
          },
          {
            "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
            "name": "Validate user is unable to get patient file details without Authorization",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "aa94e452-56e5-4025-bd5b-ef23d5a7f6d2",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "11766759-b2ea-4fc4-ae8e-670a8d0a1afe"
                }
              }
            ]
          },
          {
            "id": "d05647b3-4780-4743-9ea2-9398984305b6",
            "name": "Validate user is unable to get patient file details as token is invalid/expired",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1302bdb3-2848-4ba3-aa3a-25629b3785e6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "0d4d9cd3-638a-429e-b6f5-9f5dc3fdae74"
                }
              }
            ]
          },
          {
            "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
            "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
            "request": {
              "url": {
                "path": [
                  "get-patient-file-details"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{uid}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e93de480-108e-4d74-a2f9-7e17a7041ab6",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid',()=>{\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "\r",
                    "pm.test('Response message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "5ba81b7c-e780-4932-9abb-9351d850c320"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6327ac04-74dc-4d7b-8ab5-d512acfdac5d",
        "name": "Export Files",
        "item": [
          {
            "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
            "name": "Successfully export files",
            "request": {
              "url": {
                "path": [
                  "export-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "69c804b0-150d-4ae6-ba39-3c748f70226b",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e5d9d00-8828-465b-a1bb-f25293ebf72c"
                }
              }
            ]
          },
          {
            "id": "349619be-0c1c-4a84-9069-bd402e53105a",
            "name": "Successfully could not export files with incorrect id",
            "request": {
              "url": {
                "path": [
                  "export-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "1234567890"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
                }
              }
            ]
          },
          {
            "id": "e03077f1-a2f9-49b8-970b-dde96c639961",
            "name": "Could not export files  due to missing authorization",
            "request": {
              "url": {
                "path": [
                  "export-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7248f218-854d-4e29-b04a-1e41fd1d5f1d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "24fee36b-c662-4a27-97d8-4b170e72d19c"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "f6c92af2-f61e-455f-a66d-2d33283df621",
                  "type": "text/javascript",
                  "exec": [],
                  "_lastExecutionId": "11671069-0f1e-4be5-b83e-be49c05b65a8"
                }
              }
            ]
          },
          {
            "id": "b65b5d9f-9195-46cb-a14f-c66d3fdc15ae",
            "name": "Could not export files  due to invalid  authorization",
            "request": {
              "url": {
                "path": [
                  "export-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2cdfcdfc-724f-4365-90e2-b3f1b35070d8",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "74547ee0-e311-4204-a24e-ba6eebddcf48"
                }
              }
            ]
          },
          {
            "id": "e141412c-0a0e-4f67-bf85-bcecf24b1186",
            "name": "Could not export files  due to invalid CRUD operation",
            "request": {
              "url": {
                "path": [
                  "export-files"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [
                  {
                    "key": "id",
                    "value": "{{p_info_task_id}}"
                  }
                ],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "af3e1362-bcf0-40c7-b15f-40b71d3b4560",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "617d2973-6d93-496c-b5e0-d5463f5a92cc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d43c8b35-4c43-42fa-8eea-cbb8dad33e4e",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                "\r",
                "setTimeout(function() {\r",
                "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                "}, delay);\r",
                ""
              ],
              "_lastExecutionId": "8605552f-4b53-4b3d-8f24-ae6f9012c342"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "174cc189-b3f7-412e-8e97-6d6ab931f105",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "\r",
                ""
              ],
              "_lastExecutionId": "43d4114d-b1aa-4080-a161-7cfe56752f6d"
            }
          }
        ]
      },
      {
        "id": "aeeeab23-caf5-442e-a9cb-57e6d0d49808",
        "name": "Update Patient Workflow",
        "item": [
          {
            "id": "47e71458-0121-485d-bb8e-8754668d3549",
            "name": "Update patient workflow",
            "request": {
              "url": {
                "port": "8001",
                "path": [
                  "update-patient-workflow"
                ],
                "host": [
                  "13",
                  "233",
                  "37",
                  "45"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
                }
              }
            ]
          },
          {
            "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
            "name": "Could not Update patient workflow with incorrect id",
            "request": {
              "url": {
                "path": [
                  "update-patient-workflow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
                }
              }
            ]
          },
          {
            "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
            "name": "Could not Update patient workflow with missing required fields",
            "request": {
              "url": {
                "path": [
                  "update-patient-workflow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(400);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
                }
              }
            ]
          },
          {
            "id": "785834f9-86cc-497b-8c46-03003684de0c",
            "name": "Could not Update patient workflow with missing Authorization",
            "request": {
              "url": {
                "path": [
                  "update-patient-workflow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "noauth",
                "noauth": []
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                  "type": "text/javascript",
                  "exec": [],
                  "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
                }
              }
            ]
          },
          {
            "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
            "name": "Could not Update patient workflow with invalid Authorization",
            "request": {
              "url": {
                "path": [
                  "update-patient-workflow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(401);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
                }
              }
            ]
          },
          {
            "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
            "name": "Could not Update patient workflow with invalid CRUD  operation",
            "request": {
              "url": {
                "path": [
                  "update-patient-workflow"
                ],
                "host": [
                  "{{baseUrl_patient_service}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "body": {
                "mode": "raw",
                "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{bearer_token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test('Status Code is valid', () => {\r",
                    "    pm.response.to.have.status(405);\r",
                    "});\r",
                    "pm.test('Status message is Valid', ()=>{\r",
                    "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                    "});"
                  ],
                  "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
                }
              }
            ],
            "protocolProfileBehavior": {
              "disableBodyPruning": true
            }
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ba575c8-94c9-4f3a-8ea7-b916d4386034",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const currentUTCTime = new Date().toISOString();\r",
                "\r",
                "// Log the current time in UTC ISO format (optional)\r",
                "console.log(currentUTCTime);\r",
                "\r",
                "// Set the current time as an environment variable\r",
                "pm.environment.set(\"currentUTCTime\", currentUTCTime);"
              ],
              "_lastExecutionId": "13179f48-3ab6-4b25-b8a2-4d591b400258"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e804be1b-ff60-4706-9c60-b5747189fcb8",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8bf15a0-4af1-4169-9c78-99166ab67236"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "8d91950a-d4a0-494b-b157-923533a8e4c4",
      "name": "PatientService",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2024-07-25T09:04:02.667Z",
      "postman_exported_using": "Postman/11.3.2"
    },
    "id": "31a12bec-5eff-4e5c-969b-554cbb3dd5f4",
    "name": "OncoConnect",
    "values": [
      {
        "type": "any",
        "value": "http://3.137.2.183:8000",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "lukasz.ryley@floodouts.com",
        "key": "fakemail_address"
      },
      {
        "type": "any",
        "value": "testuser606588@yopmail.com",
        "key": "temporary_email"
      },
      {
        "type": "any",
        "value": "",
        "key": "email_username"
      },
      {
        "type": "any",
        "value": "",
        "key": "email_domain"
      },
      {
        "type": "any",
        "value": "072455",
        "key": "reset_otp"
      },
      {
        "type": "any",
        "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
        "key": "bearer_token"
      },
      {
        "type": "any",
        "value": "",
        "key": "refresh_token"
      },
      {
        "type": "any",
        "value": "valafab314@cmheia.com",
        "key": "mailinator_email"
      },
      {
        "type": "any",
        "value": "http://3.137.2.183:8001",
        "key": "baseUrl_patient_service"
      },
      {
        "type": "any",
        "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d",
        "key": "p_info_task_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "uid"
      },
      {
        "type": "any",
        "value": "",
        "key": "task_id"
      },
      {
        "type": "any",
        "value": "1543bd5d-2e4d-4f61-b96c-c096a75f5270",
        "key": "p_variant_task_id"
      },
      {
        "type": "any",
        "value": "patient_1722419011434",
        "key": "patient_id"
      },
      {
        "type": "any",
        "value": "Name_mKO9OMjn_1722419011435",
        "key": "name"
      },
      {
        "type": "any",
        "value": "",
        "key": "file_url"
      },
      {
        "type": "any",
        "value": null,
        "key": "p_other_task_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "variant_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "variantIds"
      },
      {
        "type": "any",
        "value": "http://3.137.2.183:8002",
        "key": "base_Url_caseManger"
      },
      {
        "type": "any",
        "value": "",
        "key": "variant_ids"
      },
      {
        "type": "any",
        "value": "",
        "key": "dynamic_payload"
      },
      {
        "type": "any",
        "value": "2024-07-31T09:45:03.716Z",
        "key": "currentUTCTime"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_1"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_2"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_3"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_4"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_5"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_6"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_7"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_8"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_9"
      },
      {
        "type": "any",
        "value": "",
        "key": "VARIANT_ID_10"
      }
    ]
  },
  "globals": {
    "id": "4dc0b01c-274a-47cb-ae2c-80b04a6bc480",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 92,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 127,
        "pending": 0,
        "failed": 4
      },
      "prerequests": {
        "total": 92,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 92,
        "pending": 0,
        "failed": 2
      },
      "tests": {
        "total": 92,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 215,
        "pending": 0,
        "failed": 112
      },
      "testScripts": {
        "total": 103,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 24,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 431.4301213346815,
      "responseMin": 263,
      "responseMax": 1535,
      "responseSd": 176.55648062315876,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1722418984200,
      "completed": 1722419104061
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 92,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac981ee8-b7d6-4312-b497-00d80340b5a5",
          "httpRequestId": "c1056d96-5d89-4dc8-900a-4080036d8e32"
        },
        "item": {
          "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
          "name": "Validate list of confirmed Patient",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "Accept-Language",
                "value": "en-GB,en-US;q=0.9,en;q=0.8"
              },
              {
                "key": "Authorization",
                "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
              },
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Origin",
                "value": "http://localhost:3000"
              },
              {
                "key": "Referer",
                "value": "http://localhost:3000/"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9b57939f-ea01-4235-8699-c5fe404ab4a1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "affd158a-7c6e-409b-8f1c-ae738704b382"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json, text/plain, */*"
            },
            {
              "key": "Accept-Language",
              "value": "en-GB,en-US;q=0.9,en;q=0.8"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Origin",
              "value": "http://localhost:3000"
            },
            {
              "key": "Referer",
              "value": "http://localhost:3000/"
            },
            {
              "key": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "455b7ea4-a086-4d0d-8eb4-7cbf7f013823",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b6d233d5-9649-4f2f-80dd-a6b4937a2543",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:05 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            },
            {
              "key": "access-control-allow-credentials",
              "value": "true"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1535,
          "responseSize": 58
        },
        "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient information fetched successfu…'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient information fetched successfu…'\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8353340b-af6b-44f8-8572-c49101a3fcbb",
          "length": 92,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "24af9bdc-57e2-4984-83b2-11fd147e9433"
        },
        "item": {
          "id": "bc138774-85a3-4f2f-b73d-e7ca0cd2797c",
          "name": "Validate list of confirmed Patient not displaying without Authorization",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95c18107-3611-4bea-bf3d-9d83143aeab9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "308c6643-1ae2-4d7c-abd8-88892263993d"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b722bae6-6550-4ba8-8af2-ebc57a481087",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2acf8e9c-7a18-4d80-ac2e-bf7f1f378933"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "302f6473-f2d9-4952-90d1-21a6f00eb08b",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "5c78672b-fec6-4cb5-91c1-34c95313b6f2",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:05 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 278,
          "responseSize": 62
        },
        "id": "bc138774-85a3-4f2f-b73d-e7ca0cd2797c",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "864be6ad-5e31-4857-81a4-8aa8c5c97511",
          "length": 92,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f25c8b38-4d03-457a-a29b-d53bc593c689"
        },
        "item": {
          "id": "51329f46-1ea6-4e0c-bb48-88d26f72e5ca",
          "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6ac5f94a-db89-41c7-8b08-c738be9be6f2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "d25ec83a-0315-4b1e-a6c7-c9ae608fa29f"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c6f696ab-caed-4e8f-b5d3-e35f3b3dd11b",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6b68d451-4ed5-4ec6-9f70-7cc1b4840bb2",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:06 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 295,
          "responseSize": 58
        },
        "id": "51329f46-1ea6-4e0c-bb48-88d26f72e5ca",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "39738b48-261d-4c3d-89d5-9b25f1d61115",
          "length": 92,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "952b8842-00a4-4ce9-8a16-11a8fd02d35b"
        },
        "item": {
          "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
          "name": "Validate list of confirmed Patient not displaying with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "100"
                },
                {
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                  "});"
                ],
                "_lastExecutionId": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b58254d9-9fe5-475b-a11b-8e240838c21f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5fb8d19d-9b5f-4b63-81ac-7f7180926f06"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "100"
              },
              {
                "key": "limit",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "501e5f43-c8e3-4290-97ee-f238d72916b0",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a791a7ae-499e-4000-8b24-52289a1121a1",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:06 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 303,
          "responseSize": 58
        },
        "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Cannot find patients'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Cannot find patients'\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3c485a1e-cb9a-4883-9f49-e9140033d480",
          "length": 92,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b86c4d2c-8580-459e-9ba7-67192578f20b"
        },
        "item": {
          "id": "7c4b623e-f68c-4d4a-85ce-9f1201a9b695",
          "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "0"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e6b8ce8b-19cb-4b35-91ad-4bd0868bbfef",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "1bc4d824-1e58-4d5d-a748-d2d18727b776"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e20fc2c1-f769-4e30-838b-d23b5550d397",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "fa16e0ce-45ed-4dc2-939f-8b16774b0355"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-all-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "0"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3a0a70d7-b66f-43cb-b5cc-8d3c6f2798df",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2ce7471c-5624-45cd-ae45-1e9b8e5460de",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:07 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 275,
          "responseSize": 31
        },
        "id": "7c4b623e-f68c-4d4a-85ce-9f1201a9b695",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3bc36334-894d-494f-8646-db6e9c2334d4",
          "length": 92,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a7e31361-4e0d-4052-8306-5a8bb80078a6"
        },
        "item": {
          "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
          "name": "Validate user is able to upload variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);"
                ],
                "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dfc7f8a4-4b9f-4521-9ba3-afc45476e7c1",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b87216af-69cd-47ce-b883-546fd548396b",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:07 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 552,
          "responseSize": 90
        },
        "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Variant file(s) uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Variant file(s) uploaded'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'id')",
              "checksum": "7968b7e0e6adfbc32cfd96627c083201",
              "id": "be0e7faf-d333-4d34-a5b7-a42dda6f5f9b",
              "timestamp": 1722418988079,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a7e1e1b6-88ce-4ef3-8314-b54d955946c7",
          "length": 92,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "da872150-f046-480e-a8ac-c3a33ca48c14"
        },
        "item": {
          "id": "35425e08-fa5d-4983-9329-815773ea6507",
          "name": "Validate user is able to upload multiple variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                    "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6ed4f6f2-6ee2-498e-b689-2259d5530c00",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": []
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "54fea5d1-7307-4e8d-8955-62555a165127",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:08 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 545,
          "responseSize": 90
        },
        "id": "35425e08-fa5d-4983-9329-815773ea6507",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Variant file(s) uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Variant file(s) uploaded'\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a0430bf6-80b1-4d12-bb16-3da72621a102",
          "length": 92,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "51f94fe4-39e8-4784-9acf-99dcb05344da"
        },
        "item": {
          "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
          "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                "type": "text/javascript",
                "exec": [],
                "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3d28263d-8ad3-4a20-882e-7b39afd693b7",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3cdb95a2-774e-40c1-821b-6eeaffab504c",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:09 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 555,
          "responseSize": 90
        },
        "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 422",
              "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Only VCF and TSV files are allowed'",
              "stack": "AssertionError: expected undefined to deeply equal 'Only VCF and TSV files are allowed'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a3ef8477-58bf-4f17-8c59-16abf8ab7262",
          "length": 92,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84c5e749-2779-4056-bce2-9f6f94f624e7"
        },
        "item": {
          "id": "5ad92959-a548-4694-94bd-8308dfed5732",
          "name": "Validate user is able  to upload variants file without id",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);\r",
                  ""
                ],
                "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1643a776-30c7-4ff1-8e28-9c094a23c18b",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "f2239eb9-be70-473e-a01f-3c97bd564f01",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:09 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 547,
          "responseSize": 90
        },
        "id": "5ad92959-a548-4694-94bd-8308dfed5732",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Variant file(s) uploaded'",
              "stack": "AssertionError: expected undefined to deeply equal 'Variant file(s) uploaded'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'id')",
              "checksum": "7968b7e0e6adfbc32cfd96627c083201",
              "id": "c9404584-91fa-40ad-9393-266f8e8bcfcb",
              "timestamp": 1722418990038,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2819022e-12ed-460f-9760-ca9fb100cc56",
          "length": 92,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8de8d38a-fce2-4320-8cb9-28c3ac5d60e7"
        },
        "item": {
          "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
          "name": "Validate user is unable to upload without variants file",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                  "\r",
                  "setTimeout(function() {\r",
                  "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                  "}, delay);\r",
                  ""
                ],
                "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eaa27371-48c0-424e-83ba-525c16d37ddd",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "fileName": ""
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "aeef068c-f430-4705-bb7b-8fe4342a2f89",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 557,
          "responseSize": 58
        },
        "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Only VCF and TSV files are allowed'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Only VCF and TSV files are allowed'\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "03ad6f55-d088-439b-800e-a9d3de401e1b",
          "length": 92,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7180bd28-28f2-44d1-bd11-39a1e203d240"
        },
        "item": {
          "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
          "name": "Validate user is unable to upload variants file as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9e0bca18-9673-4096-81e7-64bfeefb05f2",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b6466557-e8fd-45fd-971e-d589b8113c7b",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:15 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 529,
          "responseSize": 90
        },
        "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 401 but got 422",
              "stack": "AssertionError: expected response to have status code 401 but got 422\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected undefined to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e0a619ec-598c-4707-82e2-1471a1601530",
          "length": 92,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "75ce89fb-814a-47f5-87eb-4d5d01cf6f5c"
        },
        "item": {
          "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
          "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-variant-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bc33c09f-46d1-4dca-bc59-3c985f31e6b0",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "0bfc2b3d-1339-4202-9ccf-9e8f2bd87e02",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:16 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 533,
          "responseSize": 31
        },
        "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "db690f2b-562a-45ff-8b02-9da9d7f75e47",
          "length": 92,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "31a22c13-344f-4897-92e3-0d4277c6bb55"
        },
        "item": {
          "id": "9689578b-8678-47b6-bce2-881acd82b533",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4e77dd1b-1783-4de5-a4b7-833b637b549d",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1ef8dffc-931f-4e93-9377-9954c97572a9",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 558,
          "responseSize": 58
        },
        "id": "9689578b-8678-47b6-bce2-881acd82b533",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:13)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Variant file(s) validated successfully'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Variant file(s) validated successfully'\n   at Object.eval sandbox-script.js:3:13)"
            }
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'task_id')",
              "checksum": "c005a47473712b0486577d5895ef920c",
              "id": "134afa3d-efd1-4d03-9a5a-b4748a66bc75",
              "timestamp": 1722418997601,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b5ff64be-28ab-4d54-8442-46f328cf68b5",
          "length": 92,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "72e762f5-378a-47dd-a05b-73ce2ae5999b"
        },
        "item": {
          "id": "3968770d-8255-4598-9c4f-b5e330281550",
          "name": "Validate the user is unable to validate variants with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "12345"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "010901a7-2e13-4810-8b89-72f12924d352",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "f5aa111a-fee7-4e6f-8fbb-3101ddf35d89",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 554,
          "responseSize": 58
        },
        "id": "3968770d-8255-4598-9c4f-b5e330281550",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2fcb7814-35e2-44f9-a07a-a295bb49800a",
          "length": 92,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fe6500cb-9fc2-464a-b92b-43af9fca0a5a"
        },
        "item": {
          "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
          "name": "Validate the user is unable to validate variants without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "60eef6d8-915d-4342-beef-af23c00dddfd",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b414c1ff-0845-42ef-98b2-c9dde544cc11",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:18 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 558,
          "responseSize": 58
        },
        "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8e5efeb4-6f11-4791-8473-072373708f35",
          "length": 92,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6689134f-9218-44e0-a13a-21ab2c94cfa5"
        },
        "item": {
          "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
          "name": "Validate the user is unable to validate variants without Authorization",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "80532053-aaaa-4ae9-acbe-6433b6e0c4e0",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "664e0e20-1019-4d12-ad93-9486ad7ca707",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 530,
          "responseSize": 62
        },
        "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "552f68df-8715-4fa8-b69d-10ec27e37bdc",
          "length": 92,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "02056a8a-25ea-4c3e-83b3-1727beff1c7b"
        },
        "item": {
          "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
          "name": "Validate the user is unable to validate variants as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9d5511ab-1a54-4f01-b35d-f1a9c3fca099",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a9c6334d-7402-411f-9d08-a785f063f0cd",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:19 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 554,
          "responseSize": 58
        },
        "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "629cacce-ed08-42ab-bc85-5749764bcf1c",
          "length": 92,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4b0cfaf7-390f-4628-884d-5716fe7123fb"
        },
        "item": {
          "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
          "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-validation-variants",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "81c2ea0e-8ffc-494c-8140-632ab86809b7",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b309be53-645e-44bc-b3e9-7acb1066cf3d",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:20 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 532,
          "responseSize": 31
        },
        "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "446b6676-2b65-42e1-acf0-a3435f9354de",
          "length": 92,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b864a673-e423-42eb-9269-5a5f14b738ef"
        },
        "item": {
          "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
          "name": "Validate user is able to upload medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "55a25f96-1a04-47bf-b015-1fa356367f46",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "21d51134-8dfd-4acb-b7df-c536aede3ba9",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:21 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 528,
          "responseSize": 90
        },
        "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
              "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3ab24219-eaaf-4af3-b2d3-5ee64d4b14d8",
          "length": 92,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "89bf2852-e3b1-4386-b0fb-120c2f0c4304"
        },
        "item": {
          "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
          "name": "Validate user is able to upload medical files successfully without id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "be9412ad-50d6-4352-8013-2e20d04b2003",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6257c08a-a7c9-418d-ab51-aedca3766eee",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:21 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 539,
          "responseSize": 90
        },
        "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
              "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "03a5af9a-6907-4ec8-9dea-318505a6e3fd",
          "length": 92,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2f9d5e05-ac63-4ae3-aef9-d937cfc07d08"
        },
        "item": {
          "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
          "name": "Validate user is able to upload multiple medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                    "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let p_other_task_id = responseData.task_id;\r",
                  "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                ],
                "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "24ec878f-fb01-4604-814c-e2b287f0434c",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": []
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6b2581e3-aa0a-424a-a631-8a32bc9bcf45",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:22 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 533,
          "responseSize": 90
        },
        "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 422",
              "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
              "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "61660a8c-d3a5-4a28-92dc-6c099a8d5188",
          "length": 92,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8d6e38fb-ed0b-45fd-9b95-02712e6dfb8b"
        },
        "item": {
          "id": "02e2143b-4576-4d81-9638-59d099134868",
          "name": "Validate user is unable to upload medical fileswith incorrect id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "12345"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "665df7b3-668d-44ab-9325-9c7f29180bee",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2b230e8a-7b0a-4fd6-aee9-01f77ef9e480",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:22 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 530,
          "responseSize": 90
        },
        "id": "02e2143b-4576-4d81-9638-59d099134868",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 422",
              "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected undefined to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ec2ac642-c009-4819-a8ab-67f2e2231af2",
          "length": 92,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e1233111-70df-4eef-90b3-4d56213ac79a"
        },
        "item": {
          "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
          "name": "Validate user is unable to upload medical files as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ea115ba-7184-4113-b7f6-53302c4d09f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "files",
                "type": "file",
                "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cdcf235f-875c-4dc3-a8eb-3e8c30f9ef68",
          "status": "Unprocessable Entity",
          "code": 422,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:23 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "90"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              91,
              123,
              34,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              44,
              34,
              108,
              111,
              99,
              34,
              58,
              91,
              34,
              98,
              111,
              100,
              121,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              93,
              44,
              34,
              109,
              115,
              103,
              34,
              58,
              34,
              70,
              105,
              101,
              108,
              100,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              105,
              110,
              112,
              117,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 535,
          "responseSize": 90
        },
        "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 401 but got 422",
              "stack": "AssertionError: expected response to have status code 401 but got 422\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected undefined to deeply equal 'Token is invalid or expired'",
              "stack": "AssertionError: expected undefined to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3cfa6b8c-c565-4418-9472-acfd3dcd8f6f",
          "length": 92,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "92503398-be80-43d9-aca9-3dc1b3101da5"
        },
        "item": {
          "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
          "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ccbb8b90-9c64-4023-ac53-1bef573169e7",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "formdata",
            "formdata": []
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "029b7767-c847-431b-aaa6-1d8a49ffc9b9",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 534,
          "responseSize": 31
        },
        "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f8f73908-6280-4931-964d-8fd6a5be0516",
          "length": 92,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a8bcf300-1eb3-45f5-9af9-61c03b300cdb"
        },
        "item": {
          "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
          "name": "Validate user is able to check status of task successfully for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b62fe6e6-d15f-4f6b-895c-1ebeeb296906",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "57",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "55571930-bcbe-46f9-9ed0-27a6ac1a2c87",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:24 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 570,
          "responseSize": 58
        },
        "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:25)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Task details retrieved successfully'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Task details retrieved successfully'\n   at Object.eval sandbox-script.js:3:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8442c5f4-a3d3-4b6c-8a2f-163e5aa63eb6",
          "length": 92,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4cf03550-8f49-4ba3-afb9-7fe09a0fe9d2"
        },
        "item": {
          "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
          "name": "Validate user is able to check status of task successfully for Patient Variant File",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de18128b-b292-487a-a037-d98d33d32c0f",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "57",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"1543bd5d-2e4d-4f61-b96c-c096a75f5270\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6eff7e3f-ed3a-460f-b4fc-c6c75f3332ad",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:25 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 555,
          "responseSize": 58
        },
        "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:26)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Task details retrieved successfully'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Task details retrieved successfully'\n   at Object.eval sandbox-script.js:3:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "34a06903-effc-4954-81b1-cc12a39996c1",
          "length": 92,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8e5534c4-1a9f-4cfe-a2ca-93fe1f0653e2"
        },
        "item": {
          "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
          "name": "Validate user is unable to check status as task_id is incorrect.",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                  "});"
                ],
                "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1b037bf1-e3bf-4ee4-a5a1-fa62b852f07f",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "27",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3d95baaf-99aa-445a-a04c-e95e3f90a91f",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 566,
          "responseSize": 58
        },
        "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Task details could not be retrieved'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Task details could not be retrieved'\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1444f8a1-fbb7-4559-ae04-dd7978117477",
          "length": 92,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5aa8d36a-9181-4cdf-9247-c5e2774fdf96"
        },
        "item": {
          "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "daa9c850-8acb-4189-bb2b-7ffcc8473b5a",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "07abcb77-3e30-4de0-8560-5f7d54b96bbb",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:26 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 558,
          "responseSize": 58
        },
        "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "257f8483-495b-4fdb-938a-2f727e77018d",
          "length": 92,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "07dd0ca1-8658-485d-974c-63230fd98b5b"
        },
        "item": {
          "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "579b7e3a-e799-4abc-91cb-a4cdadc6f597",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5a3926b7-364c-40b5-a2fd-937337ff5056",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:27 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 554,
          "responseSize": 58
        },
        "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0d9e2839-288e-4cea-bf63-a89e2fe97571",
          "length": 92,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "91032914-87b3-45d8-8bc0-e9f180ba43e6"
        },
        "item": {
          "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
          "name": "Validate user is unable to check status as the token is invalid.",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-task-status",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bc3d613a-0002-4841-b647-f7887322e10b",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "40",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "bb33c48a-36e1-47ea-8e39-3f03bdd3e01a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 550,
          "responseSize": 58
        },
        "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4b6cca54-0110-4611-a5c3-1e0e790d776e",
          "length": 92,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "840f45e4-a2c9-49d8-93c9-ee3bdb4c5ac7"
        },
        "item": {
          "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
          "name": "Validate user is unable check status as incorrect CRUD operation is used.",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-medical-file-upload",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0a3b8a71-9476-4b02-9666-efcf458aaf71",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "40",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2a07b3c4-ba81-4f5b-8e08-c4bb286fe615",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 534,
          "responseSize": 31
        },
        "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "806899b7-9a6a-44d9-a2e2-9b6218be8003",
          "length": 92,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "91994255-9c14-4601-afca-6ce90f974d73"
        },
        "item": {
          "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
          "name": "Validate user is able to fetch patient's data successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status Code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8118a6db-6728-453e-8164-1592a913f654",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5993f25f-2741-453d-b29d-023e78ad8417",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:29 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 295,
          "responseSize": 58
        },
        "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
        "assertions": [
          {
            "assertion": "Status Code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient details fetched successfully.'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient details fetched successfully.'\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fb95bed0-0904-4ad9-accf-6ab802dbb5c9",
          "length": 92,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "857a524c-274c-46c8-a5e6-8fbb954421d6"
        },
        "item": {
          "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
          "name": "Validate user is unable to fetch patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status Code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "12345"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bb902403-538c-4f44-9b87-999f30fb9467",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a902e823-4e3e-4714-8515-1e6a4efb391e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:29 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 300,
          "responseSize": 58
        },
        "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
        "assertions": [
          {
            "assertion": "Status Code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Invalid id'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Invalid id'\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5262bb3c-5afe-4a06-bc70-5f1a4c079bd3",
          "length": 92,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ed092f50-8850-4780-9317-cd9386426d50"
        },
        "item": {
          "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
          "name": "Validate user is unable to fetch patient's data without query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4cf9d0f7-da4c-40f5-9d3a-6022cccea663",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8536b749-ee54-44f5-9736-78bf3cfef05d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:29 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 292,
          "responseSize": 58
        },
        "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Invalid id'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Invalid id'\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "66b60e66-c9c8-4520-a5c6-e9fd15f7848e",
          "length": 92,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ae342b85-d810-4422-9800-3ecef2a82436"
        },
        "item": {
          "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
          "name": "Validate user is unable to fetch patient's data without Authorization",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f73aa3f2-9790-48ca-9a2d-8b75450c9864",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "d9e37313-b8b5-4227-83fc-579d789e7c44"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f9cc26c0-c03b-4c90-9766-64d26da7b212",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "def3d046-9576-4cc3-9f3e-89c020898b1a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 264,
          "responseSize": 62
        },
        "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ed05d5c8-4a8b-4663-9877-f4adde4e84a5",
          "length": 92,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "88e43ad5-e3ae-4536-a7fd-5fb13fbbe102"
        },
        "item": {
          "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
          "name": "Validate user is unable to fetch patient's data with invalid/expired token",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b3e932ea-a8a5-431b-a765-ca42758169b5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "8221d3fa-407a-472d-87d9-6d9be8bb49ae"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "949e4e0a-0c25-4b3d-b70f-336e77f40f68",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4f475ee8-40ac-4aac-a0af-4383edc44324",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 290,
          "responseSize": 58
        },
        "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "af8e7467-9622-405f-97bc-5ea82174260f",
          "length": 92,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c8f96260-53be-49db-a78e-faa7d77a96e2"
        },
        "item": {
          "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
          "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52c1f5ae-ab9e-4e68-9e85-092ee726b6bf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "02d1a159-6dd8-4d1f-b904-08c7e733f6b9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "63350b2f-c370-481a-aa5f-624b6e897a2d",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "1ae47ff2-7ed7-4e86-a678-8e755036ef63",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:30 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 264,
          "responseSize": 31
        },
        "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "62569094-ba5c-4a77-b538-b7a06c47ca39",
          "length": 92,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bb3ef1a6-bb9c-4793-87ac-f845a2fd088d"
        },
        "item": {
          "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
          "name": "Validate user is able to check patient id successfully",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let patientId = \"patient_\" + new Date().getTime();\r",
                  "\r",
                  "// Set the environment variable\r",
                  "pm.environment.set(\"patient_id\", patientId);\r",
                  "\r",
                  "console.log(\"Environment Patient ID set to:\", patientId);\r",
                  "\r",
                  "function getRandomString(length) {\r",
                  "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                  "    let result = '';\r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                  "    }\r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Generate a unique name using a random string\r",
                  "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                  "pm.environment.set(\"name\", name);"
                ],
                "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "08a538e5-6080-490b-86f2-113ecd3aace9",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "45",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1722419011434\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b45cbf10-b7f6-421f-b6bc-d4e0fb8251ed",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:31 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 549,
          "responseSize": 58
        },
        "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:38)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient id does not exist'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient id does not exist'\n   at Object.eval sandbox-script.js:3:38)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ceb08068-af97-4ef4-b105-ca2d3ed64e92",
          "length": 92,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "15ee3b1f-7d21-4a7e-aa47-1e67644784c8"
        },
        "item": {
          "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
          "name": "Validate user is able to update patient's information successfully",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3529ec9f-6cc6-4a90-aabc-9b232097ded5",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "416",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"patient_1722419011434\",\r\n     \"name\": \"Name_mKO9OMjn_1722419011435\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "10ae9cfe-49d3-4683-b0af-08ec20b649dd",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:32 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 559,
          "responseSize": 58
        },
        "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:39)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient info updated successfully.'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient info updated successfully.'\n   at Object.eval sandbox-script.js:3:39)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cb923450-4cfe-41b0-881a-87c1ff364a91",
          "length": 92,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4161a472-7497-489f-ac9f-0190873b07da"
        },
        "item": {
          "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
          "name": "Validate user is unable to update patient's information with missing required field in the body",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f0bc26c5-9e9d-48e2-9109-dc6c26e205ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "370",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n\"id\":\"fb252ef4-f285-4e46-ae01-2cf42fa9c65d\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "fa9c456b-9840-4806-b151-f96974255748",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:32 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 551,
          "responseSize": 58
        },
        "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Missing required fields'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Missing required fields'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e29f8b50-c6f2-446b-a3fb-faa046961e99",
          "length": 92,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e0704081-d4d6-4e88-86fe-e7d71a40568d"
        },
        "item": {
          "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
          "name": "Validate user is unable to update patient's information without Authorization",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e5c59cc-f060-4afe-b024-984542492be2",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "352",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"id\":,\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "fe9ade3c-4d52-4e79-8521-f8bda23abbfb",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:33 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 529,
          "responseSize": 62
        },
        "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8256d9b-d177-49e7-8971-4af4ae2f13de",
          "length": 92,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a2195153-a05f-41e6-8f79-eac40dc1d4bf"
        },
        "item": {
          "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
          "name": "Validate user is unable to update patient's information as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3e888d42-4829-4faf-a807-f82f3c6db559",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "352",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"id\":,\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "7daa991f-27d3-4878-b7f7-ca3237ee193d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:34 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 558,
          "responseSize": 58
        },
        "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "aadba6a5-7a72-4d4c-8917-f454972aab79",
          "length": 92,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "48f38349-d139-49dc-a767-5fd467f2b37d"
        },
        "item": {
          "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
          "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-details",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c5dda89e-c7c4-48a1-9a27-cb348ac29a11",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "358",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \r\n    \"id\":,\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "0fc54a5a-ffe2-47ba-8688-5e7dd58e8f04",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:34 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "PATCH"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 525,
          "responseSize": 31
        },
        "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "90da2a60-d3ac-4ccd-9dc2-bb98ccce4df7",
          "length": 92,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8bffe05b-0ff7-40e6-8adb-1bfa0948c15e"
        },
        "item": {
          "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
          "name": "Validate user is able to check patient id successfully(true)",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6156c7ce-02f9-4c08-bcbf-031553ab5808",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "45",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1722419011434\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6960cf6e-7a77-4ad6-a450-0fceac735959",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:35 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 564,
          "responseSize": 58
        },
        "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:44)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient id already exists.'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient id already exists.'\n   at Object.eval sandbox-script.js:3:44)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "be017f18-fe2c-4da9-9ef2-4824ed16045a",
          "length": 92,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e7579098-8dcf-44dd-acf8-bcd9b57fafc2"
        },
        "item": {
          "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
          "name": "Validate user is unable to check patient id as patient_id is missing in the body",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de2a7143-13b7-49e8-801e-ad3b829eea02",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "8",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cd55af1f-8001-496c-a016-9f59c082a0ae",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 556,
          "responseSize": 58
        },
        "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cda9bfe8-bf04-4bb4-a902-d40145e5086b",
          "length": 92,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "34b804ca-0c8e-4f2c-ab76-e7a3f79d4758"
        },
        "item": {
          "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
          "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});"
                ],
                "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d970dbba-57b0-44fe-99b0-ee8c1fe218af",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "33",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c198db7d-05a0-4df7-a663-c6781beeed94",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:36 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 566,
          "responseSize": 58
        },
        "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient id does not exist'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient id does not exist'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "2a882ffb-5a6b-498a-b230-4a5ea32320ef",
          "length": 92,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "a5c0c62a-285e-4ff2-8627-5bcb3e0cc965"
        },
        "item": {
          "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
          "name": "Validate user is unable to check patient id without authorization",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52e3a331-5763-4767-ad66-fa455389775c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b8651cf2-81d1-4f9d-b19e-f572fd848ef4",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "47",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1722419011434\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "5f75db62-81de-4554-833a-a1422163cf52",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:37 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 532,
          "responseSize": 62
        },
        "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f8cf1f68-8753-4dbb-8097-2948ee008a01",
          "length": 92,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1ca0609c-0241-43c1-9189-0074742e4130"
        },
        "item": {
          "id": "726cca06-c036-4706-9714-96f6570eebf1",
          "name": "Validate user is unable to check patient id as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fe2a2433-cb04-4e3c-a0ea-564e35a9580e",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "47",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1722419011434\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8b3bc1d9-293f-43ed-8486-d73011405874",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:37 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 553,
          "responseSize": 58
        },
        "id": "726cca06-c036-4706-9714-96f6570eebf1",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "db9e4caf-23cf-4608-8611-13e6e716d87b",
          "length": 92,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "703802d2-d05c-48ef-b4c6-8cf679bc076e"
        },
        "item": {
          "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
          "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "check-patient-id",
              ""
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "100f6d8e-7634-4602-bebc-88aa8f3475f3",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "47",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"patient_id\": \"patient_1722419011434\"\r\n}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "0d64e7d7-77da-42e6-bf4e-996e49705ffd",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 534,
          "responseSize": 31
        },
        "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5e094015-b35e-4c8c-83dc-4fe8683b59a4",
          "length": 92,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7f0b38b7-f288-4e9b-8ec3-c4f1162c836a"
        },
        "item": {
          "id": "b0e983b1-5deb-4ace-858a-19b072190522",
          "name": "Validate user is able to search patients successfully",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": "patient_1722419011434"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "limit",
                "value": "10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "685ba061-d08d-4101-a873-33ab4068ec40",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cf67c4ee-eee8-4a58-9e3e-6b4de5331ec7",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:38 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 294,
          "responseSize": 58
        },
        "id": "b0e983b1-5deb-4ace-858a-19b072190522",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:50)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Search items fetched successfully'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Search items fetched successfully'\n   at Object.eval sandbox-script.js:3:50)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "029cb37f-1007-479b-9ea3-ab368102beae",
          "length": 92,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f0ed7bff-a265-4b40-8b3f-c8c49146d900"
        },
        "item": {
          "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
          "name": "Validate user is able to search patients if optional parameters are missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                },
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": "patient_1722419011434"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "00ce3391-d69c-407b-b0c8-b4279ddab19c",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "951a874c-38ac-4d51-8b09-f00e30abf55a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:39 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 294,
          "responseSize": 58
        },
        "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response message is Valid",
              "message": "expected 'error' to deeply equal 'success'",
              "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:2:51)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Search items fetched successfully'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Search items fetched successfully'\n   at Object.eval sandbox-script.js:3:51)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d798d87d-24f6-4ab6-b1cf-0644c096c94b",
          "length": 92,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "57f59e25-1cd5-4bb4-a047-029aaa4b0232"
        },
        "item": {
          "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
          "name": "Validate user is unable to search patients as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44ca4557-97ea-425e-b94e-b413f3fe369b",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e7f6e424-fa6e-4fc7-9e5a-e9b790e2cf62",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:39 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 289,
          "responseSize": 58
        },
        "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:52)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8fbb8405-84f8-4a44-8bc3-8f9168f893f7",
          "length": 92,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d5f9baf3-391f-4340-9a8d-73cad760a0bc"
        },
        "item": {
          "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
          "name": "Validate user is unable to search patients without Authorization",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": "patient_1722419011434"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a96f19bf-e57c-40d3-92df-9b5893b0d3a8",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "7abcc83f-6726-47ec-9cc9-93ea0385ad74",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:40 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 264,
          "responseSize": 62
        },
        "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "aa376e7b-1df9-40a1-97cc-97d5776b1827",
          "length": 92,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b195a015-9d6f-48bb-b92d-675c43446e08"
        },
        "item": {
          "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
          "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9ea7e78-a84c-4923-810f-594712794883",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "search-patients"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "keyword",
                "value": "patient_1722419011434"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4391feab-01f3-4502-ab51-db03a45556b6",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a77fbf6b-0668-4d5a-83d5-af298f21afb7",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:40 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 266,
          "responseSize": 31
        },
        "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9116d79b-35bf-4f77-a3a5-b6af9233cacc",
          "length": 92,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "55f04e93-687c-464c-8763-021fb46cf773"
        },
        "item": {
          "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-current-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-current-user-task-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b312debd-4031-4760-950b-0a0384cb0eb8",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "85c7e13a-a8ee-4750-90de-71344c62ab13",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:40 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 297,
          "responseSize": 58
        },
        "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:55)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'error' to deeply equal 'success'",
              "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:55)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient details fetched successfully.'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient details fetched successfully.'\n   at Object.eval sandbox-script.js:4:55)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8ff51564-5bd4-40ef-a052-db1375828ef7",
          "length": 92,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7d9cfdb9-6cbc-45f3-8f27-9d14f4aa619a"
        },
        "item": {
          "id": "691f3c81-4a23-4ed5-b0a1-4a46dfc603b7",
          "name": "Validate user is unable to get current user task info without authorization",
          "request": {
            "url": {
              "path": [
                "get-current-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6181861e-dffa-46f3-882b-6c0488d04ed7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "    });"
                ],
                "_lastExecutionId": "57aba010-6129-4289-ad45-6d847bb75668"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-current-user-task-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c83d9ece-4cd2-4f2f-a530-80643e51b734",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "dea5bb52-8147-4fe5-ac22-9cc256ea018a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:41 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 272,
          "responseSize": 62
        },
        "id": "691f3c81-4a23-4ed5-b0a1-4a46dfc603b7",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d946480b-164f-46b1-a468-c8f4d418d3b2",
          "length": 92,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f96723c8-eb02-4bf7-b0b4-747847be1067"
        },
        "item": {
          "id": "7f29083a-45fd-48d4-a12a-fdf34626fd3d",
          "name": "Validate user is unable to get current user task info as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "get-current-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "38aae98b-0911-4686-944e-e19902c7dd33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "f445ef88-48ab-4ab5-89b9-3df8c1711231"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-current-user-task-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7fac8206-ea1a-47f4-b8be-b108de5b6137",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3a9b5349-b086-44f1-9b67-cb1e91deee40",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:41 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 308,
          "responseSize": 58
        },
        "id": "7f29083a-45fd-48d4-a12a-fdf34626fd3d",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e9ab078f-efb7-4dbd-8f40-fa9a0e0fdf03",
          "length": 92,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "270eaa80-1c2c-4a81-8369-186e5161192a"
        },
        "item": {
          "id": "53159003-0a15-4368-bef2-b3497d667daf",
          "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-current-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1f8f75e-60e1-4c92-9556-346b0a29ec91",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "92b8620a-0222-45b0-b942-b2567304b2ef"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-current-user-task-info"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ce781710-080f-4505-bcc4-f92cf74d84a8",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e95c6964-8126-49ae-819f-4c298c578c73",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:41 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 263,
          "responseSize": 31
        },
        "id": "53159003-0a15-4368-bef2-b3497d667daf",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5c8ee149-23e2-4d8e-9332-86e9037d058c",
          "length": 92,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "042f96af-8c67-4c30-9594-94983c134598"
        },
        "item": {
          "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "521b9290-2673-46fb-b057-d20c3aa15fca",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "df898efc-bfd0-4100-b157-8f2a08609d18",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:42 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 292,
          "responseSize": 58
        },
        "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
        "assertions": [
          {
            "assertion": "Response has all required fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response has all required fields",
              "message": "expected { status: 'error', …(1) } to have property 'data'",
              "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:59)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'error' to deeply equal 'success'",
              "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:59)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Variant file(s) processed successfully'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Variant file(s) processed successfully'\n   at Object.eval sandbox-script.js:4:59)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e58af2b1-3220-481a-aae5-a7d1db418d97",
          "length": 92,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2a1984ac-d6b9-4d41-a7a9-e796852566b1"
        },
        "item": {
          "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
          "name": "Validate user is unable to start variant processing as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a52b03e7-654d-4822-97af-a375811bab03",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "169f368c-d428-4a2f-9306-6a3dd34a17bc",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "51a54772-76af-4d16-939f-4f73dd175f31",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:42 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 289,
          "responseSize": 58
        },
        "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:60)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7abad653-e626-45b6-9135-a5d70fa65b18",
          "length": 92,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "99fe0d13-c291-4a6b-b014-7cf8aae2cf3d"
        },
        "item": {
          "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
          "name": "Validate user is unable to start variant processing without Authorization",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e141686a-3b1c-47e6-b952-d789c9452d51",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "c758d5a2-12cf-4164-b255-8a0686cb232d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3d082324-d3b8-4c96-a1b2-8ebe5d0df1fb",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "baadace5-bd94-4f67-b791-9e9ec230ab19",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:43 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 267,
          "responseSize": 62
        },
        "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4471fdd6-f311-4279-8f9e-4d8c1940bba9",
          "length": 92,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "57e2e4d1-c688-48fb-8a21-3271c5326e02"
        },
        "item": {
          "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
          "name": "Validate user is unable to start variant processing as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5f5d5f17-3618-455d-ba62-feadd5bc6837",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "886a17fd-e3c4-45c5-80ae-ae3ead5de4cb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3e3d7799-afbe-4bbb-8743-4f01a6abddce",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "fe98ce2f-8b90-4e08-a3a6-689ec7bb21c3",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:43 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 283,
          "responseSize": 58
        },
        "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d1eee28c-f067-48be-88ea-1abff4125db1",
          "length": 92,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "73697a36-6338-47dd-aa14-30686f3ba20f"
        },
        "item": {
          "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
          "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e9004f3-e059-417a-b6f4-1ffb5f94cced",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "be9f8cec-9243-4157-81dc-a96bcb1fd656"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "start-variant-processing"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9140a7bf-5017-49e5-af18-706cfcd79c32",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "69a49b10-545c-4252-b04d-69d520b53048",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:43 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 266,
          "responseSize": 31
        },
        "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b89eba45-88d7-483d-ad0f-35a9f0ded83e",
          "length": 92,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4c6df0fd-925b-4b99-a2ee-18c218d703de"
        },
        "item": {
          "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
          "name": "Validate user is able to display patient demograph dropdown successfully",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "tmb"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6a5c38a-6a59-4b5d-8fb9-6496ea12c4ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "07564002-c602-4add-8570-17ad22a18929",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 292,
          "responseSize": 58
        },
        "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
        "assertions": [
          {
            "assertion": "Response is an array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response is an array",
              "message": "expected { status: 'error', …(1) } to be an array",
              "stack": "AssertionError: expected { status: 'error', …(1) } to be an array\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "Response contains all expected elements",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains all expected elements",
              "message": "the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:64)"
            }
          },
          {
            "assertion": "Response does not contain unexpected elements",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "Response does not contain unexpected elements",
              "message": "response.forEach is not a function",
              "stack": "TypeError: response.forEach is not a function\n   at Object.eval sandbox-script.js:3:64)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3a4f135d-655e-402c-acd6-653eb44d9cb1",
          "length": 92,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "30eae64a-7d3a-4e2a-8731-c6f0722f6794"
        },
        "item": {
          "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
          "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "00a025cd-3af5-4e2c-986b-3422964f49b7",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8a88f809-09ba-47f3-8f78-c65bc1212248",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 295,
          "responseSize": 58
        },
        "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:65)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "152e1d71-2098-465b-b4b6-2858b0fd02c4",
          "length": 92,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f3129457-b9f4-4ae7-97a0-a2f97d2cd8d9"
        },
        "item": {
          "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
          "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8586c8f2-f8e4-40ca-b54d-09c6dc481cf1",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "127c56de-29c2-4d0c-ab59-e4645db6a243",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:44 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 307,
          "responseSize": 58
        },
        "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:66)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a2b8b52d-d18a-40c2-8fb9-9881838023c5",
          "length": 92,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6ac5e20f-f71b-4144-afb7-b9cd181de416"
        },
        "item": {
          "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
          "name": "Validate user is unable to display patient demograph dropdown without Authorization",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "tmb"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c031e190-f0ba-48b3-a3f2-2fd4e91c86ac",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "c6129d06-0421-4528-8541-dff8aeab8b61",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 270,
          "responseSize": 62
        },
        "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "43bbb975-91e9-41e1-b9ad-fa4acc9fe911",
          "length": 92,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "dbb8078e-29e4-4131-adfe-3eff3f2f08a9"
        },
        "item": {
          "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
          "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "tmb"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ff6777ec-d66e-4ab9-8f10-bdaffbae588d",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "2272f5dd-78d2-4b89-8555-294547012c91",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:45 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 289,
          "responseSize": 58
        },
        "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f420b7df-4b52-4087-a7a9-fc50bd7b0e5e",
          "length": 92,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ad1cafcf-1017-4fd6-bced-f35950804673"
        },
        "item": {
          "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
          "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "patient-demograph-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "tmb"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e772a5c8-ecf2-449e-a3cb-c042a0fa2d6d",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "eb28a81c-cdb3-409f-a1dd-5d158a2ef106",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 263,
          "responseSize": 31
        },
        "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3b97fb04-d2be-44e6-8f9a-ae124d0446e7",
          "length": 92,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "20b53b37-f5fd-47bd-a682-4d9f6e34cfa3"
        },
        "item": {
          "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
          "name": "Validate user is able to display sub tumor type dropdown successfully",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\r",
                  "    \"Small Cell Lung Cancer\",\r",
                  "    \"Non-Small Cell Lung Cancer\",\r",
                  "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                  "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                  "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                  "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                  "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                  "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                  "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                  "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                  "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                  "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                  "    \"Lung Carcinoid (LUCA)\",\r",
                  "    \"Small Cell Lung Cancer (SCLC)\",\r",
                  "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                  "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                  "    \"Lung Adenocarcinoma (LUAD)\",\r",
                  "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                  "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                  "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                  "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                  "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                  "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                  "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                  "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                  "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                  "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                  "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                  "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                  "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                  "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                  "];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "lung_cancer"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a8bbbeae-461a-401e-b405-8a8841805266",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "32ed42de-d175-4a44-b796-c46483c1827a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 300,
          "responseSize": 58
        },
        "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
        "assertions": [
          {
            "assertion": "Response is an array",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response is an array",
              "message": "expected { status: 'error', …(1) } to be an array",
              "stack": "AssertionError: expected { status: 'error', …(1) } to be an array\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "Response contains all expected elements",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response contains all expected elements",
              "message": "the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:70)"
            }
          },
          {
            "assertion": "Response does not contain unexpected elements",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "Response does not contain unexpected elements",
              "message": "response.forEach is not a function",
              "stack": "TypeError: response.forEach is not a function\n   at Object.eval sandbox-script.js:3:70)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "887b20a3-bd59-47c9-9ed6-41bcdde6c92e",
          "length": 92,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5fa0a384-9e0c-47fd-95b1-bc264362fec2"
        },
        "item": {
          "id": "66248610-7e52-4f55-91fd-d87342f31812",
          "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "72601212-fd2b-4340-9a92-7319e8dcb0f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a6349484-36f1-4068-9ad6-0d3fd8c1679a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:46 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 296,
          "responseSize": 58
        },
        "id": "66248610-7e52-4f55-91fd-d87342f31812",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:71)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1629978c-e9c9-487c-8a68-e74cc8715836",
          "length": 92,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "37821377-e679-46a8-9843-f7c4e763b48a"
        },
        "item": {
          "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
          "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "66b0bc07-f8af-43cc-9f14-d72399af3d38",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "0aa45b4e-96b8-464f-9ec1-ad106a1c8beb",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:47 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 283,
          "responseSize": 58
        },
        "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:72)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f2896146-739a-4fd4-b57c-191025e234b3",
          "length": 92,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "afe69e07-d5d2-4467-9f19-4dbf97c78a0e"
        },
        "item": {
          "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
          "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "lung_cancer"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "70322aa1-98b2-48fc-a43e-90472f73e520",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "7dea50cf-85da-4e85-b637-3bf8db710219",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:47 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 274,
          "responseSize": 62
        },
        "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b11124b1-aaef-4ebb-89a0-c2bc6a2768c3",
          "length": 92,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "68c5499d-0a51-4078-8534-2e94078d8515"
        },
        "item": {
          "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
          "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "lung_cancer"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bc0b0cb6-75cc-4cda-81d1-aebe212e15e9",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4c883074-f6cc-43b8-b90c-95cc106af8f7",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:47 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 295,
          "responseSize": 58
        },
        "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5d1bb707-f5f3-4521-8a94-aa9edccc4e8f",
          "length": 92,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "36b7cb3b-9c34-4c08-ac9d-2cd3c0505372"
        },
        "item": {
          "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
          "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "sub-tumor-dropdown"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "key",
                "value": "{{key}}"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6822f8b8-8567-43a2-a20e-4635ca620057",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4d5d8da2-f8ee-440e-b526-5473af54056b",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:43:48 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 267,
          "responseSize": 31
        },
        "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "502cb325-7ff3-4649-bdbf-62ce0eb1e5a4",
          "length": 92,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7a1c17ca-a333-4e40-ba3c-f1867b1150b9"
        },
        "item": {
          "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
          "name": "Validate user is able to get patient file details successfully",
          "request": {
            "url": {
              "port": "8001",
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "13",
                "233",
                "37",
                "45"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "13",
              "233",
              "37",
              "45"
            ],
            "query": [
              {
                "key": "id",
                "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c038936e-61b7-403a-9dfb-00621e8dec50",
              "system": true
            },
            {
              "key": "Host",
              "value": "13.233.37.45:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
        "requestError": {
          "errno": -4039,
          "code": "ETIMEDOUT",
          "syscall": "connect",
          "address": "13.233.37.45",
          "port": 8001
        },
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "9668b7e5-ca2b-4e4d-9158-730c6179a29e",
              "timestamp": 1722419049925,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9d5f7810-8dfe-4304-8baa-fda0678efcfd",
          "length": 92,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8442a329-c080-4046-b6c5-77fbf1be35b3"
        },
        "item": {
          "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
          "name": "Validate user is unable to get patient file details with missing required parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fa7de137-b7dc-4f5b-a891-df2e86235fb9",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b867d975-f13b-4f0a-9521-f0cf4df7ee2e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:09 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 570,
          "responseSize": 58
        },
        "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient not found'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient not found'\n   at Object.eval sandbox-script.js:3:77)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "83eed0e9-36b7-4096-a889-d2fce0ddc3a7",
          "length": 92,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "23624b3f-7153-46ee-9309-59a8a7b5adc0"
        },
        "item": {
          "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
          "name": "Validate user is unable to get patient file details with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "%2212345%22"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "38de7ea0-dd92-4b27-a1cc-f27ca1360f1b",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3f9a35d9-1c62-43e6-a7c2-e4f7450bcc36",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:10 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 303,
          "responseSize": 58
        },
        "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Patient not found'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient not found'\n   at Object.eval sandbox-script.js:3:78)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5f8eda16-f17f-4f78-b965-cf9841be22ed",
          "length": 92,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6022d69d-1219-4c37-83e3-902ffe4ba599"
        },
        "item": {
          "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
          "name": "Validate user is unable to get patient file details without Authorization",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "aa94e452-56e5-4025-bd5b-ef23d5a7f6d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "11766759-b2ea-4fc4-ae8e-670a8d0a1afe"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2f2ef0e8-bb7e-4396-a848-39ebd3fd89c2",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "8f262ba3-0005-40ac-9b80-0df31019d58b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:10 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 303,
          "responseSize": 62
        },
        "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "072a1f66-864a-4154-ac77-12216235fd46",
          "length": 92,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5e54bc4b-6dce-4821-aaa0-c0ac551dd56d"
        },
        "item": {
          "id": "d05647b3-4780-4743-9ea2-9398984305b6",
          "name": "Validate user is unable to get patient file details as token is invalid/expired",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1302bdb3-2848-4ba3-aa3a-25629b3785e6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0d4d9cd3-638a-429e-b6f5-9f5dc3fdae74"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "597c9792-c859-4ba2-a211-171edc1f89a7",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3168c21d-e5a9-417b-b86b-2b421dfd9dc4",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:11 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 305,
          "responseSize": 58
        },
        "id": "d05647b3-4780-4743-9ea2-9398984305b6",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8a0ea40-1daa-4d79-af6b-29bfa5191343",
          "length": 92,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "06e035c4-fad7-4566-a0c6-c013130ca1d9"
        },
        "item": {
          "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
          "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{uid}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e93de480-108e-4d74-a2f9-7e17a7041ab6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "5ba81b7c-e780-4932-9abb-9351d850c320"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "get-patient-file-details"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "25d8a798-0ac0-449d-ba99-75a084e517c3",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "988c608a-a09a-4dc3-8e6d-e24ae9d44d0c",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:11 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 297,
          "responseSize": 31
        },
        "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Response message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "942329a7-4ae2-41e3-9004-7aad887b01f9",
          "length": 92,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "44dcfd3c-0565-416b-b1c7-8aa193a6aa44"
        },
        "item": {
          "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
          "name": "Successfully export files",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "69c804b0-150d-4ae6-ba39-3c748f70226b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6e5d9d00-8828-465b-a1bb-f25293ebf72c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "export-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75d30232-45df-45a2-8993-6973b163d3e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "ebf3027b-1f05-44b0-89c8-ad98d83cda24",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:17 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 554,
          "responseSize": 58
        },
        "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Successfully generated link'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Successfully generated link'\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "672423be-bcce-4819-a9aa-e18a6a6bfcac",
          "length": 92,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "02e1e8e1-ad97-471e-8a26-77e24b8d29fa"
        },
        "item": {
          "id": "349619be-0c1c-4a84-9069-bd402e53105a",
          "name": "Successfully could not export files with incorrect id",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "1234567890"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                  "});"
                ],
                "_lastExecutionId": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "export-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "76a8d26d-d0bf-4129-ad12-a33cdec72817",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "304c641e-473b-4e5a-abff-60bc83cab284",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:22 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 563,
          "responseSize": 58
        },
        "id": "349619be-0c1c-4a84-9069-bd402e53105a",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Error while removing files'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Error while removing files'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "07a4fc16-8c91-4267-8cf2-94357be32daf",
          "length": 92,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "498cd847-72d1-4df4-8d67-f8da26c1f3d4"
        },
        "item": {
          "id": "e03077f1-a2f9-49b8-970b-dde96c639961",
          "name": "Could not export files  due to missing authorization",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7248f218-854d-4e29-b04a-1e41fd1d5f1d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "24fee36b-c662-4a27-97d8-4b170e72d19c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f6c92af2-f61e-455f-a66d-2d33283df621",
                "type": "text/javascript",
                "exec": [],
                "_lastExecutionId": "11671069-0f1e-4be5-b83e-be49c05b65a8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "export-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "72f1e5e7-5b93-4a2f-b69c-0a54c09a7452",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "d33ab139-a57b-41a3-892a-25cc5767f0c4",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:28 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 533,
          "responseSize": 62
        },
        "id": "e03077f1-a2f9-49b8-970b-dde96c639961",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1d5f386e-27d1-4830-8d3f-27af58d51b2b",
          "length": 92,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "99a932d3-53f7-4c76-a27d-9dae682dba73"
        },
        "item": {
          "id": "b65b5d9f-9195-46cb-a14f-c66d3fdc15ae",
          "name": "Could not export files  due to invalid  authorization",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2cdfcdfc-724f-4365-90e2-b3f1b35070d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "74547ee0-e311-4204-a24e-ba6eebddcf48"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "export-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "85baf7ac-ba7e-4f59-9311-d8088f2eefc7",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e2acf151-82e2-42d2-9376-285897a5d2bf",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:34 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 553,
          "responseSize": 58
        },
        "id": "b65b5d9f-9195-46cb-a14f-c66d3fdc15ae",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e167b6a1-3ef1-4009-b84a-74469d132d7a",
          "length": 92,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e11dcbb9-c0b6-4277-a553-306febb5ccc5"
        },
        "item": {
          "id": "e141412c-0a0e-4f67-bf85-bcecf24b1186",
          "name": "Could not export files  due to invalid CRUD operation",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "af3e1362-bcf0-40c7-b15f-40b71d3b4560",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "617d2973-6d93-496c-b5e0-d5463f5a92cc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "export-files"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [
              {
                "key": "id",
                "value": "fb252ef4-f285-4e46-ae01-2cf42fa9c65d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "69b9623b-5372-4ef6-b9e1-8e0847401217",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "73a71937-2a7f-4460-bd49-ce072bd9a026",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:44:39 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "GET"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 533,
          "responseSize": 31
        },
        "id": "e141412c-0a0e-4f67-bf85-bcecf24b1186",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "94de56f0-1d45-4710-80cd-3eac489abc7a",
          "length": 92,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ac6454c6-f377-429b-98c7-f9623a47aae6"
        },
        "item": {
          "id": "47e71458-0121-485d-bb8e-8754668d3549",
          "name": "Update patient workflow",
          "request": {
            "url": {
              "port": "8001",
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "13",
                "233",
                "37",
                "45"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                  "});"
                ],
                "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-workflow"
            ],
            "host": [
              "13",
              "233",
              "37",
              "45"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2eb5484c-93dc-49b0-9913-002d1482047e",
              "system": true
            },
            {
              "key": "Host",
              "value": "13.233.37.45:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-07-31T09:44:40.475Z\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "id": "47e71458-0121-485d-bb8e-8754668d3549",
        "requestError": {
          "errno": -4039,
          "code": "ETIMEDOUT",
          "syscall": "connect",
          "address": "13.233.37.45",
          "port": 8001
        },
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Status message is Valid",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8bea57f4-fe23-4731-9540-5de8eab81a6f",
          "length": 92,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3a8277f4-1f89-4d17-9dfd-08e241cdec42"
        },
        "item": {
          "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
          "name": "Could not Update patient workflow with incorrect id",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-workflow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e266cb59-f6a9-440d-9a53-f8f106adf251",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "173",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "3d098485-63c1-4542-99f2-1368aedd535d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:45:01 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 644,
          "responseSize": 58
        },
        "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "46cbebf5-45f7-4f9d-8164-f04d3f41a607",
          "length": 92,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cb5bcf47-8218-40e9-aeb0-60193ee4f672"
        },
        "item": {
          "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
          "name": "Could not Update patient workflow with missing required fields",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-workflow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8bbab5b0-a9be-4fa1-a2a7-aae6c8c1e427",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "150",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "c17eabb8-2c5b-4de4-8fb9-83499d2fe80e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:45:01 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 304,
          "responseSize": 58
        },
        "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status Code is valid",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status message is Valid",
              "message": "expected 'Token is invalid or expired' to deeply equal 'Missing required fields'",
              "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Missing required fields'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8148c66a-824b-4904-9f18-3aabbf1bef4e",
          "length": 92,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "18266fa1-0be8-40d0-a08c-2ab9adbcb3b7"
        },
        "item": {
          "id": "785834f9-86cc-497b-8c46-03003684de0c",
          "name": "Could not Update patient workflow with missing Authorization",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "noauth",
              "noauth": []
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                  "});"
                ],
                "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                "type": "text/javascript",
                "exec": [],
                "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-workflow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ce9e80ce-b33f-4636-a252-51850ad43595",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "169",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "noauth",
            "noauth": []
          }
        },
        "response": {
          "id": "2863b711-46aa-450d-9f63-638e4151b55b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:45:03 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "62"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              32,
              105,
              115,
              32,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 271,
          "responseSize": 62
        },
        "id": "785834f9-86cc-497b-8c46-03003684de0c",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8c2d3ae-d9be-4335-9a51-41010ba0269e",
          "length": 92,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b88b6a0d-f088-44dd-aba1-75090c2e69c1"
        },
        "item": {
          "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
          "name": "Could not Update patient workflow with invalid Authorization",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-workflow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a54f3a29-a5ac-4bbb-820e-d035318918ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "169",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "9ec7b834-1b59-4ff3-ac85-bca2b34582a0",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:45:03 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "content-length",
              "value": "58"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              111,
              107,
              101,
              110,
              32,
              105,
              115,
              32,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              111,
              114,
              32,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 290,
          "responseSize": 58
        },
        "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "39fca397-49c5-41ed-8422-5956ad93fc52",
          "length": 92,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b4cb503e-1e8a-4f7a-b30d-ce228f00c168"
        },
        "item": {
          "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
          "name": "Could not Update patient workflow with invalid CRUD  operation",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(405);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8001",
            "path": [
              "update-patient-workflow"
            ],
            "host": [
              "3",
              "137",
              "2",
              "183"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.37.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "056d2366-f76b-4445-a22d-3d0da7268664",
              "system": true
            },
            {
              "key": "Host",
              "value": "3.137.2.183:8001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "169",
              "system": true
            }
          ],
          "method": "GET",
          "body": {
            "mode": "raw",
            "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiIwZWY1MDRkYy1iYWQzLTRjYjItOTg4Zi1hMDgwOGE2YWYwOGIiLCJldmVudF9pZCI6Ijk4MDBiZDRiLWJhZTUtNDVlOC1iMzdmLWE5MWJlMDU1YjEyZSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MjE4OTgyMTcsImV4cCI6MTcyMTk4NDYxNywiaWF0IjoxNzIxODk4MjE3LCJqdGkiOiIyNTIxYzU0MC1lMmI1LTQ1ZWQtODY3Zi02OGZkYjM5MjMzMjkiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.znRyuZ-eylaT8o-If_Tom9nYFM6LyVQSAAR7bcqDcL_Y5Fll-re37EmdvavErT-U8YpQO1t56kjxIQuQDD60GG2ydVRJMaJrwLqhG0IiiguXa4NYw_KmpX4kDc3muKDeo6GKEnSZT3N-yy5xG5YX4JZClBdYixdLmn7wRC4vYURtCekwIcIksUkUUw8swYK3rit2ucMA8gfnAHQqQ3XG6Jio9RASavTUC5YstZDAALHJzgkZsZ0_mLK0oTTjhRoSoROTZRO1YHz1d7IF9MrVs2p_Y9B9DNGn88l-R1J53LC09uxnczT3DkAAUX8448i0jsdXYG0b7-CKIooXPpHp_A",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "27325a28-348e-46f8-bcee-1ee9d9e2b8c2",
          "status": "Method Not Allowed",
          "code": 405,
          "header": [
            {
              "key": "date",
              "value": "Wed, 31 Jul 2024 09:45:04 GMT"
            },
            {
              "key": "server",
              "value": "uvicorn"
            },
            {
              "key": "allow",
              "value": "POST"
            },
            {
              "key": "content-length",
              "value": "31"
            },
            {
              "key": "content-type",
              "value": "application/json"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              116,
              97,
              105,
              108,
              34,
              58,
              34,
              77,
              101,
              116,
              104,
              111,
              100,
              32,
              78,
              111,
              116,
              32,
              65,
              108,
              108,
              111,
              119,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 267,
          "responseSize": 31
        },
        "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
        "assertions": [
          {
            "assertion": "Status Code is valid",
            "skipped": false
          },
          {
            "assertion": "Status message is Valid",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 5160
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "eb4efb0a1b61d6a9b8b89cfc69ee584a",
          "id": "0c55f48d-eea3-4713-85de-1ca72dea3926",
          "timestamp": 1722418985854,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
          "name": "Validate list of confirmed Patient",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "Accept-Language",
                "value": "en-GB,en-US;q=0.9,en;q=0.8"
              },
              {
                "key": "Authorization",
                "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
              },
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Origin",
                "value": "http://localhost:3000"
              },
              {
                "key": "Referer",
                "value": "http://localhost:3000/"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9b57939f-ea01-4235-8699-c5fe404ab4a1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "affd158a-7c6e-409b-8f1c-ae738704b382"
              }
            }
          ]
        },
        "parent": {
          "id": "836b7bbd-09df-430d-ab36-83d3fdad6cc5",
          "name": "Lists information of all patients' data whose state is confirmed",
          "item": [
            {
              "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
              "name": "Validate list of confirmed Patient",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "Accept-Language",
                    "value": "en-GB,en-US;q=0.9,en;q=0.8"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "key": "Origin",
                    "value": "http://localhost:3000"
                  },
                  {
                    "key": "Referer",
                    "value": "http://localhost:3000/"
                  },
                  {
                    "key": "User-Agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9b57939f-ea01-4235-8699-c5fe404ab4a1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "affd158a-7c6e-409b-8f1c-ae738704b382"
                  }
                }
              ]
            },
            {
              "id": "bc138774-85a3-4f2f-b73d-e7ca0cd2797c",
              "name": "Validate list of confirmed Patient not displaying without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95c18107-3611-4bea-bf3d-9d83143aeab9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "308c6643-1ae2-4d7c-abd8-88892263993d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b722bae6-6550-4ba8-8af2-ebc57a481087",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2acf8e9c-7a18-4d80-ac2e-bf7f1f378933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "51329f46-1ea6-4e0c-bb48-88d26f72e5ca",
              "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ac5f94a-db89-41c7-8b08-c738be9be6f2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d25ec83a-0315-4b1e-a6c7-c9ae608fa29f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
              "name": "Validate list of confirmed Patient not displaying with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "100"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b58254d9-9fe5-475b-a11b-8e240838c21f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5fb8d19d-9b5f-4b63-81ac-7f7180926f06"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "7c4b623e-f68c-4d4a-85ce-9f1201a9b695",
              "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6b8ce8b-19cb-4b35-91ad-4bd0868bbfef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1bc4d824-1e58-4d5d-a748-d2d18727b776"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e20fc2c1-f769-4e30-838b-d23b5550d397",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fa16e0ce-45ed-4dc2-939f-8b16774b0355"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 92,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac981ee8-b7d6-4312-b497-00d80340b5a5",
          "httpRequestId": "c1056d96-5d89-4dc8-900a-4080036d8e32",
          "scriptId": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
          "execution": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient information fetched successfu…'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient information fetched successfu…'\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "eac94b250a8fa2000a913394eb8553cc",
          "id": "f0effab0-f8d4-42f5-930c-4a6e94cbca0d",
          "timestamp": 1722418985862,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
          "name": "Validate list of confirmed Patient",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json, text/plain, */*"
              },
              {
                "key": "Accept-Language",
                "value": "en-GB,en-US;q=0.9,en;q=0.8"
              },
              {
                "key": "Authorization",
                "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
              },
              {
                "key": "Connection",
                "value": "keep-alive"
              },
              {
                "key": "Origin",
                "value": "http://localhost:3000"
              },
              {
                "key": "Referer",
                "value": "http://localhost:3000/"
              },
              {
                "key": "User-Agent",
                "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9b57939f-ea01-4235-8699-c5fe404ab4a1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "affd158a-7c6e-409b-8f1c-ae738704b382"
              }
            }
          ]
        },
        "parent": {
          "id": "836b7bbd-09df-430d-ab36-83d3fdad6cc5",
          "name": "Lists information of all patients' data whose state is confirmed",
          "item": [
            {
              "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
              "name": "Validate list of confirmed Patient",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "Accept-Language",
                    "value": "en-GB,en-US;q=0.9,en;q=0.8"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "key": "Origin",
                    "value": "http://localhost:3000"
                  },
                  {
                    "key": "Referer",
                    "value": "http://localhost:3000/"
                  },
                  {
                    "key": "User-Agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9b57939f-ea01-4235-8699-c5fe404ab4a1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "affd158a-7c6e-409b-8f1c-ae738704b382"
                  }
                }
              ]
            },
            {
              "id": "bc138774-85a3-4f2f-b73d-e7ca0cd2797c",
              "name": "Validate list of confirmed Patient not displaying without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95c18107-3611-4bea-bf3d-9d83143aeab9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "308c6643-1ae2-4d7c-abd8-88892263993d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b722bae6-6550-4ba8-8af2-ebc57a481087",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2acf8e9c-7a18-4d80-ac2e-bf7f1f378933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "51329f46-1ea6-4e0c-bb48-88d26f72e5ca",
              "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ac5f94a-db89-41c7-8b08-c738be9be6f2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d25ec83a-0315-4b1e-a6c7-c9ae608fa29f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
              "name": "Validate list of confirmed Patient not displaying with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "100"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b58254d9-9fe5-475b-a11b-8e240838c21f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5fb8d19d-9b5f-4b63-81ac-7f7180926f06"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "7c4b623e-f68c-4d4a-85ce-9f1201a9b695",
              "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6b8ce8b-19cb-4b35-91ad-4bd0868bbfef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1bc4d824-1e58-4d5d-a748-d2d18727b776"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e20fc2c1-f769-4e30-838b-d23b5550d397",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fa16e0ce-45ed-4dc2-939f-8b16774b0355"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 92,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ac981ee8-b7d6-4312-b497-00d80340b5a5",
          "httpRequestId": "c1056d96-5d89-4dc8-900a-4080036d8e32",
          "scriptId": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
          "execution": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "5607f0f656d8b399856600b030cd48df",
          "id": "01d96e26-798b-4b17-8b90-0ef7f45f2a61",
          "timestamp": 1722418987044,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
          "name": "Validate list of confirmed Patient not displaying with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "100"
                },
                {
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                  "});"
                ],
                "_lastExecutionId": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b58254d9-9fe5-475b-a11b-8e240838c21f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5fb8d19d-9b5f-4b63-81ac-7f7180926f06"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "836b7bbd-09df-430d-ab36-83d3fdad6cc5",
          "name": "Lists information of all patients' data whose state is confirmed",
          "item": [
            {
              "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
              "name": "Validate list of confirmed Patient",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "Accept-Language",
                    "value": "en-GB,en-US;q=0.9,en;q=0.8"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "key": "Origin",
                    "value": "http://localhost:3000"
                  },
                  {
                    "key": "Referer",
                    "value": "http://localhost:3000/"
                  },
                  {
                    "key": "User-Agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9b57939f-ea01-4235-8699-c5fe404ab4a1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "affd158a-7c6e-409b-8f1c-ae738704b382"
                  }
                }
              ]
            },
            {
              "id": "bc138774-85a3-4f2f-b73d-e7ca0cd2797c",
              "name": "Validate list of confirmed Patient not displaying without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95c18107-3611-4bea-bf3d-9d83143aeab9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "308c6643-1ae2-4d7c-abd8-88892263993d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b722bae6-6550-4ba8-8af2-ebc57a481087",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2acf8e9c-7a18-4d80-ac2e-bf7f1f378933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "51329f46-1ea6-4e0c-bb48-88d26f72e5ca",
              "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ac5f94a-db89-41c7-8b08-c738be9be6f2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d25ec83a-0315-4b1e-a6c7-c9ae608fa29f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
              "name": "Validate list of confirmed Patient not displaying with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "100"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b58254d9-9fe5-475b-a11b-8e240838c21f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5fb8d19d-9b5f-4b63-81ac-7f7180926f06"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "7c4b623e-f68c-4d4a-85ce-9f1201a9b695",
              "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6b8ce8b-19cb-4b35-91ad-4bd0868bbfef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1bc4d824-1e58-4d5d-a748-d2d18727b776"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e20fc2c1-f769-4e30-838b-d23b5550d397",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fa16e0ce-45ed-4dc2-939f-8b16774b0355"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "39738b48-261d-4c3d-89d5-9b25f1d61115",
          "length": 92,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "952b8842-00a4-4ce9-8a16-11a8fd02d35b",
          "scriptId": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
          "execution": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Cannot find patients'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Cannot find patients'\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "df0d3e8fa18a999caf470eb3d4253473",
          "id": "afcc8768-d34f-4969-b75c-21fceb033eb3",
          "timestamp": 1722418987047,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
          "name": "Validate list of confirmed Patient not displaying with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-all-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "100"
                },
                {
                  "key": "limit",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                  "});"
                ],
                "_lastExecutionId": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b58254d9-9fe5-475b-a11b-8e240838c21f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "5fb8d19d-9b5f-4b63-81ac-7f7180926f06"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "id": "836b7bbd-09df-430d-ab36-83d3fdad6cc5",
          "name": "Lists information of all patients' data whose state is confirmed",
          "item": [
            {
              "id": "d9698f95-9fe6-4706-aec8-8a43bc1798d5",
              "name": "Validate list of confirmed Patient",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json, text/plain, */*"
                  },
                  {
                    "key": "Accept-Language",
                    "value": "en-GB,en-US;q=0.9,en;q=0.8"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1NGQ4ZDQ0OC1lMGUxLTcwNTItMzVhYi1kMzM2ODc4NTc2MTIiLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI1MTk1ZjQwMy01YmY1LTQ1ZTktYmZiNi1lNWNhZTAxNmU4ZjYiLCJldmVudF9pZCI6ImM3ODQwZjBjLTA5OWEtNGFjNC05ODQ4LWU0NTVlNjQ4ZGZhZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTk0NzIxNDMsImV4cCI6MTcxOTQ3NTc0MywiaWF0IjoxNzE5NDcyMTQzLCJqdGkiOiJkNmIzOGJjZS1mNGRiLTQxNzItOWM1Yi02ZjliMzQxZTRiNTUiLCJ1c2VybmFtZSI6IjU0ZDhkNDQ4LWUwZTEtNzA1Mi0zNWFiLWQzMzY4Nzg1NzYxMiJ9.tMjoxDwie0kIXFenk6AsY8OD6CSoPU1XVbdAJWxfCZn2QfwWWXJa3iTyDD64cN_rzA0o4qVt4LEXv-J4LC2omEeI2llx5DUa9sjGVxdBTX4th11vC-as5EMLMc1ZDOrLV5zVdunocxVr-F9HPEzyNPeUvFF6RafIxOp0p_NeHGF35O878GHsOvz-Zkf7m4UZHmKYwOys0TbwBS5U3k0UIgYMxVfRTiayLUCxsbGKDLOabEVdP5rrhvhkbbiXvM9LAzneWRlTxL7ZPrkU32u3EyedXMumXCC3T7RVz-faimDoLHlJE87hRyMPdCLSLZC9q8goN3pk779fxD9BoFHFtg"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "key": "Origin",
                    "value": "http://localhost:3000"
                  },
                  {
                    "key": "Referer",
                    "value": "http://localhost:3000/"
                  },
                  {
                    "key": "User-Agent",
                    "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4a66c5eb-49d8-494d-a254-3e1d0f741828",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient information fetched successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "2d31a246-d357-4962-ac0f-6f6246fcb53b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9b57939f-ea01-4235-8699-c5fe404ab4a1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "affd158a-7c6e-409b-8f1c-ae738704b382"
                  }
                }
              ]
            },
            {
              "id": "bc138774-85a3-4f2f-b73d-e7ca0cd2797c",
              "name": "Validate list of confirmed Patient not displaying without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95c18107-3611-4bea-bf3d-9d83143aeab9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "308c6643-1ae2-4d7c-abd8-88892263993d"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b722bae6-6550-4ba8-8af2-ebc57a481087",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2acf8e9c-7a18-4d80-ac2e-bf7f1f378933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "51329f46-1ea6-4e0c-bb48-88d26f72e5ca",
              "name": "Validate list of confirmed Patient not displaying to the user as token is invalid/expired.",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6ac5f94a-db89-41c7-8b08-c738be9be6f2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d25ec83a-0315-4b1e-a6c7-c9ae608fa29f"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "91e872e0-0cab-4693-a704-7e8ea84a313c",
              "name": "Validate list of confirmed Patient not displaying with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "100"
                    },
                    {
                      "key": "limit",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Cannot find patients\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b58254d9-9fe5-475b-a11b-8e240838c21f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "5fb8d19d-9b5f-4b63-81ac-7f7180926f06"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "7c4b623e-f68c-4d4a-85ce-9f1201a9b695",
              "name": "Validate list of confirmed Patient not displaying to the user as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-all-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "0"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6b8ce8b-19cb-4b35-91ad-4bd0868bbfef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1bc4d824-1e58-4d5d-a748-d2d18727b776"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e20fc2c1-f769-4e30-838b-d23b5550d397",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "fa16e0ce-45ed-4dc2-939f-8b16774b0355"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "39738b48-261d-4c3d-89d5-9b25f1d61115",
          "length": 92,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "952b8842-00a4-4ce9-8a16-11a8fd02d35b",
          "scriptId": "40e4d8bf-7747-4333-9619-b8bdcd4d95f7",
          "execution": "476a24b5-1358-4911-80d9-02d7a1bdaba7"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "53801d183c4301200965b7a01cd80fb1",
          "id": "cfcadd4a-4da9-455b-b4b6-2baa8274a259",
          "timestamp": 1722418988067,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
          "name": "Validate user is able to upload variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);"
                ],
                "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3bc36334-894d-494f-8646-db6e9c2334d4",
          "length": 92,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a7e31361-4e0d-4052-8306-5a8bb80078a6",
          "scriptId": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
          "execution": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Variant file(s) uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Variant file(s) uploaded'\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "426037118474dc04f020057db1d01764",
          "id": "23b5fa0b-e195-44c2-ae56-dd216f9831bc",
          "timestamp": 1722418988069,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
          "name": "Validate user is able to upload variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);"
                ],
                "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3bc36334-894d-494f-8646-db6e9c2334d4",
          "length": 92,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a7e31361-4e0d-4052-8306-5a8bb80078a6",
          "scriptId": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
          "execution": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'id')",
          "checksum": "7968b7e0e6adfbc32cfd96627c083201",
          "id": "be0e7faf-d333-4d34-a5b7-a42dda6f5f9b",
          "timestamp": 1722418988079,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
          "name": "Validate user is able to upload variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  "\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);"
                ],
                "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3bc36334-894d-494f-8646-db6e9c2334d4",
          "length": 92,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "a7e31361-4e0d-4052-8306-5a8bb80078a6",
          "scriptId": "ed8e0739-b153-4e8c-997a-5f371cdadd8e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "fa16b32b478834c79271b7da4adb6fc0",
          "id": "c731af08-6303-4ec2-80b3-cc0956b237dd",
          "timestamp": 1722418988718,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "35425e08-fa5d-4983-9329-815773ea6507",
          "name": "Validate user is able to upload multiple variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                    "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a7e1e1b6-88ce-4ef3-8314-b54d955946c7",
          "length": 92,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "da872150-f046-480e-a8ac-c3a33ca48c14",
          "scriptId": "6d992c6d-fbec-4593-af4e-29a415f13677",
          "execution": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Variant file(s) uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Variant file(s) uploaded'\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "54a26343de30a93827990a84c7ff2fa2",
          "id": "aa347a1e-7c5a-4e12-8890-a119e02178dc",
          "timestamp": 1722418988721,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "35425e08-fa5d-4983-9329-815773ea6507",
          "name": "Validate user is able to upload multiple variants file successfully",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                    "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a7e1e1b6-88ce-4ef3-8314-b54d955946c7",
          "length": 92,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "da872150-f046-480e-a8ac-c3a33ca48c14",
          "scriptId": "6d992c6d-fbec-4593-af4e-29a415f13677",
          "execution": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 422",
          "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "4b27cfd1941fbfdaf9c86f5a28ca9e4d",
          "id": "9cc39852-aad3-4ba3-a067-6dc44a87d33d",
          "timestamp": 1722418989390,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
          "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                "type": "text/javascript",
                "exec": [],
                "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a0430bf6-80b1-4d12-bb16-3da72621a102",
          "length": 92,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "51f94fe4-39e8-4784-9acf-99dcb05344da",
          "scriptId": "b8aa148b-bc91-449d-9982-2747180c3e97",
          "execution": "370935de-03d0-4f8f-8648-e12f4a5baaee"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Only VCF and TSV files are allowed'",
          "stack": "AssertionError: expected undefined to deeply equal 'Only VCF and TSV files are allowed'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "6aeb914ab58fa9b732d17c05de191924",
          "id": "2a6ff601-e340-4fec-b1d8-c0921fa84126",
          "timestamp": 1722418989392,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
          "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                  "});"
                ],
                "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                "type": "text/javascript",
                "exec": [],
                "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a0430bf6-80b1-4d12-bb16-3da72621a102",
          "length": 92,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "51f94fe4-39e8-4784-9acf-99dcb05344da",
          "scriptId": "b8aa148b-bc91-449d-9982-2747180c3e97",
          "execution": "370935de-03d0-4f8f-8648-e12f4a5baaee"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "50d4835c9caf06b438d08f51ec45a94a",
          "id": "0870e775-3c97-404c-8ad3-0d6764ab3927",
          "timestamp": 1722418990032,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5ad92959-a548-4694-94bd-8308dfed5732",
          "name": "Validate user is able  to upload variants file without id",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);\r",
                  ""
                ],
                "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a3ef8477-58bf-4f17-8c59-16abf8ab7262",
          "length": 92,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84c5e749-2779-4056-bce2-9f6f94f624e7",
          "scriptId": "0973755e-cabc-48ef-b824-ba2510ac6afa",
          "execution": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Variant file(s) uploaded'",
          "stack": "AssertionError: expected undefined to deeply equal 'Variant file(s) uploaded'\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "957e81addada517aaf8b0feec400db8b",
          "id": "af16f66c-e6c0-431a-aedb-5d3a3efb094c",
          "timestamp": 1722418990034,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5ad92959-a548-4694-94bd-8308dfed5732",
          "name": "Validate user is able  to upload variants file without id",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);\r",
                  ""
                ],
                "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a3ef8477-58bf-4f17-8c59-16abf8ab7262",
          "length": 92,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84c5e749-2779-4056-bce2-9f6f94f624e7",
          "scriptId": "0973755e-cabc-48ef-b824-ba2510ac6afa",
          "execution": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'id')",
          "checksum": "7968b7e0e6adfbc32cfd96627c083201",
          "id": "c9404584-91fa-40ad-9393-266f8e8bcfcb",
          "timestamp": 1722418990038,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "5ad92959-a548-4694-94bd-8308dfed5732",
          "name": "Validate user is able  to upload variants file without id",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                  "});\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "let p_info_task_id = response.data.id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                  "\r",
                  "let url = response.data.data[0].url;\r",
                  "\r",
                  "// Set the URL as an environment variable\r",
                  "pm.environment.set(\"file_url\", url);\r",
                  ""
                ],
                "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a3ef8477-58bf-4f17-8c59-16abf8ab7262",
          "length": 92,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "84c5e749-2779-4056-bce2-9f6f94f624e7",
          "scriptId": "0973755e-cabc-48ef-b824-ba2510ac6afa"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "adf99c41743dc2c18491e9fdcff8786f",
          "id": "b797ce81-7375-4270-b5af-5afc163d5a2c",
          "timestamp": 1722418995677,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
          "name": "Validate user is unable to upload without variants file",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                  "\r",
                  "setTimeout(function() {\r",
                  "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                  "}, delay);\r",
                  ""
                ],
                "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2819022e-12ed-460f-9760-ca9fb100cc56",
          "length": 92,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8de8d38a-fce2-4320-8cb9-28c3ac5d60e7",
          "scriptId": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
          "execution": "a72905ec-ce63-4683-bd98-b705649949fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Only VCF and TSV files are allowed'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Only VCF and TSV files are allowed'\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "ac88edb320525a9ecf87f2cf09515e75",
          "id": "06c4801f-e96a-42c2-bd0b-7a5d74480f6a",
          "timestamp": 1722418995679,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
          "name": "Validate user is unable to upload without variants file",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                  "\r",
                  "setTimeout(function() {\r",
                  "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                  "}, delay);\r",
                  ""
                ],
                "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2819022e-12ed-460f-9760-ca9fb100cc56",
          "length": 92,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8de8d38a-fce2-4320-8cb9-28c3ac5d60e7",
          "scriptId": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
          "execution": "a72905ec-ce63-4683-bd98-b705649949fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 401 but got 422",
          "stack": "AssertionError: expected response to have status code 401 but got 422\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "efe6cdb44fa79eab1fc0ed45abf1e7ca",
          "id": "3d26504d-e59c-401f-9a31-b7ee0ded3d31",
          "timestamp": 1722418996316,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
          "name": "Validate user is unable to upload variants file as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03ad6f55-d088-439b-800e-a9d3de401e1b",
          "length": 92,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7180bd28-28f2-44d1-bd11-39a1e203d240",
          "scriptId": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
          "execution": "435cc3d0-241d-498f-853d-de1859b69f7f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected undefined to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "c1d00c72df0e3ce27b8c1a5528457443",
          "id": "50822be3-90a1-4675-bb62-17d97de63fb5",
          "timestamp": 1722418996318,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
          "name": "Validate user is unable to upload variants file as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-variant-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
              }
            }
          ]
        },
        "parent": {
          "id": "6619f6ab-4af9-483a-bf9d-d3c7a1bacbd2",
          "name": "patient variant file upload",
          "item": [
            {
              "id": "cbd7310f-5b37-4db8-9de4-1d33b2a9abca",
              "name": "Validate user is able to upload variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ed8e0739-b153-4e8c-997a-5f371cdadd8e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);"
                    ],
                    "_lastExecutionId": "e3636c0d-fb6c-4620-94d2-40a9b90e031b"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f3bb4cdc-1c3c-4042-b662-a30272b8ebbb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "a7117742-2b47-4029-82e5-e0825211dcc2"
                  }
                }
              ]
            },
            {
              "id": "35425e08-fa5d-4983-9329-815773ea6507",
              "name": "Validate user is able to upload multiple variants file successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb",
                        "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6d992c6d-fbec-4593-af4e-29a415f13677",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cb24dfe4-e5df-488b-a618-5a06726a5d92"
                  }
                }
              ]
            },
            {
              "id": "85e57818-bc50-4e9d-8b1c-9c57fa23e7dc",
              "name": "Validate user is unable to upload variants file other than vcf and tsv file type",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef27e63-6957-42e0-abc3-24c3546ab1d2"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b8aa148b-bc91-449d-9982-2747180c3e97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "370935de-03d0-4f8f-8648-e12f4a5baaee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "57bdbaa8-d1f2-473d-8324-2c8b66e4e858",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "8782ffa1-2de5-4378-9b6d-fa934da88e29"
                  }
                }
              ]
            },
            {
              "id": "5ad92959-a548-4694-94bd-8308dfed5732",
              "name": "Validate user is able  to upload variants file without id",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef2969c-857b-41f0-b0af-1e75dea869eb"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0973755e-cabc-48ef-b824-ba2510ac6afa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) uploaded\");\r",
                      "});\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "let p_info_task_id = response.data.id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_info_task_id\", p_info_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_info_task_id set to:\", p_info_task_id);\r",
                      "\r",
                      "let url = response.data.data[0].url;\r",
                      "\r",
                      "// Set the URL as an environment variable\r",
                      "pm.environment.set(\"file_url\", url);\r",
                      ""
                    ],
                    "_lastExecutionId": "47b5d548-91f2-4d1d-8b6f-a34e1c3f0293"
                  }
                }
              ]
            },
            {
              "id": "52769dd0-02e7-472b-8f3a-4897c120ef5d",
              "name": "Validate user is unable to upload without variants file",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0ad3b4d-d7ec-4b52-abf3-77c86fee4856",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Only VCF and TSV files are allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a72905ec-ce63-4683-bd98-b705649949fc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "108a3298-e947-4ef0-bee3-78777b90b38b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                      "\r",
                      "setTimeout(function() {\r",
                      "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                      "}, delay);\r",
                      ""
                    ],
                    "_lastExecutionId": "b9fa77b2-1102-4d67-b1d5-b327e606889d"
                  }
                }
              ]
            },
            {
              "id": "b0c0bfc1-68ca-4b72-bce1-8f9c78fd3c8b",
              "name": "Validate user is unable to upload variants file as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "435cc3d0-241d-498f-853d-de1859b69f7f"
                  }
                }
              ]
            },
            {
              "id": "525c0bcb-01b6-4acd-9e12-72a3550e234f",
              "name": "Validate user is unable to upload variants file if incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-variant-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29694-e0e4-4e40-a6d8-f35ae6de9039"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "79ba47f9-2535-4ac2-95a6-b57e0867947d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "0a0ab4ea-7148-4355-b336-7dcbb909d933"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03ad6f55-d088-439b-800e-a9d3de401e1b",
          "length": 92,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7180bd28-28f2-44d1-bd11-39a1e203d240",
          "scriptId": "eedd7ac4-3482-4d42-8fdc-93bcedc1152a",
          "execution": "435cc3d0-241d-498f-853d-de1859b69f7f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "0e74753186ce230a564d2adef1ffc797",
          "id": "fd2e604a-92b0-432f-b127-49df4ee9af93",
          "timestamp": 1722418997594,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9689578b-8678-47b6-bce2-881acd82b533",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
              }
            }
          ]
        },
        "parent": {
          "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "9689578b-8678-47b6-bce2-881acd82b533",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                  }
                }
              ]
            },
            {
              "id": "3968770d-8255-4598-9c4f-b5e330281550",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                  }
                }
              ]
            },
            {
              "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                  }
                }
              ]
            },
            {
              "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                  }
                }
              ]
            },
            {
              "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                  }
                }
              ]
            },
            {
              "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db690f2b-562a-45ff-8b02-9da9d7f75e47",
          "length": 92,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "31a22c13-344f-4897-92e3-0d4277c6bb55",
          "scriptId": "e86ac231-1711-43c1-8182-7c4d649fa27b",
          "execution": "1d5eae21-f420-4343-a206-528d39db0759"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "9ee6ee8e30398efe516adbd9ca9bd9d3",
          "id": "c39bab83-592f-4028-a84a-7619a19e43bf",
          "timestamp": 1722418997595,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9689578b-8678-47b6-bce2-881acd82b533",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
              }
            }
          ]
        },
        "parent": {
          "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "9689578b-8678-47b6-bce2-881acd82b533",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                  }
                }
              ]
            },
            {
              "id": "3968770d-8255-4598-9c4f-b5e330281550",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                  }
                }
              ]
            },
            {
              "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                  }
                }
              ]
            },
            {
              "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                  }
                }
              ]
            },
            {
              "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                  }
                }
              ]
            },
            {
              "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db690f2b-562a-45ff-8b02-9da9d7f75e47",
          "length": 92,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "31a22c13-344f-4897-92e3-0d4277c6bb55",
          "scriptId": "e86ac231-1711-43c1-8182-7c4d649fa27b",
          "execution": "1d5eae21-f420-4343-a206-528d39db0759"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Variant file(s) validated successfully'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Variant file(s) validated successfully'\n   at Object.eval sandbox-script.js:3:13)",
          "checksum": "2357b48e832d23e382dbba567d47f59b",
          "id": "4dd04cd5-9e86-4264-842f-dc9e014e477f",
          "timestamp": 1722418997596,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "9689578b-8678-47b6-bce2-881acd82b533",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
              }
            }
          ]
        },
        "parent": {
          "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "9689578b-8678-47b6-bce2-881acd82b533",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                  }
                }
              ]
            },
            {
              "id": "3968770d-8255-4598-9c4f-b5e330281550",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                  }
                }
              ]
            },
            {
              "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                  }
                }
              ]
            },
            {
              "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                  }
                }
              ]
            },
            {
              "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                  }
                }
              ]
            },
            {
              "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db690f2b-562a-45ff-8b02-9da9d7f75e47",
          "length": 92,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "31a22c13-344f-4897-92e3-0d4277c6bb55",
          "scriptId": "e86ac231-1711-43c1-8182-7c4d649fa27b",
          "execution": "1d5eae21-f420-4343-a206-528d39db0759"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'task_id')",
          "checksum": "c005a47473712b0486577d5895ef920c",
          "id": "134afa3d-efd1-4d03-9a5a-b4748a66bc75",
          "timestamp": 1722418997601,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "9689578b-8678-47b6-bce2-881acd82b533",
          "name": "Validate the user is able to validate variants successfully",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                  "});\r",
                  "\r",
                  "\r",
                  "let p_variant_task_id = response.data.task_id;\r",
                  "// Set the ID as an environment variable\r",
                  "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                  "\r",
                  "// Log the environment variable to the Postman console for verification\r",
                  "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                ],
                "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
              }
            }
          ]
        },
        "parent": {
          "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "9689578b-8678-47b6-bce2-881acd82b533",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                  }
                }
              ]
            },
            {
              "id": "3968770d-8255-4598-9c4f-b5e330281550",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                  }
                }
              ]
            },
            {
              "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                  }
                }
              ]
            },
            {
              "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                  }
                }
              ]
            },
            {
              "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                  }
                }
              ]
            },
            {
              "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "db690f2b-562a-45ff-8b02-9da9d7f75e47",
          "length": 92,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "31a22c13-344f-4897-92e3-0d4277c6bb55",
          "scriptId": "e86ac231-1711-43c1-8182-7c4d649fa27b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "bf80e5f28c787f2a8208d4d44298f7e5",
          "id": "559c2c70-beb7-42e2-b5e3-72e96cc5cdb9",
          "timestamp": 1722418998219,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3968770d-8255-4598-9c4f-b5e330281550",
          "name": "Validate the user is unable to validate variants with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
              }
            }
          ]
        },
        "parent": {
          "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "9689578b-8678-47b6-bce2-881acd82b533",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                  }
                }
              ]
            },
            {
              "id": "3968770d-8255-4598-9c4f-b5e330281550",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                  }
                }
              ]
            },
            {
              "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                  }
                }
              ]
            },
            {
              "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                  }
                }
              ]
            },
            {
              "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                  }
                }
              ]
            },
            {
              "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b5ff64be-28ab-4d54-8442-46f328cf68b5",
          "length": 92,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "72e762f5-378a-47dd-a05b-73ce2ae5999b",
          "scriptId": "23e8cde8-b399-492e-a6bf-9bfc10131552",
          "execution": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "e2aa3a9cb29db01a1508f5f177bf94bc",
          "id": "2c5d18d3-6655-4295-aed2-4b7f8f5a9e7c",
          "timestamp": 1722418998220,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3968770d-8255-4598-9c4f-b5e330281550",
          "name": "Validate the user is unable to validate variants with incorrect query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
              }
            }
          ]
        },
        "parent": {
          "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "9689578b-8678-47b6-bce2-881acd82b533",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                  }
                }
              ]
            },
            {
              "id": "3968770d-8255-4598-9c4f-b5e330281550",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                  }
                }
              ]
            },
            {
              "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                  }
                }
              ]
            },
            {
              "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                  }
                }
              ]
            },
            {
              "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                  }
                }
              ]
            },
            {
              "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b5ff64be-28ab-4d54-8442-46f328cf68b5",
          "length": 92,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "72e762f5-378a-47dd-a05b-73ce2ae5999b",
          "scriptId": "23e8cde8-b399-492e-a6bf-9bfc10131552",
          "execution": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "1ece5052698df3260d26014e6ca8efbb",
          "id": "8ab85200-dc95-42d5-a05d-77eaf0b136c9",
          "timestamp": 1722418998873,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
          "name": "Validate the user is unable to validate variants without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
              }
            }
          ]
        },
        "parent": {
          "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "9689578b-8678-47b6-bce2-881acd82b533",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                  }
                }
              ]
            },
            {
              "id": "3968770d-8255-4598-9c4f-b5e330281550",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                  }
                }
              ]
            },
            {
              "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                  }
                }
              ]
            },
            {
              "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                  }
                }
              ]
            },
            {
              "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                  }
                }
              ]
            },
            {
              "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2fcb7814-35e2-44f9-a07a-a295bb49800a",
          "length": 92,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fe6500cb-9fc2-464a-b92b-43af9fca0a5a",
          "scriptId": "71785b97-8e2d-4c08-a0bf-406d8f417327",
          "execution": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "6dc992e377a831f4620887b05085b5ba",
          "id": "18d41042-c29f-4073-84c1-c1b17ad3aad4",
          "timestamp": 1722418998876,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
          "name": "Validate the user is unable to validate variants without query data",
          "request": {
            "url": {
              "path": [
                "start-validation-variants",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
              }
            }
          ]
        },
        "parent": {
          "id": "23dc3869-0ac5-4fd2-974e-d62a5e5c64da",
          "name": "Start Validation Variants",
          "item": [
            {
              "id": "9689578b-8678-47b6-bce2-881acd82b533",
              "name": "Validate the user is able to validate variants successfully",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e86ac231-1711-43c1-8182-7c4d649fa27b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) validated successfully\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "let p_variant_task_id = response.data.task_id;\r",
                      "// Set the ID as an environment variable\r",
                      "pm.environment.set(\"p_variant_task_id\", p_variant_task_id);\r",
                      "\r",
                      "// Log the environment variable to the Postman console for verification\r",
                      "console.log(\"p_variant_task_id set to:\", p_variant_task_id);"
                    ],
                    "_lastExecutionId": "1d5eae21-f420-4343-a206-528d39db0759"
                  }
                }
              ]
            },
            {
              "id": "3968770d-8255-4598-9c4f-b5e330281550",
              "name": "Validate the user is unable to validate variants with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23e8cde8-b399-492e-a6bf-9bfc10131552",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "69ba8fc5-f9ae-4903-96cd-ac1614a435a2"
                  }
                }
              ]
            },
            {
              "id": "fdaa857e-58a5-4795-9d37-a2b30d9341e2",
              "name": "Validate the user is unable to validate variants without query data",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71785b97-8e2d-4c08-a0bf-406d8f417327",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
                  }
                }
              ]
            },
            {
              "id": "9bddda8f-e399-4d1e-aa0e-28c89e0fbf11",
              "name": "Validate the user is unable to validate variants without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "53523160-51d4-48c0-9e42-ea64eaa79e66",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "72e32f98-6f19-425b-b40d-a2c319b70c9e"
                  }
                }
              ]
            },
            {
              "id": "bb200abc-be2e-4adf-ae91-0b1fc8587a31",
              "name": "Validate the user is unable to validate variants as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "400bf408-328a-4d0f-a7df-062f28bd1594",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "b7bf6f80-71ff-4837-8b16-708f4c02f5e5"
                  }
                }
              ]
            },
            {
              "id": "c1da3f22-f902-4933-b90e-bbae06d86b9c",
              "name": "Validate the user is unable to validate variants as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-validation-variants",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd885e39-7b15-4827-af15-ddc01009fc94",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ab8da8d3-2d53-43d1-a44d-5f2d6d69301b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "2fcb7814-35e2-44f9-a07a-a295bb49800a",
          "length": 92,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fe6500cb-9fc2-464a-b92b-43af9fca0a5a",
          "scriptId": "71785b97-8e2d-4c08-a0bf-406d8f417327",
          "execution": "95605b14-4341-43a6-8f5c-5a04ac32a6b3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "b2a64114afd0cb6a1a0eade1163ed051",
          "id": "6f5bbebb-52cb-4bde-b1fc-c324f9ca52fb",
          "timestamp": 1722419001385,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
          "name": "Validate user is able to upload medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "446b6676-2b65-42e1-acf0-a3435f9354de",
          "length": 92,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b864a673-e423-42eb-9269-5a5f14b738ef",
          "scriptId": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
          "execution": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
          "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "3c2ad6264ec9b32813044c0e11064cec",
          "id": "3d0c3726-81f8-4b60-b9e9-8b8736aa55dd",
          "timestamp": 1722419001387,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
          "name": "Validate user is able to upload medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "446b6676-2b65-42e1-acf0-a3435f9354de",
          "length": 92,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b864a673-e423-42eb-9269-5a5f14b738ef",
          "scriptId": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
          "execution": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "6c8099a90382faabd3623095e9c0681d",
          "id": "71726c45-8864-4f27-b258-0c04acb6c3e1",
          "timestamp": 1722419002035,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
          "name": "Validate user is able to upload medical files successfully without id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3ab24219-eaaf-4af3-b2d3-5ee64d4b14d8",
          "length": 92,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "89bf2852-e3b1-4386-b0fb-120c2f0c4304",
          "scriptId": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
          "execution": "c3562214-850b-4ad0-9a4a-5426161b3293"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
          "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "6c72f7ba6a8fb62fc7f149a46fcc193e",
          "id": "e01831dd-f4e4-4c20-9d32-8c3e60e67ef3",
          "timestamp": 1722419002037,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
          "name": "Validate user is able to upload medical files successfully without id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3ab24219-eaaf-4af3-b2d3-5ee64d4b14d8",
          "length": 92,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "89bf2852-e3b1-4386-b0fb-120c2f0c4304",
          "scriptId": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
          "execution": "c3562214-850b-4ad0-9a4a-5426161b3293"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 422",
          "stack": "AssertionError: expected response to have status code 200 but got 422\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "5f65793c28b0dc0f2b8c4b9852ab6ffa",
          "id": "674cf868-1bf3-4988-b126-a20a3750a721",
          "timestamp": 1722419002664,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
          "name": "Validate user is able to upload multiple medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                    "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let p_other_task_id = responseData.task_id;\r",
                  "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                ],
                "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03a5af9a-6907-4ec8-9dea-318505a6e3fd",
          "length": 92,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2f9d5e05-ac63-4ae3-aef9-d937cfc07d08",
          "scriptId": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
          "execution": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Other medical file(s) uploaded succes…'",
          "stack": "AssertionError: expected undefined to deeply equal 'Other medical file(s) uploaded succes…'\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "44987f21605e2f0174209337306c2616",
          "id": "3bbc8a45-7cce-4069-810a-075c32f4fe90",
          "timestamp": 1722419002666,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
          "name": "Validate user is able to upload multiple medical files successfully",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": [
                    "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                    "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                  ]
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                  "});\r",
                  "let responseData = pm.response.json();\r",
                  "let p_other_task_id = responseData.task_id;\r",
                  "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                ],
                "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "03a5af9a-6907-4ec8-9dea-318505a6e3fd",
          "length": 92,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2f9d5e05-ac63-4ae3-aef9-d937cfc07d08",
          "scriptId": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
          "execution": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 422",
          "stack": "AssertionError: expected response to have status code 400 but got 422\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "a0f28b0f1c6665680284c26b68884141",
          "id": "f428f4bb-5892-4008-a5d0-90d58078a24a",
          "timestamp": 1722419003300,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "02e2143b-4576-4d81-9638-59d099134868",
          "name": "Validate user is unable to upload medical fileswith incorrect id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "61660a8c-d3a5-4a28-92dc-6c099a8d5188",
          "length": 92,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8d6e38fb-ed0b-45fd-9b95-02712e6dfb8b",
          "scriptId": "d96588a2-3822-4759-916e-bea4f91eddf0",
          "execution": "753bb91c-9abb-47e0-b1cf-6361168c704c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected undefined to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "749df53a068a808905571e6f35596719",
          "id": "8496c8a0-f76d-45f1-b895-d7246e333a7d",
          "timestamp": 1722419003302,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "02e2143b-4576-4d81-9638-59d099134868",
          "name": "Validate user is unable to upload medical fileswith incorrect id",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "61660a8c-d3a5-4a28-92dc-6c099a8d5188",
          "length": 92,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8d6e38fb-ed0b-45fd-9b95-02712e6dfb8b",
          "scriptId": "d96588a2-3822-4759-916e-bea4f91eddf0",
          "execution": "753bb91c-9abb-47e0-b1cf-6361168c704c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 401 but got 422",
          "stack": "AssertionError: expected response to have status code 401 but got 422\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "a0091e47b1c6a25805ef83fec2ccfba2",
          "id": "8ae812c4-5c4e-4403-afb8-fefa970d069f",
          "timestamp": 1722419003935,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
          "name": "Validate user is unable to upload medical files as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ec2ac642-c009-4819-a8ab-67f2e2231af2",
          "length": 92,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e1233111-70df-4eef-90b3-4d56213ac79a",
          "scriptId": "2e50d592-a382-4bba-a2cb-81e191e2230d",
          "execution": "662986b9-8a19-4e7e-b15e-296831df764f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected undefined to deeply equal 'Token is invalid or expired'",
          "stack": "AssertionError: expected undefined to deeply equal 'Token is invalid or expired'\n   at Object.eval sandbox-script.js:2:23)",
          "checksum": "33c7bb761421c3dcf6a834f816de5b10",
          "id": "d7db2724-63eb-434f-ba54-41295b7e8d08",
          "timestamp": 1722419003936,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
          "name": "Validate user is unable to upload medical files as user is unauthorized",
          "request": {
            "url": {
              "path": [
                "patient-medical-file-upload",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(401);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                  "});"
                ],
                "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
              }
            }
          ]
        },
        "parent": {
          "id": "62d49c0a-b547-4213-85d1-8ad89a81a38b",
          "name": "patient medical file upload",
          "item": [
            {
              "id": "2cf32fff-51c8-4635-a7b0-0d50b2bf28ab",
              "name": "Validate user is able to upload medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50fe8a98-0fd4-4055-96dd-a797ef3f32d7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "795d0150-9d07-4a6a-800b-bc3b51ccdc8a"
                  }
                }
              ]
            },
            {
              "id": "a6a9a358-0b18-421e-9265-64ee28bba0b8",
              "name": "Validate user is able to upload medical files successfully without id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3cc7030c-5a8f-4df6-a397-4b9a5e7c9feb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c3562214-850b-4ad0-9a4a-5426161b3293"
                  }
                }
              ]
            },
            {
              "id": "cce17850-d88b-4bfd-a7a4-a30e3eef023f",
              "name": "Validate user is able to upload multiple medical files successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": [
                        "postman-cloud:///1ef2d10f-13bc-4ed0-a541-0eb267abd65b",
                        "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                      ]
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac94e43b-d0fd-44e8-90bd-4b3dd26d9d72",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Other medical file(s) uploaded successfully\");\r",
                      "});\r",
                      "let responseData = pm.response.json();\r",
                      "let p_other_task_id = responseData.task_id;\r",
                      "pm.environment.set(\"p_other_task_id\", p_other_task_id);"
                    ],
                    "_lastExecutionId": "a49fc167-73d2-409f-9f4f-762d6b3bf14d"
                  }
                }
              ]
            },
            {
              "id": "02e2143b-4576-4d81-9638-59d099134868",
              "name": "Validate user is unable to upload medical fileswith incorrect id",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d96588a2-3822-4759-916e-bea4f91eddf0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "753bb91c-9abb-47e0-b1cf-6361168c704c"
                  }
                }
              ]
            },
            {
              "id": "3964eeaa-c4a5-41b1-82a6-f8ca5d8b7237",
              "name": "Validate user is unable to upload medical files as user is unauthorized",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "files",
                      "type": "file",
                      "src": "postman-cloud:///1ef29849-dbf3-4330-8528-6fe16f429096"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiJiYzExNmVjZS0wYjVlLTRkNGMtOGFjZC03YmM3MjJmZWQxZTciLCJldmVudF9pZCI6IjQyYzA5MzljLWNhOWUtNDAxMS05YjA1LWY4N2I5ZTBhMjk0NSIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgzNDk1MzYsImV4cCI6MTcxODM1MzEzNiwiaWF0IjoxNzE4MzQ5NTM2LCJqdGkiOiIzMzhmN2NmMS1mMWM4LTQ3N2YtODMwNy1kNjU1Mjg3Y2Q4OTEiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.Dbunj-9QMgK2LkYk-xnhHFhbunWENiNOa5lEKK8VNyjBo-QfOTtKSDU8dy3LhnMR0hGJKm_X_NCmIIaYBd4yPIIm7QLtgEvSkuy2SIBcRnp4ibJ76ijf96yjk0-2FYuje36ZlJieAUiwq7AxIO1smYnIJbdx1xVisWOJ2P9yf2cuR9_rcd2wr5FIxl1N47jB6Gpp4cnnAG8Sd1tnwiEur4lJGBuj-6zMD5xzIn-Rxs5m_7qNbK5FBQhSPsLuSqS9NzkbcX-1CGlpLihQWeMdFNAVYKaVYc1gE3_qahDq-9b1oA03HM-Xcvvcg8WbcvX6yXg8dVeduBWNkugFuBy0hA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e50d592-a382-4bba-a2cb-81e191e2230d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "662986b9-8a19-4e7e-b15e-296831df764f"
                  }
                }
              ]
            },
            {
              "id": "a9bfd563-7eb5-44a9-9a5b-0e813aac76ca",
              "name": "Validate user is unable to upload medical files as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "formdata",
                  "formdata": []
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2083439-e6fc-4eff-804d-ef047b1b49bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6b592d66-72d3-40ec-af7f-7c7396f7a3da"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ec2ac642-c009-4819-a8ab-67f2e2231af2",
          "length": 92,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e1233111-70df-4eef-90b3-4d56213ac79a",
          "scriptId": "2e50d592-a382-4bba-a2cb-81e191e2230d",
          "execution": "662986b9-8a19-4e7e-b15e-296831df764f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "1a9436db3717eaf0cfb5f483f746ab26",
          "id": "ab661862-9870-4833-97fe-3b0ea4566cce",
          "timestamp": 1722419005226,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
          "name": "Validate user is able to check status of task successfully for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f8f73908-6280-4931-964d-8fd6a5be0516",
          "length": 92,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a8bcf300-1eb3-45f5-9af9-61c03b300cdb",
          "scriptId": "22fa43ed-ed40-406f-8ccc-54d44954f882",
          "execution": "5f1d5401-3e83-47df-ad65-66eac282789f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "c052cb3f2cebcbaba90610f87b2a6a1c",
          "id": "edbdc8b2-2872-42cd-9935-ab50acad99e2",
          "timestamp": 1722419005227,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
          "name": "Validate user is able to check status of task successfully for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f8f73908-6280-4931-964d-8fd6a5be0516",
          "length": 92,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a8bcf300-1eb3-45f5-9af9-61c03b300cdb",
          "scriptId": "22fa43ed-ed40-406f-8ccc-54d44954f882",
          "execution": "5f1d5401-3e83-47df-ad65-66eac282789f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Task details retrieved successfully'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Task details retrieved successfully'\n   at Object.eval sandbox-script.js:3:25)",
          "checksum": "4d29f9acbcbf6eead4e419e132b78383",
          "id": "ab470dc3-c99a-4fc0-8bd6-cd65a07f20b7",
          "timestamp": 1722419005228,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
          "name": "Validate user is able to check status of task successfully for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f8f73908-6280-4931-964d-8fd6a5be0516",
          "length": 92,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a8bcf300-1eb3-45f5-9af9-61c03b300cdb",
          "scriptId": "22fa43ed-ed40-406f-8ccc-54d44954f882",
          "execution": "5f1d5401-3e83-47df-ad65-66eac282789f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "147af84bcde0190b896dae4e65acd229",
          "id": "f1e5b8fb-218a-474b-ba02-0c1f95e653bb",
          "timestamp": 1722419005884,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
          "name": "Validate user is able to check status of task successfully for Patient Variant File",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8442c5f4-a3d3-4b6c-8a2f-163e5aa63eb6",
          "length": 92,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4cf03550-8f49-4ba3-afb9-7fe09a0fe9d2",
          "scriptId": "3c11e78f-ff03-4761-9e19-c9755887a930",
          "execution": "94313104-1a97-46e0-b333-3feaa190c4c5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:26)",
          "checksum": "b1f91a9c968e83b1b2c7b9e14f2f7a74",
          "id": "2a9357ae-4aa1-45ae-9ea1-a18f96733f3c",
          "timestamp": 1722419005885,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
          "name": "Validate user is able to check status of task successfully for Patient Variant File",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8442c5f4-a3d3-4b6c-8a2f-163e5aa63eb6",
          "length": 92,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4cf03550-8f49-4ba3-afb9-7fe09a0fe9d2",
          "scriptId": "3c11e78f-ff03-4761-9e19-c9755887a930",
          "execution": "94313104-1a97-46e0-b333-3feaa190c4c5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Task details retrieved successfully'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Task details retrieved successfully'\n   at Object.eval sandbox-script.js:3:26)",
          "checksum": "67d1b38cdc0146eb3f19d7b75e060c41",
          "id": "d3a48ee7-fa60-4187-99a1-d7ace9d40fbb",
          "timestamp": 1722419005887,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
          "name": "Validate user is able to check status of task successfully for Patient Variant File",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8442c5f4-a3d3-4b6c-8a2f-163e5aa63eb6",
          "length": 92,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4cf03550-8f49-4ba3-afb9-7fe09a0fe9d2",
          "scriptId": "3c11e78f-ff03-4761-9e19-c9755887a930",
          "execution": "94313104-1a97-46e0-b333-3feaa190c4c5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "d343f874d8f6fe3e317a839fc66722a5",
          "id": "8679b052-2ba7-4fa0-ad76-90db2bb92560",
          "timestamp": 1722419006550,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
          "name": "Validate user is unable to check status as task_id is incorrect.",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                  "});"
                ],
                "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "34a06903-effc-4954-81b1-cc12a39996c1",
          "length": 92,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8e5534c4-1a9f-4cfe-a2ca-93fe1f0653e2",
          "scriptId": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
          "execution": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Task details could not be retrieved'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Task details could not be retrieved'\n   at Object.eval sandbox-script.js:2:27)",
          "checksum": "c8b3a7ac0aa81ca91137c73fd9c55010",
          "id": "0f522820-e9fa-44c3-89f4-4e4b2766040b",
          "timestamp": 1722419006551,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
          "name": "Validate user is unable to check status as task_id is incorrect.",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                  "});"
                ],
                "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "34a06903-effc-4954-81b1-cc12a39996c1",
          "length": 92,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8e5534c4-1a9f-4cfe-a2ca-93fe1f0653e2",
          "scriptId": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
          "execution": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "4eb4b70a5ec4b4331a2466c2c609196a",
          "id": "1909cdea-af4e-46f1-9da7-e3ba3e5c6f62",
          "timestamp": 1722419007201,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1444f8a1-fbb7-4559-ae04-dd7978117477",
          "length": 92,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5aa8d36a-9181-4cdf-9247-c5e2774fdf96",
          "scriptId": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
          "execution": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:28)",
          "checksum": "1222b754ae97c38aa0e9fca15131fd56",
          "id": "733fc9c2-30c9-433c-96a1-dc6127fa373f",
          "timestamp": 1722419007202,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1444f8a1-fbb7-4559-ae04-dd7978117477",
          "length": 92,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5aa8d36a-9181-4cdf-9247-c5e2774fdf96",
          "scriptId": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
          "execution": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)",
          "checksum": "e48d39bd9f1c4c7260b0e7780125a4bf",
          "id": "3357127e-5585-4aae-8e3f-e439d709e51f",
          "timestamp": 1722419007866,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "257f8483-495b-4fdb-938a-2f727e77018d",
          "length": 92,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "07dd0ca1-8658-485d-974c-63230fd98b5b",
          "scriptId": "d77d6597-7094-493c-abd8-3a663a92d179",
          "execution": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:29)",
          "checksum": "ecfb8eaa816722b48aa6da04f7c40a1c",
          "id": "678cf1b2-92bf-41a3-b968-8a2e9cd3982b",
          "timestamp": 1722419007867,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
          "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
          "request": {
            "url": {
              "path": [
                "check-task-status",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
              }
            }
          ]
        },
        "parent": {
          "id": "fa369d5b-9ca9-447a-912d-65303f7c485c",
          "name": "check task status",
          "item": [
            {
              "id": "71da66e2-d67d-4e80-a187-d9fa9cbc5a2a",
              "name": "Validate user is able to check status of task successfully for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"3ee04750-6438-409f-9e7f-2f0798a799e5\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "22fa43ed-ed40-406f-8ccc-54d44954f882",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "5f1d5401-3e83-47df-ad65-66eac282789f"
                  }
                }
              ]
            },
            {
              "id": "f13c5365-3f67-4982-9ef3-fc76c6efc887",
              "name": "Validate user is able to check status of task successfully for Patient Variant File",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"{{p_variant_task_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c11e78f-ff03-4761-9e19-c9755887a930",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details retrieved successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94313104-1a97-46e0-b333-3feaa190c4c5"
                  }
                }
              ]
            },
            {
              "id": "69be6726-34be-46e5-95f1-34ce1aaa267d",
              "name": "Validate user is unable to check status as task_id is incorrect.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"129234\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d37b7d03-e2a3-4367-bec1-ddb89990cdc5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Task details could not be retrieved\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3be21257-77d0-48bf-ab20-ba8132ee8d3b"
                  }
                }
              ]
            },
            {
              "id": "05f84126-c8c4-4d42-b233-8dd89ae164da",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient info",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd03c6a3-b570-45f1-ae9e-39f46d885812",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "df82d4df-2587-4c4b-b8a3-f4bb83eb8d54"
                  }
                }
              ]
            },
            {
              "id": "1f49b161-5f2b-4333-8b98-f09dd2f5e7b7",
              "name": "Validate user is unable to check status as task_id is missing in the body for Patient variant file",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d77d6597-7094-493c-abd8-3a663a92d179",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
                  }
                }
              ]
            },
            {
              "id": "6aad331f-d95f-42a2-a91f-cd9f0136be4c",
              "name": "Validate user is unable to check status as the token is invalid.",
              "request": {
                "url": {
                  "path": [
                    "check-task-status",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOT",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0e52e706-2ba7-491a-9136-cc7f1747d4a5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9e568dab-38fd-4d36-a6d2-c86044357351"
                  }
                }
              ]
            },
            {
              "id": "65201b7e-1092-4c59-a39c-e5f352f14d74",
              "name": "Validate user is unable check status as incorrect CRUD operation is used.",
              "request": {
                "url": {
                  "path": [
                    "patient-medical-file-upload",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"task_id\": \"qwer-tyui-asdf-ghjk\"\r\n}"
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6039d765-e568-4a77-b230-51bca6fccb41",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f62dccbc-af3f-4976-8279-8de0067c661c"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "257f8483-495b-4fdb-938a-2f727e77018d",
          "length": 92,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "07dd0ca1-8658-485d-974c-63230fd98b5b",
          "scriptId": "d77d6597-7094-493c-abd8-3a663a92d179",
          "execution": "186b9aa0-4a9e-4dd8-b02d-58a104fba52a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is 200",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:32)",
          "checksum": "0f9e4e06cfdaa19d355c81c901ca2dba",
          "id": "732b7a78-ea59-4cd2-abbe-420fe2fea72f",
          "timestamp": 1722419009501,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
          "name": "Validate user is able to fetch patient's data successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status Code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
              }
            }
          ]
        },
        "parent": {
          "id": "9f2d4c8e-87db-4dec-b767-10d589123073",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
                  }
                }
              ]
            },
            {
              "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
                  }
                }
              ]
            },
            {
              "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
                  }
                }
              ]
            },
            {
              "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f73aa3f2-9790-48ca-9a2d-8b75450c9864",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d9e37313-b8b5-4227-83fc-579d789e7c44"
                  }
                }
              ]
            },
            {
              "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3e932ea-a8a5-431b-a765-ca42758169b5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8221d3fa-407a-472d-87d9-6d9be8bb49ae"
                  }
                }
              ]
            },
            {
              "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52c1f5ae-ab9e-4e68-9e85-092ee726b6bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "02d1a159-6dd8-4d1f-b904-08c7e733f6b9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "806899b7-9a6a-44d9-a2e2-9b6218be8003",
          "length": 92,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "91994255-9c14-4601-afca-6ce90f974d73",
          "scriptId": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
          "execution": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient details fetched successfully.'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient details fetched successfully.'\n   at Object.eval sandbox-script.js:2:32)",
          "checksum": "021f0e06cced3083d053b7e2fb53f4ec",
          "id": "bac13a85-eaf9-4fb7-b6ec-ebbe7bb2958d",
          "timestamp": 1722419009503,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
          "name": "Validate user is able to fetch patient's data successfully",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Status Code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
              }
            }
          ]
        },
        "parent": {
          "id": "9f2d4c8e-87db-4dec-b767-10d589123073",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
                  }
                }
              ]
            },
            {
              "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
                  }
                }
              ]
            },
            {
              "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
                  }
                }
              ]
            },
            {
              "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f73aa3f2-9790-48ca-9a2d-8b75450c9864",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d9e37313-b8b5-4227-83fc-579d789e7c44"
                  }
                }
              ]
            },
            {
              "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3e932ea-a8a5-431b-a765-ca42758169b5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8221d3fa-407a-472d-87d9-6d9be8bb49ae"
                  }
                }
              ]
            },
            {
              "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52c1f5ae-ab9e-4e68-9e85-092ee726b6bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "02d1a159-6dd8-4d1f-b904-08c7e733f6b9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "806899b7-9a6a-44d9-a2e2-9b6218be8003",
          "length": 92,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "91994255-9c14-4601-afca-6ce90f974d73",
          "scriptId": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
          "execution": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is 400",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)",
          "checksum": "926f0be56ebd56daf46e53949ecf5393",
          "id": "638308e0-b360-43db-a7d1-8b488a494aa1",
          "timestamp": 1722419009899,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
          "name": "Validate user is unable to fetch patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status Code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
              }
            }
          ]
        },
        "parent": {
          "id": "9f2d4c8e-87db-4dec-b767-10d589123073",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
                  }
                }
              ]
            },
            {
              "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
                  }
                }
              ]
            },
            {
              "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
                  }
                }
              ]
            },
            {
              "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f73aa3f2-9790-48ca-9a2d-8b75450c9864",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d9e37313-b8b5-4227-83fc-579d789e7c44"
                  }
                }
              ]
            },
            {
              "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3e932ea-a8a5-431b-a765-ca42758169b5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8221d3fa-407a-472d-87d9-6d9be8bb49ae"
                  }
                }
              ]
            },
            {
              "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52c1f5ae-ab9e-4e68-9e85-092ee726b6bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "02d1a159-6dd8-4d1f-b904-08c7e733f6b9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb95bed0-0904-4ad9-accf-6ab802dbb5c9",
          "length": 92,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "857a524c-274c-46c8-a5e6-8fbb954421d6",
          "scriptId": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
          "execution": "03cff040-019c-46d1-a3b1-b63be321e2eb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Invalid id'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Invalid id'\n   at Object.eval sandbox-script.js:2:33)",
          "checksum": "e00683f54db1f4b7eb46099ca01ae49a",
          "id": "4195ef44-64b4-4be3-9c75-7790639d69cb",
          "timestamp": 1722419009902,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
          "name": "Validate user is unable to fetch patient's data with incorrect query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "12345"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status Code is 400\", function () {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
              }
            }
          ]
        },
        "parent": {
          "id": "9f2d4c8e-87db-4dec-b767-10d589123073",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
                  }
                }
              ]
            },
            {
              "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
                  }
                }
              ]
            },
            {
              "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
                  }
                }
              ]
            },
            {
              "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f73aa3f2-9790-48ca-9a2d-8b75450c9864",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d9e37313-b8b5-4227-83fc-579d789e7c44"
                  }
                }
              ]
            },
            {
              "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3e932ea-a8a5-431b-a765-ca42758169b5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8221d3fa-407a-472d-87d9-6d9be8bb49ae"
                  }
                }
              ]
            },
            {
              "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52c1f5ae-ab9e-4e68-9e85-092ee726b6bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "02d1a159-6dd8-4d1f-b904-08c7e733f6b9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb95bed0-0904-4ad9-accf-6ab802dbb5c9",
          "length": 92,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "857a524c-274c-46c8-a5e6-8fbb954421d6",
          "scriptId": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
          "execution": "03cff040-019c-46d1-a3b1-b63be321e2eb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)",
          "checksum": "8f6626559fb8a3188d56f82a1b7076ac",
          "id": "326dbf3d-c66f-4931-8463-3bad9a6547ca",
          "timestamp": 1722419010285,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
          "name": "Validate user is unable to fetch patient's data without query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
              }
            }
          ]
        },
        "parent": {
          "id": "9f2d4c8e-87db-4dec-b767-10d589123073",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
                  }
                }
              ]
            },
            {
              "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
                  }
                }
              ]
            },
            {
              "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
                  }
                }
              ]
            },
            {
              "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f73aa3f2-9790-48ca-9a2d-8b75450c9864",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d9e37313-b8b5-4227-83fc-579d789e7c44"
                  }
                }
              ]
            },
            {
              "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3e932ea-a8a5-431b-a765-ca42758169b5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8221d3fa-407a-472d-87d9-6d9be8bb49ae"
                  }
                }
              ]
            },
            {
              "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52c1f5ae-ab9e-4e68-9e85-092ee726b6bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "02d1a159-6dd8-4d1f-b904-08c7e733f6b9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5262bb3c-5afe-4a06-bc70-5f1a4c079bd3",
          "length": 92,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ed092f50-8850-4780-9317-cd9386426d50",
          "scriptId": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
          "execution": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Invalid id'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Invalid id'\n   at Object.eval sandbox-script.js:2:34)",
          "checksum": "df19a9ac2374df05e167dad4f40168ba",
          "id": "b0e146bb-08b3-4e89-a863-5ff1d78acc88",
          "timestamp": 1722419010286,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
          "name": "Validate user is unable to fetch patient's data without query data",
          "request": {
            "url": {
              "path": [
                "get-patient-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                  "});"
                ],
                "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
              }
            }
          ]
        },
        "parent": {
          "id": "9f2d4c8e-87db-4dec-b767-10d589123073",
          "name": "Lists information of a Patient's data",
          "item": [
            {
              "id": "a92fea93-fc7e-4859-a846-3ff80d7bdbb7",
              "name": "Validate user is able to fetch patient's data successfully",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "05434c8b-d8bc-4f30-ba48-548b6ca3c2ad"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08cc78a7-dee7-4d46-a1c6-51e47e6fa1b7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status Code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "581a36c3-0462-4c69-8722-d9b9be15c7c0"
                  }
                }
              ]
            },
            {
              "id": "a692dfed-ca27-408e-8c6b-57f5d67e7847",
              "name": "Validate user is unable to fetch patient's data with incorrect query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "12345"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df0805f6-6b09-4253-b15b-e90c05cb4f61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status Code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "03cff040-019c-46d1-a3b1-b63be321e2eb"
                  }
                }
              ]
            },
            {
              "id": "01763967-c5a2-48be-8e1a-ce9b5d5442ee",
              "name": "Validate user is unable to fetch patient's data without query data",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Invalid id\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
                  }
                }
              ]
            },
            {
              "id": "fa66e64e-a93a-43f8-97e5-30eeec800a9e",
              "name": "Validate user is unable to fetch patient's data without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f73aa3f2-9790-48ca-9a2d-8b75450c9864",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d9e37313-b8b5-4227-83fc-579d789e7c44"
                  }
                }
              ]
            },
            {
              "id": "863975ee-74a4-4b30-8cc7-5c79944a5a6f",
              "name": "Validate user is unable to fetch patient's data with invalid/expired token",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b3e932ea-a8a5-431b-a765-ca42758169b5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8221d3fa-407a-472d-87d9-6d9be8bb49ae"
                  }
                }
              ]
            },
            {
              "id": "b5ee4199-667b-40cd-8009-a680ca0129a1",
              "name": "Validate user is unable to fetch patient's data as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52c1f5ae-ab9e-4e68-9e85-092ee726b6bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "02d1a159-6dd8-4d1f-b904-08c7e733f6b9"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5262bb3c-5afe-4a06-bc70-5f1a4c079bd3",
          "length": 92,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ed092f50-8850-4780-9317-cd9386426d50",
          "scriptId": "86a965ad-7a64-4196-977e-7fd71eac2c0e",
          "execution": "7bae463b-24b7-4c28-981e-49b7ed5f5f50"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:38)",
          "checksum": "a7bf3c3c0d1f1b85236731ead0682843",
          "id": "4db2dd00-75fd-4f55-96de-3c4522352a3f",
          "timestamp": 1722419012010,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
          "name": "Validate user is able to check patient id successfully",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let patientId = \"patient_\" + new Date().getTime();\r",
                  "\r",
                  "// Set the environment variable\r",
                  "pm.environment.set(\"patient_id\", patientId);\r",
                  "\r",
                  "console.log(\"Environment Patient ID set to:\", patientId);\r",
                  "\r",
                  "function getRandomString(length) {\r",
                  "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                  "    let result = '';\r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                  "    }\r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Generate a unique name using a random string\r",
                  "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                  "pm.environment.set(\"name\", name);"
                ],
                "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
              }
            }
          ]
        },
        "parent": {
          "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                  }
                }
              ]
            },
            {
              "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                  }
                }
              ]
            },
            {
              "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                  }
                }
              ]
            },
            {
              "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                  }
                }
              ]
            },
            {
              "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                  }
                }
              ]
            },
            {
              "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "62569094-ba5c-4a77-b538-b7a06c47ca39",
          "length": 92,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bb3ef1a6-bb9c-4793-87ac-f845a2fd088d",
          "scriptId": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
          "execution": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:38)",
          "checksum": "5973b5e85a97cfa16b0b612cb701e001",
          "id": "9dff7a8d-e242-4c33-8524-ef40b75ff296",
          "timestamp": 1722419012012,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
          "name": "Validate user is able to check patient id successfully",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let patientId = \"patient_\" + new Date().getTime();\r",
                  "\r",
                  "// Set the environment variable\r",
                  "pm.environment.set(\"patient_id\", patientId);\r",
                  "\r",
                  "console.log(\"Environment Patient ID set to:\", patientId);\r",
                  "\r",
                  "function getRandomString(length) {\r",
                  "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                  "    let result = '';\r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                  "    }\r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Generate a unique name using a random string\r",
                  "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                  "pm.environment.set(\"name\", name);"
                ],
                "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
              }
            }
          ]
        },
        "parent": {
          "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                  }
                }
              ]
            },
            {
              "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                  }
                }
              ]
            },
            {
              "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                  }
                }
              ]
            },
            {
              "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                  }
                }
              ]
            },
            {
              "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                  }
                }
              ]
            },
            {
              "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "62569094-ba5c-4a77-b538-b7a06c47ca39",
          "length": 92,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bb3ef1a6-bb9c-4793-87ac-f845a2fd088d",
          "scriptId": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
          "execution": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient id does not exist'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient id does not exist'\n   at Object.eval sandbox-script.js:3:38)",
          "checksum": "6d6e1be226b77e430b8388e8706ede57",
          "id": "6fb4050e-b4ae-481c-a08b-5053b9cf82c2",
          "timestamp": 1722419012013,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 38,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
          "name": "Validate user is able to check patient id successfully",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let patientId = \"patient_\" + new Date().getTime();\r",
                  "\r",
                  "// Set the environment variable\r",
                  "pm.environment.set(\"patient_id\", patientId);\r",
                  "\r",
                  "console.log(\"Environment Patient ID set to:\", patientId);\r",
                  "\r",
                  "function getRandomString(length) {\r",
                  "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                  "    let result = '';\r",
                  "    for (let i = 0; i < length; i++) {\r",
                  "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                  "    }\r",
                  "    return result;\r",
                  "}\r",
                  "\r",
                  "// Generate a unique name using a random string\r",
                  "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                  "pm.environment.set(\"name\", name);"
                ],
                "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
              }
            }
          ]
        },
        "parent": {
          "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                  }
                }
              ]
            },
            {
              "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                  }
                }
              ]
            },
            {
              "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                  }
                }
              ]
            },
            {
              "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                  }
                }
              ]
            },
            {
              "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                  }
                }
              ]
            },
            {
              "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "62569094-ba5c-4a77-b538-b7a06c47ca39",
          "length": 92,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "bb3ef1a6-bb9c-4793-87ac-f845a2fd088d",
          "scriptId": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
          "execution": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:39)",
          "checksum": "47949ef8d2e45496189d6c7fe2d5fd26",
          "id": "c8993d98-6c65-49a8-9d2f-126573205420",
          "timestamp": 1722419012656,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 39,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
          "name": "Validate user is able to update patient's information successfully",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
              }
            }
          ]
        },
        "parent": {
          "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                  }
                }
              ]
            },
            {
              "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                  }
                }
              ]
            },
            {
              "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                  }
                }
              ]
            },
            {
              "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                  }
                }
              ]
            },
            {
              "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                  }
                }
              ]
            },
            {
              "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceb08068-af97-4ef4-b105-ca2d3ed64e92",
          "length": 92,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "15ee3b1f-7d21-4a7e-aa47-1e67644784c8",
          "scriptId": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
          "execution": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:39)",
          "checksum": "632601ed66d7b0d7d478bc0ebed2c3d8",
          "id": "eb0ce581-5311-4aa7-aef8-9ed132702c3a",
          "timestamp": 1722419012658,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 39,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
          "name": "Validate user is able to update patient's information successfully",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
              }
            }
          ]
        },
        "parent": {
          "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                  }
                }
              ]
            },
            {
              "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                  }
                }
              ]
            },
            {
              "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                  }
                }
              ]
            },
            {
              "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                  }
                }
              ]
            },
            {
              "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                  }
                }
              ]
            },
            {
              "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceb08068-af97-4ef4-b105-ca2d3ed64e92",
          "length": 92,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "15ee3b1f-7d21-4a7e-aa47-1e67644784c8",
          "scriptId": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
          "execution": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient info updated successfully.'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient info updated successfully.'\n   at Object.eval sandbox-script.js:3:39)",
          "checksum": "32e5a2cb743d0466b8891fc4bf3b0570",
          "id": "6e1ce998-7d3b-4598-9bc1-64aebbc3664f",
          "timestamp": 1722419012661,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 39,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
          "name": "Validate user is able to update patient's information successfully",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
              }
            }
          ]
        },
        "parent": {
          "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                  }
                }
              ]
            },
            {
              "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                  }
                }
              ]
            },
            {
              "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                  }
                }
              ]
            },
            {
              "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                  }
                }
              ]
            },
            {
              "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                  }
                }
              ]
            },
            {
              "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceb08068-af97-4ef4-b105-ca2d3ed64e92",
          "length": 92,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "15ee3b1f-7d21-4a7e-aa47-1e67644784c8",
          "scriptId": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
          "execution": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)",
          "checksum": "4e6adb05d5aa97fecc5ed40bed52a09c",
          "id": "253423a9-e720-4c0e-9d1f-ae611086dcad",
          "timestamp": 1722419013297,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
          "name": "Validate user is unable to update patient's information with missing required field in the body",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
              }
            }
          ]
        },
        "parent": {
          "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                  }
                }
              ]
            },
            {
              "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                  }
                }
              ]
            },
            {
              "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                  }
                }
              ]
            },
            {
              "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                  }
                }
              ]
            },
            {
              "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                  }
                }
              ]
            },
            {
              "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb923450-4cfe-41b0-881a-87c1ff364a91",
          "length": 92,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4161a472-7497-489f-ac9f-0190873b07da",
          "scriptId": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
          "execution": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Missing required fields'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Missing required fields'\n   at Object.eval sandbox-script.js:2:40)",
          "checksum": "41e32780a2b74a6fb4f09c69fc3a8e8a",
          "id": "174b950a-5e9d-45c3-a10d-42d75c352875",
          "timestamp": 1722419013298,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
          "name": "Validate user is unable to update patient's information with missing required field in the body",
          "request": {
            "url": {
              "path": [
                "update-patient-details",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
              }
            }
          ]
        },
        "parent": {
          "id": "0d323dc3-8179-4e13-8739-ffa255b55561",
          "name": "Updates the information of Patient's data",
          "item": [
            {
              "id": "cc937bed-65f0-45f0-9cfe-2094cc1954e7",
              "name": "Validate user is able to check patient id successfully",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4b1d30d-23bb-450c-b9c9-d3154fb07154",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "382dd3f9-aaf0-4a1e-bb5c-897a3130dade"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c931a6c-1f01-4122-9796-8fd71e7540fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let patientId = \"patient_\" + new Date().getTime();\r",
                      "\r",
                      "// Set the environment variable\r",
                      "pm.environment.set(\"patient_id\", patientId);\r",
                      "\r",
                      "console.log(\"Environment Patient ID set to:\", patientId);\r",
                      "\r",
                      "function getRandomString(length) {\r",
                      "    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
                      "    let result = '';\r",
                      "    for (let i = 0; i < length; i++) {\r",
                      "        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
                      "    }\r",
                      "    return result;\r",
                      "}\r",
                      "\r",
                      "// Generate a unique name using a random string\r",
                      "let name = \"Name_\" + getRandomString(8) + \"_\" + new Date().getTime();\r",
                      "pm.environment.set(\"name\", name);"
                    ],
                    "_lastExecutionId": "a0d9a360-c766-43da-9ebe-c98df772bfbf"
                  }
                }
              ]
            },
            {
              "id": "795ddbf1-dabe-4287-bcc0-38073c03eb5d",
              "name": "Validate user is able to update patient's information successfully",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":\"4a92ba9f-d7be-4eb1-bad0-2b22660b2a79\",\r\n    \"patient_id\":\"{{patient_id}}\",\r\n     \"name\": \"{{name}}\",\r\n    \"age\": 20,\r\n    \"gender\":\"female\",\r\n    \"tumor_type\":\"liver_cancer\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\"\r\n    \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "14bfb9e9-1dc2-494c-83c2-c2e9af6704bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient info updated successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36f8e45b-0aee-4f09-9d95-20e4db396bef"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48eb5046-a683-45da-9598-ce3b0fa985b4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e07b1f7-3d68-490b-981f-c52e180142d0"
                  }
                }
              ]
            },
            {
              "id": "ed9e9e6f-7ebc-4c8f-a9c4-378f6e6b190f",
              "name": "Validate user is unable to update patient's information with missing required field in the body",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"id\":\"{{p_info_task_id}}\",\r\n  \"name\": \"Patient Name\",\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
                  }
                }
              ]
            },
            {
              "id": "4a749353-84c4-4c3c-b040-a77ce86116a2",
              "name": "Validate user is unable to update patient's information without Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "50de21d2-7e6d-4792-b15a-a0976e6ab1fc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "34882a70-e07b-4373-bfcb-cb02fd7401bb"
                  }
                }
              ]
            },
            {
              "id": "690f9717-5a3f-4fb6-a853-53b3c4904f45",
              "name": "Validate user is unable to update patient's information as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d598303c-7f85-49c4-b21a-8b83e2e84657",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "77e6b30d-fc5e-4342-b79c-efaf86888931"
                  }
                }
              ]
            },
            {
              "id": "ab72f3f1-12a0-4199-9c34-a3f320294d33",
              "name": "Validate user is unable to update patient's information as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "update-patient-details",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n    \"id\":{{uid}},\r\n  \"name\": \"Patient Name\",\r\n    \"age\": 45,\r\n    \"comorbidities\": \"None\",\r\n    \"condition\": \"Moderately differentiated adenocarcinoma with a predominantly micropapillary pattern\",\r\n    \"ecog_performance_status\": \"1\",\r\n    \"er\": \"Unknown\",\r\n    \"estimated_tumor_content_tumor_cellularity\": \"some text\",\r\n    \"family_history\": \"some text\"\r\n\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "42d5dc14-8b9c-487b-8d0a-aaf852c9606c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6f0675b4-d677-4da8-bca0-143cc8a28443"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cb923450-4cfe-41b0-881a-87c1ff364a91",
          "length": 92,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4161a472-7497-489f-ac9f-0190873b07da",
          "scriptId": "3c5591a0-1a54-4db6-83cb-5a6ab4edd2c4",
          "execution": "e82b74d0-65b3-481d-adf0-e6c907fd8949"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:44)",
          "checksum": "ce1c0f187618b829afa0529dd7953de9",
          "id": "45ef0ebb-740b-4642-ae53-5614e07c5d78",
          "timestamp": 1722419015856,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 44,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
          "name": "Validate user is able to check patient id successfully(true)",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
              }
            }
          ]
        },
        "parent": {
          "id": "1aaaefda-69f3-4d0d-b2c5-7fc66b81e3e0",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
                  }
                }
              ]
            },
            {
              "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
                  }
                }
              ]
            },
            {
              "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
                  }
                }
              ]
            },
            {
              "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52e3a331-5763-4767-ad66-fa455389775c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
                  }
                }
              ]
            },
            {
              "id": "726cca06-c036-4706-9714-96f6570eebf1",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
                  }
                }
              ]
            },
            {
              "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "90da2a60-d3ac-4ccd-9dc2-bb98ccce4df7",
          "length": 92,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8bffe05b-0ff7-40e6-8adb-1bfa0948c15e",
          "scriptId": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
          "execution": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:44)",
          "checksum": "6af8fd94531579aca84e0e20bb008d31",
          "id": "9f5ceaa3-6b8c-4f6d-8d76-89fc90f455ea",
          "timestamp": 1722419015858,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 44,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
          "name": "Validate user is able to check patient id successfully(true)",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
              }
            }
          ]
        },
        "parent": {
          "id": "1aaaefda-69f3-4d0d-b2c5-7fc66b81e3e0",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
                  }
                }
              ]
            },
            {
              "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
                  }
                }
              ]
            },
            {
              "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
                  }
                }
              ]
            },
            {
              "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52e3a331-5763-4767-ad66-fa455389775c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
                  }
                }
              ]
            },
            {
              "id": "726cca06-c036-4706-9714-96f6570eebf1",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
                  }
                }
              ]
            },
            {
              "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "90da2a60-d3ac-4ccd-9dc2-bb98ccce4df7",
          "length": 92,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8bffe05b-0ff7-40e6-8adb-1bfa0948c15e",
          "scriptId": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
          "execution": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient id already exists.'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient id already exists.'\n   at Object.eval sandbox-script.js:3:44)",
          "checksum": "452ce4ee76f4648e311fe32565fef64c",
          "id": "7a43514f-0507-4123-a74d-ca4baef6b6dd",
          "timestamp": 1722419015859,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 44,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
          "name": "Validate user is able to check patient id successfully(true)",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
              }
            }
          ]
        },
        "parent": {
          "id": "1aaaefda-69f3-4d0d-b2c5-7fc66b81e3e0",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
                  }
                }
              ]
            },
            {
              "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
                  }
                }
              ]
            },
            {
              "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
                  }
                }
              ]
            },
            {
              "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52e3a331-5763-4767-ad66-fa455389775c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
                  }
                }
              ]
            },
            {
              "id": "726cca06-c036-4706-9714-96f6570eebf1",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
                  }
                }
              ]
            },
            {
              "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "90da2a60-d3ac-4ccd-9dc2-bb98ccce4df7",
          "length": 92,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "8bffe05b-0ff7-40e6-8adb-1bfa0948c15e",
          "scriptId": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
          "execution": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)",
          "checksum": "f8a55374af54e6c4641c9f5dc3e97c22",
          "id": "9b4b3078-b5ea-4644-b620-19f8dffe1e14",
          "timestamp": 1722419016511,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 45,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
          "name": "Validate user is unable to check patient id as patient_id is missing in the body",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
              }
            }
          ]
        },
        "parent": {
          "id": "1aaaefda-69f3-4d0d-b2c5-7fc66b81e3e0",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
                  }
                }
              ]
            },
            {
              "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
                  }
                }
              ]
            },
            {
              "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
                  }
                }
              ]
            },
            {
              "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52e3a331-5763-4767-ad66-fa455389775c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
                  }
                }
              ]
            },
            {
              "id": "726cca06-c036-4706-9714-96f6570eebf1",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
                  }
                }
              ]
            },
            {
              "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "be017f18-fe2c-4da9-9ef2-4824ed16045a",
          "length": 92,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e7579098-8dcf-44dd-acf8-bcd9b57fafc2",
          "scriptId": "d5821e38-978c-47c9-9edb-bd84cadb7356",
          "execution": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:45)",
          "checksum": "7146c3ba59656aa180bb4ca2e3c388e8",
          "id": "72d0d360-7a34-452b-b36a-e80680329114",
          "timestamp": 1722419016512,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 45,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
          "name": "Validate user is unable to check patient id as patient_id is missing in the body",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
              }
            }
          ]
        },
        "parent": {
          "id": "1aaaefda-69f3-4d0d-b2c5-7fc66b81e3e0",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
                  }
                }
              ]
            },
            {
              "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
                  }
                }
              ]
            },
            {
              "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
                  }
                }
              ]
            },
            {
              "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52e3a331-5763-4767-ad66-fa455389775c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
                  }
                }
              ]
            },
            {
              "id": "726cca06-c036-4706-9714-96f6570eebf1",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
                  }
                }
              ]
            },
            {
              "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "be017f18-fe2c-4da9-9ef2-4824ed16045a",
          "length": 92,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e7579098-8dcf-44dd-acf8-bcd9b57fafc2",
          "scriptId": "d5821e38-978c-47c9-9edb-bd84cadb7356",
          "execution": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:46)",
          "checksum": "5b0e170031419a78f78faac703d96ad6",
          "id": "ea37c38d-4d10-4055-9fa2-d9aed22469b8",
          "timestamp": 1722419017155,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 46,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
          "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});"
                ],
                "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
              }
            }
          ]
        },
        "parent": {
          "id": "1aaaefda-69f3-4d0d-b2c5-7fc66b81e3e0",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
                  }
                }
              ]
            },
            {
              "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
                  }
                }
              ]
            },
            {
              "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
                  }
                }
              ]
            },
            {
              "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52e3a331-5763-4767-ad66-fa455389775c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
                  }
                }
              ]
            },
            {
              "id": "726cca06-c036-4706-9714-96f6570eebf1",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
                  }
                }
              ]
            },
            {
              "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cda9bfe8-bf04-4bb4-a902-d40145e5086b",
          "length": 92,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "34b804ca-0c8e-4f2c-ab76-e7a3f79d4758",
          "scriptId": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
          "execution": "16838401-aa3f-4d2e-86b6-6748781dac07"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient id does not exist'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient id does not exist'\n   at Object.eval sandbox-script.js:2:46)",
          "checksum": "47e7a9ec99e7a3c2851e35e3b5b07d46",
          "id": "a742b1af-8f52-41de-b103-0eea3406d85c",
          "timestamp": 1722419017156,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 46,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
          "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
          "request": {
            "url": {
              "path": [
                "check-patient-id",
                ""
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                  "});"
                ],
                "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
              }
            }
          ]
        },
        "parent": {
          "id": "1aaaefda-69f3-4d0d-b2c5-7fc66b81e3e0",
          "name": "Check Patient ID",
          "item": [
            {
              "id": "7ef821d1-f4f8-440b-a944-80aa3aa9ced6",
              "name": "Validate user is able to check patient id successfully(true)",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cc6ec1b9-286b-47f3-8cba-f8cdb504dad1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id already exists.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec0a9912-24a7-44eb-8151-d37e5efb9c65"
                  }
                }
              ]
            },
            {
              "id": "7b03eff8-b126-4f5c-ab7f-85b652d8d941",
              "name": "Validate user is unable to check patient id as patient_id is missing in the body",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d5821e38-978c-47c9-9edb-bd84cadb7356",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3b41b4b0-f2a9-4e18-91ed-29a3e547d8bd"
                  }
                }
              ]
            },
            {
              "id": "61b7b85c-fda7-4835-beb8-2d5507ea8683",
              "name": "Validate user is unable to check patient id as incorrect patient_id is provided",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"K345678\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient id does not exist\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "16838401-aa3f-4d2e-86b6-6748781dac07"
                  }
                }
              ]
            },
            {
              "id": "960881b6-24f1-4670-aab3-917cc7ce4979",
              "name": "Validate user is unable to check patient id without authorization",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52e3a331-5763-4767-ad66-fa455389775c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3aeb99a8-52bd-4047-a12c-8ec861839a30"
                  }
                }
              ]
            },
            {
              "id": "726cca06-c036-4706-9714-96f6570eebf1",
              "name": "Validate user is unable to check patient id as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe1ce31-f024-4618-ba0a-c30df1a4065c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "d1b6910b-5fa8-40b5-a174-85681d07a291"
                  }
                }
              ]
            },
            {
              "id": "389df21e-e3eb-4190-beca-c1fd29e05cb5",
              "name": "Validate user is unable to check patient id as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "check-patient-id",
                    ""
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"patient_id\": \"{{patient_id}}\"\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5dcf0d0d-ad3b-45f8-9a25-2b00ef3b9cb3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3e3cd98b-2b78-42c5-9185-ef47b0b0b846"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cda9bfe8-bf04-4bb4-a902-d40145e5086b",
          "length": 92,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "34b804ca-0c8e-4f2c-ab76-e7a3f79d4758",
          "scriptId": "9d170d5b-e5bd-47f1-a0dd-ad2fda263ca8",
          "execution": "16838401-aa3f-4d2e-86b6-6748781dac07"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:50)",
          "checksum": "f6d397236d2a2096969bff1717477ffb",
          "id": "bbd5763d-a0a0-44c1-8954-59401b5d9891",
          "timestamp": 1722419019454,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 50,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b0e983b1-5deb-4ace-858a-19b072190522",
          "name": "Validate user is able to search patients successfully",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
              }
            }
          ]
        },
        "parent": {
          "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
          "name": "Search patients",
          "item": [
            {
              "id": "b0e983b1-5deb-4ace-858a-19b072190522",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                  }
                }
              ]
            },
            {
              "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                  }
                }
              ]
            },
            {
              "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                  }
                }
              ]
            },
            {
              "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                  }
                }
              ]
            },
            {
              "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9ea7e78-a84c-4923-810f-594712794883",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5e094015-b35e-4c8c-83dc-4fe8683b59a4",
          "length": 92,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7f0b38b7-f288-4e9b-8ec3-c4f1162c836a",
          "scriptId": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
          "execution": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:50)",
          "checksum": "87318289af0ba20e03127ce51ba23116",
          "id": "98269775-8d3e-4989-a066-6b904f7fb726",
          "timestamp": 1722419019457,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 50,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b0e983b1-5deb-4ace-858a-19b072190522",
          "name": "Validate user is able to search patients successfully",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
              }
            }
          ]
        },
        "parent": {
          "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
          "name": "Search patients",
          "item": [
            {
              "id": "b0e983b1-5deb-4ace-858a-19b072190522",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                  }
                }
              ]
            },
            {
              "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                  }
                }
              ]
            },
            {
              "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                  }
                }
              ]
            },
            {
              "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                  }
                }
              ]
            },
            {
              "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9ea7e78-a84c-4923-810f-594712794883",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5e094015-b35e-4c8c-83dc-4fe8683b59a4",
          "length": 92,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7f0b38b7-f288-4e9b-8ec3-c4f1162c836a",
          "scriptId": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
          "execution": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Search items fetched successfully'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Search items fetched successfully'\n   at Object.eval sandbox-script.js:3:50)",
          "checksum": "76eb0e0796c5c4d76272a3a1c810d775",
          "id": "202d9abb-9e69-4a13-ab81-f421ee646fb4",
          "timestamp": 1722419019460,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 50,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "b0e983b1-5deb-4ace-858a-19b072190522",
          "name": "Validate user is able to search patients successfully",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
              }
            }
          ]
        },
        "parent": {
          "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
          "name": "Search patients",
          "item": [
            {
              "id": "b0e983b1-5deb-4ace-858a-19b072190522",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                  }
                }
              ]
            },
            {
              "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                  }
                }
              ]
            },
            {
              "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                  }
                }
              ]
            },
            {
              "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                  }
                }
              ]
            },
            {
              "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9ea7e78-a84c-4923-810f-594712794883",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5e094015-b35e-4c8c-83dc-4fe8683b59a4",
          "length": 92,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7f0b38b7-f288-4e9b-8ec3-c4f1162c836a",
          "scriptId": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
          "execution": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:51)",
          "checksum": "11864b852f6cd47ec13b341b96300595",
          "id": "c5e46ca2-44d3-4b39-a581-f32d15c4496e",
          "timestamp": 1722419019851,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 51,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
          "name": "Validate user is able to search patients if optional parameters are missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                },
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
              }
            }
          ]
        },
        "parent": {
          "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
          "name": "Search patients",
          "item": [
            {
              "id": "b0e983b1-5deb-4ace-858a-19b072190522",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                  }
                }
              ]
            },
            {
              "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                  }
                }
              ]
            },
            {
              "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                  }
                }
              ]
            },
            {
              "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                  }
                }
              ]
            },
            {
              "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9ea7e78-a84c-4923-810f-594712794883",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "029cb37f-1007-479b-9ea3-ab368102beae",
          "length": 92,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f0ed7bff-a265-4b40-8b3f-c8c49146d900",
          "scriptId": "5e2941d9-d6de-4c93-b18a-d7180490590e",
          "execution": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response message is Valid",
          "message": "expected 'error' to deeply equal 'success'",
          "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:2:51)",
          "checksum": "8f14de3c3ea85a4264cd0ec315e0f81c",
          "id": "5b00ae49-c9a1-42d0-80b1-5d4624a28db9",
          "timestamp": 1722419019852,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 51,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
          "name": "Validate user is able to search patients if optional parameters are missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                },
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
              }
            }
          ]
        },
        "parent": {
          "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
          "name": "Search patients",
          "item": [
            {
              "id": "b0e983b1-5deb-4ace-858a-19b072190522",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                  }
                }
              ]
            },
            {
              "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                  }
                }
              ]
            },
            {
              "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                  }
                }
              ]
            },
            {
              "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                  }
                }
              ]
            },
            {
              "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9ea7e78-a84c-4923-810f-594712794883",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "029cb37f-1007-479b-9ea3-ab368102beae",
          "length": 92,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f0ed7bff-a265-4b40-8b3f-c8c49146d900",
          "scriptId": "5e2941d9-d6de-4c93-b18a-d7180490590e",
          "execution": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Search items fetched successfully'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Search items fetched successfully'\n   at Object.eval sandbox-script.js:3:51)",
          "checksum": "202a7d725b9bac5f36e64d794e9403cb",
          "id": "b4ce40f5-0509-4126-856f-546f2c43161b",
          "timestamp": 1722419019855,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 51,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
          "name": "Validate user is able to search patients if optional parameters are missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": ""
                },
                {
                  "key": "keyword",
                  "value": "{{patient_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
              }
            }
          ]
        },
        "parent": {
          "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
          "name": "Search patients",
          "item": [
            {
              "id": "b0e983b1-5deb-4ace-858a-19b072190522",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                  }
                }
              ]
            },
            {
              "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                  }
                }
              ]
            },
            {
              "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                  }
                }
              ]
            },
            {
              "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                  }
                }
              ]
            },
            {
              "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9ea7e78-a84c-4923-810f-594712794883",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "029cb37f-1007-479b-9ea3-ab368102beae",
          "length": 92,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f0ed7bff-a265-4b40-8b3f-c8c49146d900",
          "scriptId": "5e2941d9-d6de-4c93-b18a-d7180490590e",
          "execution": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)",
          "checksum": "11557542999287b16544abb450396c82",
          "id": "298cb81f-3486-4341-b18e-2e7fabb175b0",
          "timestamp": 1722419020245,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 52,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
          "name": "Validate user is unable to search patients as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
              }
            }
          ]
        },
        "parent": {
          "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
          "name": "Search patients",
          "item": [
            {
              "id": "b0e983b1-5deb-4ace-858a-19b072190522",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                  }
                }
              ]
            },
            {
              "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                  }
                }
              ]
            },
            {
              "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                  }
                }
              ]
            },
            {
              "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                  }
                }
              ]
            },
            {
              "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9ea7e78-a84c-4923-810f-594712794883",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d798d87d-24f6-4ab6-b1cf-0644c096c94b",
          "length": 92,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "57f59e25-1cd5-4bb4-a047-029aaa4b0232",
          "scriptId": "e384831e-f5b0-4049-94f2-f65a69370105",
          "execution": "d41eddfa-895b-44d5-9c27-5910998e4b44"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:52)",
          "checksum": "9e97eaec4b4b6a306ac49805b5f1bc70",
          "id": "be00bc38-b1f5-4122-b31f-952d837a9c50",
          "timestamp": 1722419020246,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 52,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
          "name": "Validate user is unable to search patients as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "search-patients"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "keyword",
                  "value": ""
                },
                {
                  "disabled": true,
                  "key": "limit",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_field",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "sort_by",
                  "value": null
                },
                {
                  "disabled": true,
                  "key": "page",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
              }
            }
          ]
        },
        "parent": {
          "id": "c9ce3f31-d8ef-4f5d-8e32-e6713d16c429",
          "name": "Search patients",
          "item": [
            {
              "id": "b0e983b1-5deb-4ace-858a-19b072190522",
              "name": "Validate user is able to search patients successfully",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b33ffcfb-ae1c-4ff7-848c-e87a52a404ab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c1bb96b-0545-4fab-91a4-ebadc0af8d00"
                  }
                }
              ]
            },
            {
              "id": "15564af1-3db2-4a7b-bc0a-95909f9a5994",
              "name": "Validate user is able to search patients if optional parameters are missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": ""
                    },
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5e2941d9-d6de-4c93-b18a-d7180490590e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Search items fetched successfully\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0b6e5c91-e905-43c3-ae78-71376c4751fe"
                  }
                }
              ]
            },
            {
              "id": "7a8d464e-ff2c-4e6d-ba3f-72010084b976",
              "name": "Validate user is unable to search patients as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": ""
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e384831e-f5b0-4049-94f2-f65a69370105",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "d41eddfa-895b-44d5-9c27-5910998e4b44"
                  }
                }
              ]
            },
            {
              "id": "e57673b6-1a16-4acf-8190-03ddf2cb2272",
              "name": "Validate user is unable to search patients without Authorization",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "be87c6ee-8449-4bc6-9fdb-35319b0a8f07",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c1c4b186-fec8-45a1-a50b-c2c1c623b345"
                  }
                }
              ]
            },
            {
              "id": "04c2cbb2-5f8d-4241-87cf-2488283d3b0b",
              "name": "Validate user is unable to search patients as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "search-patients"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "keyword",
                      "value": "{{patient_id}}"
                    },
                    {
                      "disabled": true,
                      "key": "limit",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_field",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "sort_by",
                      "value": null
                    },
                    {
                      "disabled": true,
                      "key": "page",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9ea7e78-a84c-4923-810f-594712794883",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "f833ac66-14cd-44e9-af56-03cdaae89541"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d798d87d-24f6-4ab6-b1cf-0644c096c94b",
          "length": 92,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "57f59e25-1cd5-4bb4-a047-029aaa4b0232",
          "scriptId": "e384831e-f5b0-4049-94f2-f65a69370105",
          "execution": "d41eddfa-895b-44d5-9c27-5910998e4b44"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:55)",
          "checksum": "11071afb409492816ddbc8fe0116db38",
          "id": "1f92322d-1119-4e99-89f8-b5b3b417fd19",
          "timestamp": 1722419021338,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 55,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-current-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
              }
            }
          ]
        },
        "parent": {
          "id": "bc301fa0-71eb-43be-89a8-0d78af67802e",
          "name": "Get current user task info",
          "item": [
            {
              "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
                  }
                }
              ]
            },
            {
              "id": "691f3c81-4a23-4ed5-b0a1-4a46dfc603b7",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6181861e-dffa-46f3-882b-6c0488d04ed7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "    });"
                    ],
                    "_lastExecutionId": "57aba010-6129-4289-ad45-6d847bb75668"
                  }
                }
              ]
            },
            {
              "id": "7f29083a-45fd-48d4-a12a-fdf34626fd3d",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38aae98b-0911-4686-944e-e19902c7dd33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f445ef88-48ab-4ab5-89b9-3df8c1711231"
                  }
                }
              ]
            },
            {
              "id": "53159003-0a15-4368-bef2-b3497d667daf",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1f8f75e-60e1-4c92-9556-346b0a29ec91",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92b8620a-0222-45b0-b942-b2567304b2ef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9116d79b-35bf-4f77-a3a5-b6af9233cacc",
          "length": 92,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "55f04e93-687c-464c-8763-021fb46cf773",
          "scriptId": "c84d9e25-69c0-4af7-87e7-372199099c74",
          "execution": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:55)",
          "checksum": "b8ff185fd45fc84df6c84b2981b2ccb8",
          "id": "0afd69fc-bf38-4892-b206-aa96a546ccbc",
          "timestamp": 1722419021340,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 55,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-current-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
              }
            }
          ]
        },
        "parent": {
          "id": "bc301fa0-71eb-43be-89a8-0d78af67802e",
          "name": "Get current user task info",
          "item": [
            {
              "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
                  }
                }
              ]
            },
            {
              "id": "691f3c81-4a23-4ed5-b0a1-4a46dfc603b7",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6181861e-dffa-46f3-882b-6c0488d04ed7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "    });"
                    ],
                    "_lastExecutionId": "57aba010-6129-4289-ad45-6d847bb75668"
                  }
                }
              ]
            },
            {
              "id": "7f29083a-45fd-48d4-a12a-fdf34626fd3d",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38aae98b-0911-4686-944e-e19902c7dd33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f445ef88-48ab-4ab5-89b9-3df8c1711231"
                  }
                }
              ]
            },
            {
              "id": "53159003-0a15-4368-bef2-b3497d667daf",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1f8f75e-60e1-4c92-9556-346b0a29ec91",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92b8620a-0222-45b0-b942-b2567304b2ef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9116d79b-35bf-4f77-a3a5-b6af9233cacc",
          "length": 92,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "55f04e93-687c-464c-8763-021fb46cf773",
          "scriptId": "c84d9e25-69c0-4af7-87e7-372199099c74",
          "execution": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'error' to deeply equal 'success'",
          "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:55)",
          "checksum": "5c2b4775a9b5a21898ad759e518200dc",
          "id": "9ec36d6d-98e7-4cf1-8891-b727cdc483ab",
          "timestamp": 1722419021342,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 55,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-current-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
              }
            }
          ]
        },
        "parent": {
          "id": "bc301fa0-71eb-43be-89a8-0d78af67802e",
          "name": "Get current user task info",
          "item": [
            {
              "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
                  }
                }
              ]
            },
            {
              "id": "691f3c81-4a23-4ed5-b0a1-4a46dfc603b7",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6181861e-dffa-46f3-882b-6c0488d04ed7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "    });"
                    ],
                    "_lastExecutionId": "57aba010-6129-4289-ad45-6d847bb75668"
                  }
                }
              ]
            },
            {
              "id": "7f29083a-45fd-48d4-a12a-fdf34626fd3d",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38aae98b-0911-4686-944e-e19902c7dd33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f445ef88-48ab-4ab5-89b9-3df8c1711231"
                  }
                }
              ]
            },
            {
              "id": "53159003-0a15-4368-bef2-b3497d667daf",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1f8f75e-60e1-4c92-9556-346b0a29ec91",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92b8620a-0222-45b0-b942-b2567304b2ef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9116d79b-35bf-4f77-a3a5-b6af9233cacc",
          "length": 92,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "55f04e93-687c-464c-8763-021fb46cf773",
          "scriptId": "c84d9e25-69c0-4af7-87e7-372199099c74",
          "execution": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient details fetched successfully.'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient details fetched successfully.'\n   at Object.eval sandbox-script.js:4:55)",
          "checksum": "5958c97e13847ce47faaf627153a4bde",
          "id": "372e8b86-8c48-4e70-9548-61df04370b1f",
          "timestamp": 1722419021345,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 55,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
          "name": "Validate user is able to get current user task info successfully",
          "request": {
            "url": {
              "path": [
                "get-current-user-task-info"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                  "});"
                ],
                "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
              }
            }
          ]
        },
        "parent": {
          "id": "bc301fa0-71eb-43be-89a8-0d78af67802e",
          "name": "Get current user task info",
          "item": [
            {
              "id": "bcd99518-3195-4034-8fea-76a4e992f55d",
              "name": "Validate user is able to get current user task info successfully",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c84d9e25-69c0-4af7-87e7-372199099c74",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient details fetched successfully.\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
                  }
                }
              ]
            },
            {
              "id": "691f3c81-4a23-4ed5-b0a1-4a46dfc603b7",
              "name": "Validate user is unable to get current user task info without authorization",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6181861e-dffa-46f3-882b-6c0488d04ed7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "    });"
                    ],
                    "_lastExecutionId": "57aba010-6129-4289-ad45-6d847bb75668"
                  }
                }
              ]
            },
            {
              "id": "7f29083a-45fd-48d4-a12a-fdf34626fd3d",
              "name": "Validate user is unable to get current user task info as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "38aae98b-0911-4686-944e-e19902c7dd33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "f445ef88-48ab-4ab5-89b9-3df8c1711231"
                  }
                }
              ]
            },
            {
              "id": "53159003-0a15-4368-bef2-b3497d667daf",
              "name": "Validate user is unable to get current user task info as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-current-user-task-info"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c1f8f75e-60e1-4c92-9556-346b0a29ec91",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "92b8620a-0222-45b0-b942-b2567304b2ef"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9116d79b-35bf-4f77-a3a5-b6af9233cacc",
          "length": 92,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "55f04e93-687c-464c-8763-021fb46cf773",
          "scriptId": "c84d9e25-69c0-4af7-87e7-372199099c74",
          "execution": "648e6c4a-1f9f-4a9d-993d-43fb7b8df8a8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response has all required fields",
          "message": "expected { status: 'error', …(1) } to have property 'data'",
          "stack": "AssertionError: expected { status: 'error', …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:1:59)",
          "checksum": "3b966e819a71bd9ad77d424c8304b8c2",
          "id": "12ab23b2-d840-4700-9263-2b0116ca4c16",
          "timestamp": 1722419022837,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 59,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
              }
            }
          ]
        },
        "parent": {
          "id": "92756a69-feba-4bad-8fd8-519e167152b7",
          "name": "Start variant processing",
          "item": [
            {
              "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
                  }
                }
              ]
            },
            {
              "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a52b03e7-654d-4822-97af-a375811bab03",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
                  }
                }
              ]
            },
            {
              "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e141686a-3b1c-47e6-b952-d789c9452d51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c758d5a2-12cf-4164-b255-8a0686cb232d"
                  }
                }
              ]
            },
            {
              "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f5d5f17-3618-455d-ba62-feadd5bc6837",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "886a17fd-e3c4-45c5-80ae-ae3ead5de4cb"
                  }
                }
              ]
            },
            {
              "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e9004f3-e059-417a-b6f4-1ffb5f94cced",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "be9f8cec-9243-4157-81dc-a96bcb1fd656"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5c8ee149-23e2-4d8e-9332-86e9037d058c",
          "length": 92,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "042f96af-8c67-4c30-9594-94983c134598",
          "scriptId": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
          "execution": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:2:59)",
          "checksum": "3dcc30ee580b65b9be6db1394c3dc29e",
          "id": "610bf87f-0c8d-4b87-8140-9e2f59b9c698",
          "timestamp": 1722419022840,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 59,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
              }
            }
          ]
        },
        "parent": {
          "id": "92756a69-feba-4bad-8fd8-519e167152b7",
          "name": "Start variant processing",
          "item": [
            {
              "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
                  }
                }
              ]
            },
            {
              "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a52b03e7-654d-4822-97af-a375811bab03",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
                  }
                }
              ]
            },
            {
              "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e141686a-3b1c-47e6-b952-d789c9452d51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c758d5a2-12cf-4164-b255-8a0686cb232d"
                  }
                }
              ]
            },
            {
              "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f5d5f17-3618-455d-ba62-feadd5bc6837",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "886a17fd-e3c4-45c5-80ae-ae3ead5de4cb"
                  }
                }
              ]
            },
            {
              "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e9004f3-e059-417a-b6f4-1ffb5f94cced",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "be9f8cec-9243-4157-81dc-a96bcb1fd656"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5c8ee149-23e2-4d8e-9332-86e9037d058c",
          "length": 92,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "042f96af-8c67-4c30-9594-94983c134598",
          "scriptId": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
          "execution": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'error' to deeply equal 'success'",
          "stack": "AssertionError: expected 'error' to deeply equal 'success'\n   at Object.eval sandbox-script.js:3:59)",
          "checksum": "f206bb99268d16567d0a0045c717c981",
          "id": "0e144a90-d706-4753-ad73-f466c34cc059",
          "timestamp": 1722419022843,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 59,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
              }
            }
          ]
        },
        "parent": {
          "id": "92756a69-feba-4bad-8fd8-519e167152b7",
          "name": "Start variant processing",
          "item": [
            {
              "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
                  }
                }
              ]
            },
            {
              "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a52b03e7-654d-4822-97af-a375811bab03",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
                  }
                }
              ]
            },
            {
              "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e141686a-3b1c-47e6-b952-d789c9452d51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c758d5a2-12cf-4164-b255-8a0686cb232d"
                  }
                }
              ]
            },
            {
              "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f5d5f17-3618-455d-ba62-feadd5bc6837",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "886a17fd-e3c4-45c5-80ae-ae3ead5de4cb"
                  }
                }
              ]
            },
            {
              "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e9004f3-e059-417a-b6f4-1ffb5f94cced",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "be9f8cec-9243-4157-81dc-a96bcb1fd656"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5c8ee149-23e2-4d8e-9332-86e9037d058c",
          "length": 92,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "042f96af-8c67-4c30-9594-94983c134598",
          "scriptId": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
          "execution": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Variant file(s) processed successfully'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Variant file(s) processed successfully'\n   at Object.eval sandbox-script.js:4:59)",
          "checksum": "d9778ace7eb3f61616cac5b8bd5b3602",
          "id": "df9c28c2-51a1-4a9a-8be7-2c2348f904e7",
          "timestamp": 1722419022845,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 59,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
          "name": "Validate user is able to start variant processing successfully",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "    pm.expect(response).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                  "});"
                ],
                "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
              }
            }
          ]
        },
        "parent": {
          "id": "92756a69-feba-4bad-8fd8-519e167152b7",
          "name": "Start variant processing",
          "item": [
            {
              "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
                  }
                }
              ]
            },
            {
              "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a52b03e7-654d-4822-97af-a375811bab03",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
                  }
                }
              ]
            },
            {
              "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e141686a-3b1c-47e6-b952-d789c9452d51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c758d5a2-12cf-4164-b255-8a0686cb232d"
                  }
                }
              ]
            },
            {
              "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f5d5f17-3618-455d-ba62-feadd5bc6837",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "886a17fd-e3c4-45c5-80ae-ae3ead5de4cb"
                  }
                }
              ]
            },
            {
              "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e9004f3-e059-417a-b6f4-1ffb5f94cced",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "be9f8cec-9243-4157-81dc-a96bcb1fd656"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "5c8ee149-23e2-4d8e-9332-86e9037d058c",
          "length": 92,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "042f96af-8c67-4c30-9594-94983c134598",
          "scriptId": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
          "execution": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)",
          "checksum": "aad60d3462396ef043985d637e6c4ad8",
          "id": "14292d44-9b45-4d9f-bc50-1a8c7d27e0ee",
          "timestamp": 1722419023216,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 60,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
          "name": "Validate user is unable to start variant processing as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a52b03e7-654d-4822-97af-a375811bab03",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
              }
            }
          ]
        },
        "parent": {
          "id": "92756a69-feba-4bad-8fd8-519e167152b7",
          "name": "Start variant processing",
          "item": [
            {
              "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
                  }
                }
              ]
            },
            {
              "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a52b03e7-654d-4822-97af-a375811bab03",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
                  }
                }
              ]
            },
            {
              "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e141686a-3b1c-47e6-b952-d789c9452d51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c758d5a2-12cf-4164-b255-8a0686cb232d"
                  }
                }
              ]
            },
            {
              "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f5d5f17-3618-455d-ba62-feadd5bc6837",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "886a17fd-e3c4-45c5-80ae-ae3ead5de4cb"
                  }
                }
              ]
            },
            {
              "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e9004f3-e059-417a-b6f4-1ffb5f94cced",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "be9f8cec-9243-4157-81dc-a96bcb1fd656"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e58af2b1-3220-481a-aae5-a7d1db418d97",
          "length": 92,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2a1984ac-d6b9-4d41-a7a9-e796852566b1",
          "scriptId": "a52b03e7-654d-4822-97af-a375811bab03",
          "execution": "7f6adab8-074c-43f2-85b2-3b0342980a36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:60)",
          "checksum": "d2b66863f9c913e21cab9f0a5e034f02",
          "id": "7c608f8b-7d7e-44c3-a639-8eabafde3191",
          "timestamp": 1722419023217,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 60,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
          "name": "Validate user is unable to start variant processing as required parameter is missing",
          "request": {
            "url": {
              "path": [
                "start-variant-processing"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a52b03e7-654d-4822-97af-a375811bab03",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
              }
            }
          ]
        },
        "parent": {
          "id": "92756a69-feba-4bad-8fd8-519e167152b7",
          "name": "Start variant processing",
          "item": [
            {
              "id": "c10d916d-8288-4405-9127-e6b2b47b2719",
              "name": "Validate user is able to start variant processing successfully",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "4a92ba9f-d7be-4eb1-bad0-2b22660b2a79"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0b94b7b-26e4-42c0-898d-10970ca2f267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "    pm.expect(response).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Variant file(s) processed successfully\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "8f32751b-9594-42d1-8ede-f77d21c17ee0"
                  }
                }
              ]
            },
            {
              "id": "f6106ad2-f9f4-4065-a3c3-b79ee8ca1c46",
              "name": "Validate user is unable to start variant processing as required parameter is missing",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a52b03e7-654d-4822-97af-a375811bab03",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7f6adab8-074c-43f2-85b2-3b0342980a36"
                  }
                }
              ]
            },
            {
              "id": "8c784e0f-0875-46dd-87d7-cb9cb5b6646d",
              "name": "Validate user is unable to start variant processing without Authorization",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e141686a-3b1c-47e6-b952-d789c9452d51",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "c758d5a2-12cf-4164-b255-8a0686cb232d"
                  }
                }
              ]
            },
            {
              "id": "f953c3d3-1c84-4ce1-9023-240192ed07b7",
              "name": "Validate user is unable to start variant processing as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f5d5f17-3618-455d-ba62-feadd5bc6837",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "886a17fd-e3c4-45c5-80ae-ae3ead5de4cb"
                  }
                }
              ]
            },
            {
              "id": "e0ee722f-baef-4374-ac92-eaea20459c83",
              "name": "Validate user is unable to start variant processing as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "start-variant-processing"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e9004f3-e059-417a-b6f4-1ffb5f94cced",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "be9f8cec-9243-4157-81dc-a96bcb1fd656"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e58af2b1-3220-481a-aae5-a7d1db418d97",
          "length": 92,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "2a1984ac-d6b9-4d41-a7a9-e796852566b1",
          "scriptId": "a52b03e7-654d-4822-97af-a375811bab03",
          "execution": "7f6adab8-074c-43f2-85b2-3b0342980a36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response is an array",
          "message": "expected { status: 'error', …(1) } to be an array",
          "stack": "AssertionError: expected { status: 'error', …(1) } to be an array\n   at Object.eval sandbox-script.js:1:64)",
          "checksum": "f077a5adf33c8cf3e28ce35df25db37f",
          "id": "73b073e4-a2ea-4e20-99fd-7130d33b5856",
          "timestamp": 1722419024700,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 64,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
          "name": "Validate user is able to display patient demograph dropdown successfully",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
              }
            }
          ]
        },
        "parent": {
          "id": "39e42a72-c61c-4a9d-98fc-07f3d18cc956",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
                  }
                }
              ]
            },
            {
              "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
                  }
                }
              ]
            },
            {
              "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
                  }
                }
              ]
            },
            {
              "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
                  }
                }
              ]
            },
            {
              "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
                  }
                }
              ]
            },
            {
              "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b89eba45-88d7-483d-ad0f-35a9f0ded83e",
          "length": 92,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4c6df0fd-925b-4b99-a2ee-18c218d703de",
          "scriptId": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
          "execution": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains all expected elements",
          "message": "the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:64)",
          "checksum": "f78e884dbf0234560df422fda131eac1",
          "id": "4fd6c644-adfa-4dcb-a3c5-8bc9e76a53e0",
          "timestamp": 1722419024702,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 64,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
          "name": "Validate user is able to display patient demograph dropdown successfully",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
              }
            }
          ]
        },
        "parent": {
          "id": "39e42a72-c61c-4a9d-98fc-07f3d18cc956",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
                  }
                }
              ]
            },
            {
              "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
                  }
                }
              ]
            },
            {
              "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
                  }
                }
              ]
            },
            {
              "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
                  }
                }
              ]
            },
            {
              "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
                  }
                }
              ]
            },
            {
              "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b89eba45-88d7-483d-ad0f-35a9f0ded83e",
          "length": 92,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4c6df0fd-925b-4b99-a2ee-18c218d703de",
          "scriptId": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
          "execution": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 2,
          "test": "Response does not contain unexpected elements",
          "message": "response.forEach is not a function",
          "stack": "TypeError: response.forEach is not a function\n   at Object.eval sandbox-script.js:3:64)",
          "checksum": "236f51910407839f17cc0fd287aae181",
          "id": "754583c1-2389-425c-962d-f338371d0c30",
          "timestamp": 1722419024703,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 64,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
          "name": "Validate user is able to display patient demograph dropdown successfully",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "tmb"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
              }
            }
          ]
        },
        "parent": {
          "id": "39e42a72-c61c-4a9d-98fc-07f3d18cc956",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
                  }
                }
              ]
            },
            {
              "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
                  }
                }
              ]
            },
            {
              "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
                  }
                }
              ]
            },
            {
              "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
                  }
                }
              ]
            },
            {
              "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
                  }
                }
              ]
            },
            {
              "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b89eba45-88d7-483d-ad0f-35a9f0ded83e",
          "length": 92,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4c6df0fd-925b-4b99-a2ee-18c218d703de",
          "scriptId": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
          "execution": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)",
          "checksum": "7a9f89845406d9ab6761fcf37cdc9db2",
          "id": "c7d53cc7-0dbd-4654-9528-58cd863b77cf",
          "timestamp": 1722419025087,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 65,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
          "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
              }
            }
          ]
        },
        "parent": {
          "id": "39e42a72-c61c-4a9d-98fc-07f3d18cc956",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
                  }
                }
              ]
            },
            {
              "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
                  }
                }
              ]
            },
            {
              "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
                  }
                }
              ]
            },
            {
              "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
                  }
                }
              ]
            },
            {
              "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
                  }
                }
              ]
            },
            {
              "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3a4f135d-655e-402c-acd6-653eb44d9cb1",
          "length": 92,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "30eae64a-7d3a-4e2a-8731-c6f0722f6794",
          "scriptId": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
          "execution": "29101ee9-a126-4057-affd-d2afc0da2b28"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:65)",
          "checksum": "0c860ec0c2d0026b332f867ca52d6402",
          "id": "a97daeef-e580-492f-b803-f530b36ec6b3",
          "timestamp": 1722419025090,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 65,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
          "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
              }
            }
          ]
        },
        "parent": {
          "id": "39e42a72-c61c-4a9d-98fc-07f3d18cc956",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
                  }
                }
              ]
            },
            {
              "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
                  }
                }
              ]
            },
            {
              "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
                  }
                }
              ]
            },
            {
              "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
                  }
                }
              ]
            },
            {
              "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
                  }
                }
              ]
            },
            {
              "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3a4f135d-655e-402c-acd6-653eb44d9cb1",
          "length": 92,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "30eae64a-7d3a-4e2a-8731-c6f0722f6794",
          "scriptId": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
          "execution": "29101ee9-a126-4057-affd-d2afc0da2b28"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)",
          "checksum": "130dd5b07c8b99db671d7a9de06e0df8",
          "id": "b8a8cc0d-a594-40c1-a1c1-25f413536111",
          "timestamp": 1722419025489,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 66,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
          "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
              }
            }
          ]
        },
        "parent": {
          "id": "39e42a72-c61c-4a9d-98fc-07f3d18cc956",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
                  }
                }
              ]
            },
            {
              "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
                  }
                }
              ]
            },
            {
              "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
                  }
                }
              ]
            },
            {
              "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
                  }
                }
              ]
            },
            {
              "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
                  }
                }
              ]
            },
            {
              "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "152e1d71-2098-465b-b4b6-2858b0fd02c4",
          "length": 92,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f3129457-b9f4-4ae7-97a0-a2f97d2cd8d9",
          "scriptId": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
          "execution": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:66)",
          "checksum": "71084b2e206c5de8a92d7731231b7c78",
          "id": "7a633848-debd-47c2-80da-3e154989ca71",
          "timestamp": 1722419025491,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 66,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
          "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "patient-demograph-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
              }
            }
          ]
        },
        "parent": {
          "id": "39e42a72-c61c-4a9d-98fc-07f3d18cc956",
          "name": "Patient demograph dropdown",
          "item": [
            {
              "id": "5a2e77fe-2cba-4bac-a997-69031c8da2af",
              "name": "Validate user is able to display patient demograph dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e47ebf36-74ee-4a7c-af91-9c22df7ae471",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\"High\", \"Low\", \"Intermediate\", \"Unknown\"];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "97fc7ca0-afed-4fb4-84ca-fb256fd22b92"
                  }
                }
              ]
            },
            {
              "id": "8517d58f-2463-4f5d-b24f-9154f7863f69",
              "name": "Validate user is unable to display patient demograph dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "adbdc303-999f-4c2b-81ae-8f9d1073a984",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "29101ee9-a126-4057-affd-d2afc0da2b28"
                  }
                }
              ]
            },
            {
              "id": "4eb53d48-6d3f-44ce-bb8d-1504b9e9bfbc",
              "name": "Validate user is unable to display patient demograph dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
                  }
                }
              ]
            },
            {
              "id": "82d2c4f6-4d65-4af1-9e97-9849415bee89",
              "name": "Validate user is unable to display patient demograph dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ca5308d3-ac8a-4541-948e-a9c7be7bdd87",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7fec490d-980d-43cc-8404-f332efb2ae05"
                  }
                }
              ]
            },
            {
              "id": "f99c2026-0aa5-4944-b69d-2cb4a86f7260",
              "name": "Validate user is unable to display patient demograph dropdown as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "413422ea-21a1-4c13-887e-90c5096fe31f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "18671e84-8f96-48b4-9259-2724c728d30a"
                  }
                }
              ]
            },
            {
              "id": "13564122-ca58-4693-ac03-c81cc0ff485c",
              "name": "Validate user is unable to display patient demograph dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "patient-demograph-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "tmb"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c77036d2-31eb-4cc9-b027-ae7820850e77",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "756126b1-35c7-4874-a214-ae4d13c7159b"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "152e1d71-2098-465b-b4b6-2858b0fd02c4",
          "length": 92,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f3129457-b9f4-4ae7-97a0-a2f97d2cd8d9",
          "scriptId": "45850ac3-b32e-4227-a8c1-1aeda8f1458d",
          "execution": "634186b2-97a3-4a15-a0d3-4c2b9c24eb2a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response is an array",
          "message": "expected { status: 'error', …(1) } to be an array",
          "stack": "AssertionError: expected { status: 'error', …(1) } to be an array\n   at Object.eval sandbox-script.js:1:70)",
          "checksum": "16a4967e58f73e159ac1457b31fed32a",
          "id": "0093b9cf-2d1f-4310-a53d-8d412099159e",
          "timestamp": 1722419026946,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 70,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
          "name": "Validate user is able to display sub tumor type dropdown successfully",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\r",
                  "    \"Small Cell Lung Cancer\",\r",
                  "    \"Non-Small Cell Lung Cancer\",\r",
                  "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                  "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                  "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                  "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                  "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                  "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                  "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                  "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                  "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                  "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                  "    \"Lung Carcinoid (LUCA)\",\r",
                  "    \"Small Cell Lung Cancer (SCLC)\",\r",
                  "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                  "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                  "    \"Lung Adenocarcinoma (LUAD)\",\r",
                  "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                  "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                  "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                  "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                  "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                  "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                  "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                  "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                  "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                  "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                  "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                  "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                  "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                  "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                  "];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
              }
            }
          ]
        },
        "parent": {
          "id": "e9c3e956-ce7b-46af-8b4d-fdd077da8b4e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
                  }
                }
              ]
            },
            {
              "id": "66248610-7e52-4f55-91fd-d87342f31812",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
                  }
                }
              ]
            },
            {
              "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
                  }
                }
              ]
            },
            {
              "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
                  }
                }
              ]
            },
            {
              "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
                  }
                }
              ]
            },
            {
              "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b97fb04-d2be-44e6-8f9a-ae124d0446e7",
          "length": 92,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "20b53b37-f5fd-47bd-a682-4d9f6e34cfa3",
          "scriptId": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
          "execution": "6cce881d-eca0-496c-aeef-ac8a5b030152"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response contains all expected elements",
          "message": "the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:70)",
          "checksum": "42c362bc9b64f94601d6a10f5dcf12d3",
          "id": "bb8e6985-4503-4cd7-b294-47614b2c569d",
          "timestamp": 1722419026948,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 70,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
          "name": "Validate user is able to display sub tumor type dropdown successfully",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\r",
                  "    \"Small Cell Lung Cancer\",\r",
                  "    \"Non-Small Cell Lung Cancer\",\r",
                  "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                  "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                  "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                  "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                  "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                  "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                  "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                  "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                  "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                  "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                  "    \"Lung Carcinoid (LUCA)\",\r",
                  "    \"Small Cell Lung Cancer (SCLC)\",\r",
                  "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                  "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                  "    \"Lung Adenocarcinoma (LUAD)\",\r",
                  "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                  "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                  "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                  "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                  "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                  "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                  "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                  "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                  "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                  "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                  "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                  "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                  "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                  "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                  "];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
              }
            }
          ]
        },
        "parent": {
          "id": "e9c3e956-ce7b-46af-8b4d-fdd077da8b4e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
                  }
                }
              ]
            },
            {
              "id": "66248610-7e52-4f55-91fd-d87342f31812",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
                  }
                }
              ]
            },
            {
              "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
                  }
                }
              ]
            },
            {
              "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
                  }
                }
              ]
            },
            {
              "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
                  }
                }
              ]
            },
            {
              "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b97fb04-d2be-44e6-8f9a-ae124d0446e7",
          "length": 92,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "20b53b37-f5fd-47bd-a682-4d9f6e34cfa3",
          "scriptId": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
          "execution": "6cce881d-eca0-496c-aeef-ac8a5b030152"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 2,
          "test": "Response does not contain unexpected elements",
          "message": "response.forEach is not a function",
          "stack": "TypeError: response.forEach is not a function\n   at Object.eval sandbox-script.js:3:70)",
          "checksum": "46ec5bf2857d838f4fdc1b317e838ae2",
          "id": "5618bc9d-0e80-4f0c-8226-db9e54298cab",
          "timestamp": 1722419026950,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 70,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
          "name": "Validate user is able to display sub tumor type dropdown successfully",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "lung_cancer"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse the JSON response\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// Expected array elements\r",
                  "let expectedElements = [\r",
                  "    \"Small Cell Lung Cancer\",\r",
                  "    \"Non-Small Cell Lung Cancer\",\r",
                  "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                  "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                  "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                  "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                  "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                  "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                  "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                  "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                  "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                  "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                  "    \"Lung Carcinoid (LUCA)\",\r",
                  "    \"Small Cell Lung Cancer (SCLC)\",\r",
                  "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                  "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                  "    \"Lung Adenocarcinoma (LUAD)\",\r",
                  "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                  "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                  "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                  "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                  "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                  "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                  "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                  "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                  "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                  "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                  "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                  "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                  "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                  "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                  "];\r",
                  "\r",
                  "// Validate the response is an array\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    pm.expect(response).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "// Validate the response contains all expected elements\r",
                  "pm.test(\"Response contains all expected elements\", function () {\r",
                  "    expectedElements.forEach(function(element) {\r",
                  "        pm.expect(response).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// Validate the response does not contain any unexpected elements\r",
                  "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                  "    response.forEach(function(element) {\r",
                  "        pm.expect(expectedElements).to.include(element);\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
              }
            }
          ]
        },
        "parent": {
          "id": "e9c3e956-ce7b-46af-8b4d-fdd077da8b4e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
                  }
                }
              ]
            },
            {
              "id": "66248610-7e52-4f55-91fd-d87342f31812",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
                  }
                }
              ]
            },
            {
              "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
                  }
                }
              ]
            },
            {
              "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
                  }
                }
              ]
            },
            {
              "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
                  }
                }
              ]
            },
            {
              "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b97fb04-d2be-44e6-8f9a-ae124d0446e7",
          "length": 92,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "20b53b37-f5fd-47bd-a682-4d9f6e34cfa3",
          "scriptId": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
          "execution": "6cce881d-eca0-496c-aeef-ac8a5b030152"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)",
          "checksum": "24c93c78b1c3d062702d10969ffbdfad",
          "id": "de6effb9-b38d-4459-89d7-1d2dcc213da5",
          "timestamp": 1722419027347,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 71,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "66248610-7e52-4f55-91fd-d87342f31812",
          "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
              }
            }
          ]
        },
        "parent": {
          "id": "e9c3e956-ce7b-46af-8b4d-fdd077da8b4e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
                  }
                }
              ]
            },
            {
              "id": "66248610-7e52-4f55-91fd-d87342f31812",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
                  }
                }
              ]
            },
            {
              "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
                  }
                }
              ]
            },
            {
              "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
                  }
                }
              ]
            },
            {
              "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
                  }
                }
              ]
            },
            {
              "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "887b20a3-bd59-47c9-9ed6-41bcdde6c92e",
          "length": 92,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5fa0a384-9e0c-47fd-95b1-bc264362fec2",
          "scriptId": "7d1bccce-b64c-493b-8140-78e36eb87f98",
          "execution": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:71)",
          "checksum": "c5645a56436fc01a271e390b1307adf8",
          "id": "91c36577-6fe1-44fa-993b-aa93ab5c53a0",
          "timestamp": 1722419027348,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 71,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "66248610-7e52-4f55-91fd-d87342f31812",
          "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
              }
            }
          ]
        },
        "parent": {
          "id": "e9c3e956-ce7b-46af-8b4d-fdd077da8b4e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
                  }
                }
              ]
            },
            {
              "id": "66248610-7e52-4f55-91fd-d87342f31812",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
                  }
                }
              ]
            },
            {
              "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
                  }
                }
              ]
            },
            {
              "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
                  }
                }
              ]
            },
            {
              "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
                  }
                }
              ]
            },
            {
              "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "887b20a3-bd59-47c9-9ed6-41bcdde6c92e",
          "length": 92,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "5fa0a384-9e0c-47fd-95b1-bc264362fec2",
          "scriptId": "7d1bccce-b64c-493b-8140-78e36eb87f98",
          "execution": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)",
          "checksum": "5909f978a1183134fc9c83fc17b49586",
          "id": "3c39d7f4-51bf-41d6-beff-19146006b94f",
          "timestamp": 1722419027694,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 72,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
          "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
              }
            }
          ]
        },
        "parent": {
          "id": "e9c3e956-ce7b-46af-8b4d-fdd077da8b4e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
                  }
                }
              ]
            },
            {
              "id": "66248610-7e52-4f55-91fd-d87342f31812",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
                  }
                }
              ]
            },
            {
              "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
                  }
                }
              ]
            },
            {
              "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
                  }
                }
              ]
            },
            {
              "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
                  }
                }
              ]
            },
            {
              "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1629978c-e9c9-487c-8a68-e74cc8715836",
          "length": 92,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "37821377-e679-46a8-9843-f7c4e763b48a",
          "scriptId": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
          "execution": "a2523f9e-04d9-4f06-b11a-27ec85588034"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:3:72)",
          "checksum": "985f22dcbfbc529b0835a88982e760a0",
          "id": "1d124a26-7e67-40d7-bd07-c8ffc7461f16",
          "timestamp": 1722419027696,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 72,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
          "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "sub-tumor-dropdown"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
              }
            }
          ]
        },
        "parent": {
          "id": "e9c3e956-ce7b-46af-8b4d-fdd077da8b4e",
          "name": "Sub tumor dropdown",
          "item": [
            {
              "id": "8236d6c3-d378-4f1a-ac6a-9bca3947f44a",
              "name": "Validate user is able to display sub tumor type dropdown successfully",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "52b3af1a-2e44-4cb0-af89-8864f7b31d7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Parse the JSON response\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// Expected array elements\r",
                      "let expectedElements = [\r",
                      "    \"Small Cell Lung Cancer\",\r",
                      "    \"Non-Small Cell Lung Cancer\",\r",
                      "    \"Combined Small Cell Lung Carcinoma (CSCLC)\",\r",
                      "    \"Inflammatory Myofibroblastic Lung Tumor (IMTL)\",\r",
                      "    \"Lung Adenocarcinoma In Situ (LAIS)\",\r",
                      "    \"Lung Neuroendocrine Tumor (LNET)\",\r",
                      "    \"Non-Small Cell Lung Cancer (NSCLC)\",\r",
                      "    \"Pleuropulmonary Blastoma (PPB)\",\r",
                      "    \"Pulmonary Lymphangiomyomatosis (LAM)\",\r",
                      "    \"Sarcomatoid Carcinoma of the Lung (SARCL)\",\r",
                      "    \"Atypical Lung Carcinoid (ALUCA)\",\r",
                      "    \"Large Cell Neuroendocrine Carcinoma (LUNE)\",\r",
                      "    \"Lung Carcinoid (LUCA)\",\r",
                      "    \"Small Cell Lung Cancer (SCLC)\",\r",
                      "    \"Ciliated Muconodular Papillary Tumor of the Lung (CMPT)\",\r",
                      "    \"Large Cell Lung Carcinoma (LCLC)\",\r",
                      "    \"Lung Adenocarcinoma (LUAD)\",\r",
                      "    \"Lung Adenosquamous Carcinoma (LUAS)\",\r",
                      "    \"Lung Squamous Cell Carcinoma (LUSC)\",\r",
                      "    \"NUT Carcinoma of the Lung (NUTCL)\",\r",
                      "    \"Pleomorphic Carcinoma of the Lung (LUPC)\",\r",
                      "    \"Poorly Differentiated Non-Small Cell Lung Cancer (NSCLCPD)\",\r",
                      "    \"Salivary Gland-Type Tumor of the Lung (SGTTL)\",\r",
                      "    \"Spindle Cell Carcinoma of the Lung (SPCC)\",\r",
                      "    \"Basaloid Large Cell Carcinoma of the Lung (BLCLC)\",\r",
                      "    \"Clear Cell Carcinoma of the Lung (CCLC)\",\r",
                      "    \"Giant Cell Carcinoma of the Lung (GCLC)\",\r",
                      "    \"Large Cell Lung Carcinoma With Rhabdoid Phenotype (RLCLC)\",\r",
                      "    \"Lymphoepithelioma-like Carcinoma of the Lung (LECLC)\",\r",
                      "    \"Adenoid Cystic Carcinoma of the Lung (LUACC)\",\r",
                      "    \"Mucoepidermoid Carcinoma of the Lung (LUMEC)\"\r",
                      "];\r",
                      "\r",
                      "// Validate the response is an array\r",
                      "pm.test(\"Response is an array\", function () {\r",
                      "    pm.expect(response).to.be.an('array');\r",
                      "});\r",
                      "\r",
                      "// Validate the response contains all expected elements\r",
                      "pm.test(\"Response contains all expected elements\", function () {\r",
                      "    expectedElements.forEach(function(element) {\r",
                      "        pm.expect(response).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// Validate the response does not contain any unexpected elements\r",
                      "pm.test(\"Response does not contain unexpected elements\", function () {\r",
                      "    response.forEach(function(element) {\r",
                      "        pm.expect(expectedElements).to.include(element);\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6cce881d-eca0-496c-aeef-ac8a5b030152"
                  }
                }
              ]
            },
            {
              "id": "66248610-7e52-4f55-91fd-d87342f31812",
              "name": "Validate user is unable to display sub tumor type dropdown with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7d1bccce-b64c-493b-8140-78e36eb87f98",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "6a054798-6538-4fa9-906c-f2f78ca6fdc9"
                  }
                }
              ]
            },
            {
              "id": "487fa9c8-807f-4a87-8085-bf51c664aff2",
              "name": "Validate user is unable to display sub tumor type dropdown with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "a2523f9e-04d9-4f06-b11a-27ec85588034"
                  }
                }
              ]
            },
            {
              "id": "ab3898ad-dee8-4bb7-991c-cbd25cd4f367",
              "name": "Validate user is unable to display sub tumor type dropdown without Authorization",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c220e1f9-97e3-4beb-9ce4-e4cd7646b612",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "9ea2385f-bc48-4275-9c48-6fd01a8b37aa"
                  }
                }
              ]
            },
            {
              "id": "8526c7ed-29df-4ab8-a1cb-bc024d3f56c3",
              "name": "Validate user is unable to display sub tumor type dropdown as toekn is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "lung_cancer"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "880dc5e3-38a9-4f6a-a9e0-075a91927e2a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "36503928-1622-489e-9f37-b507a82cf9cf"
                  }
                }
              ]
            },
            {
              "id": "9054c8b4-b843-448d-81d3-458d35ab1cdf",
              "name": "Validate user is unable to display sub tumor type dropdown as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "sub-tumor-dropdown"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "key",
                      "value": "{{key}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "24063aa5-3d0f-41c9-a45f-51a73a345cab",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "91bf63f7-11e0-4138-91fa-529b9f07da49"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "1629978c-e9c9-487c-8a68-e74cc8715836",
          "length": 92,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "37821377-e679-46a8-9843-f7c4e763b48a",
          "scriptId": "ae41c868-5847-4531-81d8-99d5dd6bc9f1",
          "execution": "a2523f9e-04d9-4f06-b11a-27ec85588034"
        }
      },
      {
        "error": {
          "errno": -4039,
          "code": "ETIMEDOUT",
          "syscall": "connect",
          "address": "13.233.37.45",
          "port": 8001,
          "name": "Error",
          "message": "connect ETIMEDOUT 13.233.37.45:8001",
          "stack": "Error: connect ETIMEDOUT 13.233.37.45:8001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1595:16)",
          "checksum": "cab1d269d09b5faeea8ff52772233cd2",
          "id": "b9c3294d-0a66-477e-8376-33663fc3d187",
          "timestamp": 1722419049910,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1595,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
          "name": "Validate user is able to get patient file details successfully",
          "request": {
            "url": {
              "port": "8001",
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "13",
                "233",
                "37",
                "45"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
              }
            }
          ]
        },
        "parent": {
          "id": "92963e18-ba4a-45cd-9bd8-fe0b07cfbd17",
          "name": "Get patient file details",
          "item": [
            {
              "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
                  }
                }
              ]
            },
            {
              "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
                  }
                }
              ]
            },
            {
              "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
                  }
                }
              ]
            },
            {
              "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa94e452-56e5-4025-bd5b-ef23d5a7f6d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "11766759-b2ea-4fc4-ae8e-670a8d0a1afe"
                  }
                }
              ]
            },
            {
              "id": "d05647b3-4780-4743-9ea2-9398984305b6",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1302bdb3-2848-4ba3-aa3a-25629b3785e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0d4d9cd3-638a-429e-b6f5-9f5dc3fdae74"
                  }
                }
              ]
            },
            {
              "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e93de480-108e-4d74-a2f9-7e17a7041ab6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5ba81b7c-e780-4932-9abb-9351d850c320"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "502cb325-7ff3-4649-bdbf-62ce0eb1e5a4",
          "length": 92,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7a1c17ca-a333-4e40-ba3c-f1867b1150b9"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "9668b7e5-ca2b-4e4d-9158-730c6179a29e",
          "timestamp": 1722419049925,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
          "name": "Validate user is able to get patient file details successfully",
          "request": {
            "url": {
              "port": "8001",
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "13",
                "233",
                "37",
                "45"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Response has all required fields\", ()=> {\r",
                  "    pm.expect(response).to.have.property(\"status\");\r",
                  "    pm.expect(response).to.have.property(\"message\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
              }
            }
          ]
        },
        "parent": {
          "id": "92963e18-ba4a-45cd-9bd8-fe0b07cfbd17",
          "name": "Get patient file details",
          "item": [
            {
              "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
                  }
                }
              ]
            },
            {
              "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
                  }
                }
              ]
            },
            {
              "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
                  }
                }
              ]
            },
            {
              "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa94e452-56e5-4025-bd5b-ef23d5a7f6d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "11766759-b2ea-4fc4-ae8e-670a8d0a1afe"
                  }
                }
              ]
            },
            {
              "id": "d05647b3-4780-4743-9ea2-9398984305b6",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1302bdb3-2848-4ba3-aa3a-25629b3785e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0d4d9cd3-638a-429e-b6f5-9f5dc3fdae74"
                  }
                }
              ]
            },
            {
              "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e93de480-108e-4d74-a2f9-7e17a7041ab6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5ba81b7c-e780-4932-9abb-9351d850c320"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "502cb325-7ff3-4649-bdbf-62ce0eb1e5a4",
          "length": 92,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7a1c17ca-a333-4e40-ba3c-f1867b1150b9",
          "scriptId": "d560061e-19d1-4213-bd9c-92c56c53eba6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)",
          "checksum": "df5d274077a016236af96e7344fb301b",
          "id": "06bdbc44-255e-411b-b5e2-b0b59bef7e08",
          "timestamp": 1722419050537,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 77,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
          "name": "Validate user is unable to get patient file details with missing required parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
              }
            }
          ]
        },
        "parent": {
          "id": "92963e18-ba4a-45cd-9bd8-fe0b07cfbd17",
          "name": "Get patient file details",
          "item": [
            {
              "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
                  }
                }
              ]
            },
            {
              "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
                  }
                }
              ]
            },
            {
              "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
                  }
                }
              ]
            },
            {
              "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa94e452-56e5-4025-bd5b-ef23d5a7f6d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "11766759-b2ea-4fc4-ae8e-670a8d0a1afe"
                  }
                }
              ]
            },
            {
              "id": "d05647b3-4780-4743-9ea2-9398984305b6",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1302bdb3-2848-4ba3-aa3a-25629b3785e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0d4d9cd3-638a-429e-b6f5-9f5dc3fdae74"
                  }
                }
              ]
            },
            {
              "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e93de480-108e-4d74-a2f9-7e17a7041ab6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5ba81b7c-e780-4932-9abb-9351d850c320"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d5f7810-8dfe-4304-8baa-fda0678efcfd",
          "length": 92,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8442a329-c080-4046-b6c5-77fbf1be35b3",
          "scriptId": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
          "execution": "ad421722-b524-4340-b17f-6cd219900c5b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient not found'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient not found'\n   at Object.eval sandbox-script.js:3:77)",
          "checksum": "f312ac1075e6819d21289edc4cd2d247",
          "id": "d102b1e1-e4dc-4b60-b47e-aca0c33c062e",
          "timestamp": 1722419050540,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 77,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
          "name": "Validate user is unable to get patient file details with missing required parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
              }
            }
          ]
        },
        "parent": {
          "id": "92963e18-ba4a-45cd-9bd8-fe0b07cfbd17",
          "name": "Get patient file details",
          "item": [
            {
              "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
                  }
                }
              ]
            },
            {
              "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
                  }
                }
              ]
            },
            {
              "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
                  }
                }
              ]
            },
            {
              "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa94e452-56e5-4025-bd5b-ef23d5a7f6d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "11766759-b2ea-4fc4-ae8e-670a8d0a1afe"
                  }
                }
              ]
            },
            {
              "id": "d05647b3-4780-4743-9ea2-9398984305b6",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1302bdb3-2848-4ba3-aa3a-25629b3785e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0d4d9cd3-638a-429e-b6f5-9f5dc3fdae74"
                  }
                }
              ]
            },
            {
              "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e93de480-108e-4d74-a2f9-7e17a7041ab6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5ba81b7c-e780-4932-9abb-9351d850c320"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d5f7810-8dfe-4304-8baa-fda0678efcfd",
          "length": 92,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "8442a329-c080-4046-b6c5-77fbf1be35b3",
          "scriptId": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
          "execution": "ad421722-b524-4340-b17f-6cd219900c5b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)",
          "checksum": "accd907cad8c02253c69a87c5003959b",
          "id": "be45c203-f1b6-4125-bb71-60b28db54eca",
          "timestamp": 1722419050916,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 78,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
          "name": "Validate user is unable to get patient file details with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
              }
            }
          ]
        },
        "parent": {
          "id": "92963e18-ba4a-45cd-9bd8-fe0b07cfbd17",
          "name": "Get patient file details",
          "item": [
            {
              "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
                  }
                }
              ]
            },
            {
              "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
                  }
                }
              ]
            },
            {
              "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
                  }
                }
              ]
            },
            {
              "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa94e452-56e5-4025-bd5b-ef23d5a7f6d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "11766759-b2ea-4fc4-ae8e-670a8d0a1afe"
                  }
                }
              ]
            },
            {
              "id": "d05647b3-4780-4743-9ea2-9398984305b6",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1302bdb3-2848-4ba3-aa3a-25629b3785e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0d4d9cd3-638a-429e-b6f5-9f5dc3fdae74"
                  }
                }
              ]
            },
            {
              "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e93de480-108e-4d74-a2f9-7e17a7041ab6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5ba81b7c-e780-4932-9abb-9351d850c320"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "83eed0e9-36b7-4096-a889-d2fce0ddc3a7",
          "length": 92,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "23624b3f-7153-46ee-9309-59a8a7b5adc0",
          "scriptId": "946599a3-8834-4b81-ba6a-0016a62cba99",
          "execution": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Patient not found'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Patient not found'\n   at Object.eval sandbox-script.js:3:78)",
          "checksum": "c6618c844e3d8bfddad9bc99c7d02404",
          "id": "6ff549e2-cc77-4dbf-9837-d036eaa9cfc6",
          "timestamp": 1722419050919,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 78,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
          "name": "Validate user is unable to get patient file details with incorrect query parameter",
          "request": {
            "url": {
              "path": [
                "get-patient-file-details"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "\"12345\""
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid',()=>{\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                  "});\r",
                  "\r",
                  "pm.test('Response message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
              }
            }
          ]
        },
        "parent": {
          "id": "92963e18-ba4a-45cd-9bd8-fe0b07cfbd17",
          "name": "Get patient file details",
          "item": [
            {
              "id": "504eb3df-cdea-4d78-94e9-995790ded4d0",
              "name": "Validate user is able to get patient file details successfully",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "958fd271-1a6f-4cbb-8c53-bb1cbd3405cc"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d560061e-19d1-4213-bd9c-92c56c53eba6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Response has all required fields\", ()=> {\r",
                      "    pm.expect(response).to.have.property(\"status\");\r",
                      "    pm.expect(response).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"success\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient file details retrieved\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "2a45f2ab-8265-4871-9930-a613db8868dc"
                  }
                }
              ]
            },
            {
              "id": "99e36ce6-038d-4c99-8ee0-e7cd9e4482b4",
              "name": "Validate user is unable to get patient file details with missing required parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": ""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ddf7e604-fe48-42dc-9cd9-4486b07517be",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ad421722-b524-4340-b17f-6cd219900c5b"
                  }
                }
              ]
            },
            {
              "id": "86b7e6b2-5d19-4a0e-bc18-b2cb89168ec5",
              "name": "Validate user is unable to get patient file details with incorrect query parameter",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "\"12345\""
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "946599a3-8834-4b81-ba6a-0016a62cba99",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Patient not found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
                  }
                }
              ]
            },
            {
              "id": "affa28e1-3bd1-4fca-9ebf-b24a424dd8b8",
              "name": "Validate user is unable to get patient file details without Authorization",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aa94e452-56e5-4025-bd5b-ef23d5a7f6d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "11766759-b2ea-4fc4-ae8e-670a8d0a1afe"
                  }
                }
              ]
            },
            {
              "id": "d05647b3-4780-4743-9ea2-9398984305b6",
              "name": "Validate user is unable to get patient file details as token is invalid/expired",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2MjFiMDIxZS04NWU2LTQzNGQtOTVhYS02MGRlMjFhODAyNWIiLCJldmVudF9pZCI6ImM5OWQxN2VjLTYwNDktNDZiMC1iNmNjLTY3ODhkYTlmZTY4NCIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTgwMDI5NTQsImV4cCI6MTcxODAwNjU1NCwiaWF0IjoxNzE4MDAyOTU0LCJqdGkiOiIzYWI0MzRkOC03ODdjLTQyZmUtYjRmYi0wZjBkOTU2MzVjNjMiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.QSsG2TYRzRFqlRyiD5e98pFQ0LT_PHMCatAFXmX4vFGVKC_CgImSc6__e0L30N82QT1npJsuAf6AJweC2JrIb_7SWQ-CUav-FDuZ8wbbRjan8SjakNVZtfSOsgR39P5Ee2Axwh2-qUiJ7KpqghMWh_jAD8UB_tgVxT0OT947CkggxomVx8H4p22iXmJns2e27DkAkBk_XE4cxg9XW63lXqZ9rj_OA2ypKehPSFpDmCZhLtzOkIYM49fv3q0s4LKgX0rlsM6szLiWn14nWW_loBZUeCVPE0f2UNVoPIp2SJvLgkCJpuPWNwvs6flfdDDodVV3RPeTWOTVbo2b_Ke3vA",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1302bdb3-2848-4ba3-aa3a-25629b3785e6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().status).to.eql(\"error\");\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "0d4d9cd3-638a-429e-b6f5-9f5dc3fdae74"
                  }
                }
              ]
            },
            {
              "id": "71251daa-4e17-4b79-ba97-e563cbf7bb12",
              "name": "Validate user is unable to get patient file details as incorrect CRUD operation is used",
              "request": {
                "url": {
                  "path": [
                    "get-patient-file-details"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{uid}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e93de480-108e-4d74-a2f9-7e17a7041ab6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid',()=>{\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "\r",
                      "pm.test('Response message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "5ba81b7c-e780-4932-9abb-9351d850c320"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "83eed0e9-36b7-4096-a889-d2fce0ddc3a7",
          "length": 92,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "23624b3f-7153-46ee-9309-59a8a7b5adc0",
          "scriptId": "946599a3-8834-4b81-ba6a-0016a62cba99",
          "execution": "6b1f1661-ba37-4215-b67e-926e6972e3d2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 200 but got 401",
          "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:82)",
          "checksum": "74fcffe1b13f6a9afaeb0879e1e1f0fb",
          "id": "2dd07651-4f42-42e4-8c28-1ca25b75c97a",
          "timestamp": 1722419057748,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 82,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
          "name": "Successfully export files",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "69c804b0-150d-4ae6-ba39-3c748f70226b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6e5d9d00-8828-465b-a1bb-f25293ebf72c"
              }
            }
          ]
        },
        "parent": {
          "id": "6327ac04-74dc-4d7b-8ab5-d512acfdac5d",
          "name": "Export Files",
          "item": [
            {
              "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
              "name": "Successfully export files",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "69c804b0-150d-4ae6-ba39-3c748f70226b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e5d9d00-8828-465b-a1bb-f25293ebf72c"
                  }
                }
              ]
            },
            {
              "id": "349619be-0c1c-4a84-9069-bd402e53105a",
              "name": "Successfully could not export files with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1234567890"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
                  }
                }
              ]
            },
            {
              "id": "e03077f1-a2f9-49b8-970b-dde96c639961",
              "name": "Could not export files  due to missing authorization",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7248f218-854d-4e29-b04a-1e41fd1d5f1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "24fee36b-c662-4a27-97d8-4b170e72d19c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f6c92af2-f61e-455f-a66d-2d33283df621",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "11671069-0f1e-4be5-b83e-be49c05b65a8"
                  }
                }
              ]
            },
            {
              "id": "b65b5d9f-9195-46cb-a14f-c66d3fdc15ae",
              "name": "Could not export files  due to invalid  authorization",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cdfcdfc-724f-4365-90e2-b3f1b35070d8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74547ee0-e311-4204-a24e-ba6eebddcf48"
                  }
                }
              ]
            },
            {
              "id": "e141412c-0a0e-4f67-bf85-bcecf24b1186",
              "name": "Could not export files  due to invalid CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "af3e1362-bcf0-40c7-b15f-40b71d3b4560",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "617d2973-6d93-496c-b5e0-d5463f5a92cc"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d43c8b35-4c43-42fa-8eea-cbb8dad33e4e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                  "\r",
                  "setTimeout(function() {\r",
                  "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                  "}, delay);\r",
                  ""
                ],
                "_lastExecutionId": "8605552f-4b53-4b3d-8f24-ae6f9012c342"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "174cc189-b3f7-412e-8e97-6d6ab931f105",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  ""
                ],
                "_lastExecutionId": "43d4114d-b1aa-4080-a161-7cfe56752f6d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "942329a7-4ae2-41e3-9004-7aad887b01f9",
          "length": 92,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "44dcfd3c-0565-416b-b1c7-8aa193a6aa44",
          "scriptId": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
          "execution": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Successfully generated link'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Successfully generated link'\n   at Object.eval sandbox-script.js:2:82)",
          "checksum": "8aa0174609b0f1fae4d37d9ffc59bdc6",
          "id": "a547687c-0402-4200-9e92-6844658e89f5",
          "timestamp": 1722419057751,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 82,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
          "name": "Successfully export files",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{p_info_task_id}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "69c804b0-150d-4ae6-ba39-3c748f70226b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "6e5d9d00-8828-465b-a1bb-f25293ebf72c"
              }
            }
          ]
        },
        "parent": {
          "id": "6327ac04-74dc-4d7b-8ab5-d512acfdac5d",
          "name": "Export Files",
          "item": [
            {
              "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
              "name": "Successfully export files",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "69c804b0-150d-4ae6-ba39-3c748f70226b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e5d9d00-8828-465b-a1bb-f25293ebf72c"
                  }
                }
              ]
            },
            {
              "id": "349619be-0c1c-4a84-9069-bd402e53105a",
              "name": "Successfully could not export files with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1234567890"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
                  }
                }
              ]
            },
            {
              "id": "e03077f1-a2f9-49b8-970b-dde96c639961",
              "name": "Could not export files  due to missing authorization",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7248f218-854d-4e29-b04a-1e41fd1d5f1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "24fee36b-c662-4a27-97d8-4b170e72d19c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f6c92af2-f61e-455f-a66d-2d33283df621",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "11671069-0f1e-4be5-b83e-be49c05b65a8"
                  }
                }
              ]
            },
            {
              "id": "b65b5d9f-9195-46cb-a14f-c66d3fdc15ae",
              "name": "Could not export files  due to invalid  authorization",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cdfcdfc-724f-4365-90e2-b3f1b35070d8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74547ee0-e311-4204-a24e-ba6eebddcf48"
                  }
                }
              ]
            },
            {
              "id": "e141412c-0a0e-4f67-bf85-bcecf24b1186",
              "name": "Could not export files  due to invalid CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "af3e1362-bcf0-40c7-b15f-40b71d3b4560",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "617d2973-6d93-496c-b5e0-d5463f5a92cc"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d43c8b35-4c43-42fa-8eea-cbb8dad33e4e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                  "\r",
                  "setTimeout(function() {\r",
                  "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                  "}, delay);\r",
                  ""
                ],
                "_lastExecutionId": "8605552f-4b53-4b3d-8f24-ae6f9012c342"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "174cc189-b3f7-412e-8e97-6d6ab931f105",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  ""
                ],
                "_lastExecutionId": "43d4114d-b1aa-4080-a161-7cfe56752f6d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "942329a7-4ae2-41e3-9004-7aad887b01f9",
          "length": 92,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "44dcfd3c-0565-416b-b1c7-8aa193a6aa44",
          "scriptId": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
          "execution": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)",
          "checksum": "0dc72d65d6a37ffa41a1b5b520a9c4a7",
          "id": "eafc723d-f0cc-4792-9bbc-93dd181aa7cc",
          "timestamp": 1722419063395,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 83,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "349619be-0c1c-4a84-9069-bd402e53105a",
          "name": "Successfully could not export files with incorrect id",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "1234567890"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                  "});"
                ],
                "_lastExecutionId": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
              }
            }
          ]
        },
        "parent": {
          "id": "6327ac04-74dc-4d7b-8ab5-d512acfdac5d",
          "name": "Export Files",
          "item": [
            {
              "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
              "name": "Successfully export files",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "69c804b0-150d-4ae6-ba39-3c748f70226b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e5d9d00-8828-465b-a1bb-f25293ebf72c"
                  }
                }
              ]
            },
            {
              "id": "349619be-0c1c-4a84-9069-bd402e53105a",
              "name": "Successfully could not export files with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1234567890"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
                  }
                }
              ]
            },
            {
              "id": "e03077f1-a2f9-49b8-970b-dde96c639961",
              "name": "Could not export files  due to missing authorization",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7248f218-854d-4e29-b04a-1e41fd1d5f1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "24fee36b-c662-4a27-97d8-4b170e72d19c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f6c92af2-f61e-455f-a66d-2d33283df621",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "11671069-0f1e-4be5-b83e-be49c05b65a8"
                  }
                }
              ]
            },
            {
              "id": "b65b5d9f-9195-46cb-a14f-c66d3fdc15ae",
              "name": "Could not export files  due to invalid  authorization",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cdfcdfc-724f-4365-90e2-b3f1b35070d8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74547ee0-e311-4204-a24e-ba6eebddcf48"
                  }
                }
              ]
            },
            {
              "id": "e141412c-0a0e-4f67-bf85-bcecf24b1186",
              "name": "Could not export files  due to invalid CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "af3e1362-bcf0-40c7-b15f-40b71d3b4560",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "617d2973-6d93-496c-b5e0-d5463f5a92cc"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d43c8b35-4c43-42fa-8eea-cbb8dad33e4e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                  "\r",
                  "setTimeout(function() {\r",
                  "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                  "}, delay);\r",
                  ""
                ],
                "_lastExecutionId": "8605552f-4b53-4b3d-8f24-ae6f9012c342"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "174cc189-b3f7-412e-8e97-6d6ab931f105",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  ""
                ],
                "_lastExecutionId": "43d4114d-b1aa-4080-a161-7cfe56752f6d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "672423be-bcce-4819-a9aa-e18a6a6bfcac",
          "length": 92,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "02e1e8e1-ad97-471e-8a26-77e24b8d29fa",
          "scriptId": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
          "execution": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Error while removing files'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Error while removing files'\n   at Object.eval sandbox-script.js:2:83)",
          "checksum": "1af87c58911f8f9797c55fcd03a2a74e",
          "id": "c4c7b9da-d67f-4fb5-b807-072034726517",
          "timestamp": 1722419063398,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 83,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "349619be-0c1c-4a84-9069-bd402e53105a",
          "name": "Successfully could not export files with incorrect id",
          "request": {
            "url": {
              "path": [
                "export-files"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "1234567890"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                  "});"
                ],
                "_lastExecutionId": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
              }
            }
          ]
        },
        "parent": {
          "id": "6327ac04-74dc-4d7b-8ab5-d512acfdac5d",
          "name": "Export Files",
          "item": [
            {
              "id": "d21bde3c-f0af-426a-a466-c08b1e44304d",
              "name": "Successfully export files",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a1d6f1a4-c8a8-41ba-9539-4e11bec534d3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Successfully generated link\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "c95a2fa6-3dca-4f5c-9161-d84f84c92220"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "69c804b0-150d-4ae6-ba39-3c748f70226b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "6e5d9d00-8828-465b-a1bb-f25293ebf72c"
                  }
                }
              ]
            },
            {
              "id": "349619be-0c1c-4a84-9069-bd402e53105a",
              "name": "Successfully could not export files with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "1234567890"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Error while removing files\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
                  }
                }
              ]
            },
            {
              "id": "e03077f1-a2f9-49b8-970b-dde96c639961",
              "name": "Could not export files  due to missing authorization",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7248f218-854d-4e29-b04a-1e41fd1d5f1d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "24fee36b-c662-4a27-97d8-4b170e72d19c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "f6c92af2-f61e-455f-a66d-2d33283df621",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "11671069-0f1e-4be5-b83e-be49c05b65a8"
                  }
                }
              ]
            },
            {
              "id": "b65b5d9f-9195-46cb-a14f-c66d3fdc15ae",
              "name": "Could not export files  due to invalid  authorization",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fMeFP7TU",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2cdfcdfc-724f-4365-90e2-b3f1b35070d8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "74547ee0-e311-4204-a24e-ba6eebddcf48"
                  }
                }
              ]
            },
            {
              "id": "e141412c-0a0e-4f67-bf85-bcecf24b1186",
              "name": "Could not export files  due to invalid CRUD operation",
              "request": {
                "url": {
                  "path": [
                    "export-files"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{p_info_task_id}}"
                    }
                  ],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "af3e1362-bcf0-40c7-b15f-40b71d3b4560",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "617d2973-6d93-496c-b5e0-d5463f5a92cc"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d43c8b35-4c43-42fa-8eea-cbb8dad33e4e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const delay = 5000; // Delay time in milliseconds (e.g., 5000ms = 5 seconds)\r",
                  "\r",
                  "setTimeout(function() {\r",
                  "    console.log(`Delaying request by ${delay / 1000} seconds`);\r",
                  "}, delay);\r",
                  ""
                ],
                "_lastExecutionId": "8605552f-4b53-4b3d-8f24-ae6f9012c342"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "174cc189-b3f7-412e-8e97-6d6ab931f105",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "\r",
                  ""
                ],
                "_lastExecutionId": "43d4114d-b1aa-4080-a161-7cfe56752f6d"
              }
            }
          ]
        },
        "cursor": {
          "ref": "672423be-bcce-4819-a9aa-e18a6a6bfcac",
          "length": 92,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "02e1e8e1-ad97-471e-8a26-77e24b8d29fa",
          "scriptId": "5a263ed0-1411-4b5c-a29b-9f8243cedcd0",
          "execution": "e69e1a59-d298-48ff-bb77-cc79544a99c2"
        }
      },
      {
        "error": {
          "errno": -4039,
          "code": "ETIMEDOUT",
          "syscall": "connect",
          "address": "13.233.37.45",
          "port": 8001,
          "name": "Error",
          "message": "connect ETIMEDOUT 13.233.37.45:8001",
          "stack": "Error: connect ETIMEDOUT 13.233.37.45:8001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1595:16)",
          "checksum": "cab1d269d09b5faeea8ff52772233cd2",
          "id": "20d35605-0578-425a-a955-56076765778c",
          "timestamp": 1722419101551,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1595,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "47e71458-0121-485d-bb8e-8754668d3549",
          "name": "Update patient workflow",
          "request": {
            "url": {
              "port": "8001",
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "13",
                "233",
                "37",
                "45"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                  "});"
                ],
                "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
              }
            }
          ]
        },
        "parent": {
          "id": "aeeeab23-caf5-442e-a9cb-57e6d0d49808",
          "name": "Update Patient Workflow",
          "item": [
            {
              "id": "47e71458-0121-485d-bb8e-8754668d3549",
              "name": "Update patient workflow",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
                  }
                }
              ]
            },
            {
              "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
              "name": "Could not Update patient workflow with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
                  }
                }
              ]
            },
            {
              "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
              "name": "Could not Update patient workflow with missing required fields",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
                  }
                }
              ]
            },
            {
              "id": "785834f9-86cc-497b-8c46-03003684de0c",
              "name": "Could not Update patient workflow with missing Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
                  }
                }
              ]
            },
            {
              "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
              "name": "Could not Update patient workflow with invalid Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
                  }
                }
              ]
            },
            {
              "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
              "name": "Could not Update patient workflow with invalid CRUD  operation",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ba575c8-94c9-4f3a-8ea7-b916d4386034",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const currentUTCTime = new Date().toISOString();\r",
                  "\r",
                  "// Log the current time in UTC ISO format (optional)\r",
                  "console.log(currentUTCTime);\r",
                  "\r",
                  "// Set the current time as an environment variable\r",
                  "pm.environment.set(\"currentUTCTime\", currentUTCTime);"
                ],
                "_lastExecutionId": "13179f48-3ab6-4b25-b8a2-4d591b400258"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e804be1b-ff60-4706-9c60-b5747189fcb8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f8bf15a0-4af1-4169-9c78-99166ab67236"
              }
            }
          ]
        },
        "cursor": {
          "ref": "94de56f0-1d45-4710-80cd-3eac489abc7a",
          "length": 92,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ac6454c6-f377-429b-98c7-f9623a47aae6"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:87)",
          "checksum": "f0ccc6c144316e3f8c7d9b1be7278853",
          "id": "9930dafc-ebcc-435c-a81f-23188b6e4390",
          "timestamp": 1722419101595,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 87,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "47e71458-0121-485d-bb8e-8754668d3549",
          "name": "Update patient workflow",
          "request": {
            "url": {
              "port": "8001",
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "13",
                "233",
                "37",
                "45"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                  "});"
                ],
                "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
              }
            }
          ]
        },
        "parent": {
          "id": "aeeeab23-caf5-442e-a9cb-57e6d0d49808",
          "name": "Update Patient Workflow",
          "item": [
            {
              "id": "47e71458-0121-485d-bb8e-8754668d3549",
              "name": "Update patient workflow",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
                  }
                }
              ]
            },
            {
              "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
              "name": "Could not Update patient workflow with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
                  }
                }
              ]
            },
            {
              "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
              "name": "Could not Update patient workflow with missing required fields",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
                  }
                }
              ]
            },
            {
              "id": "785834f9-86cc-497b-8c46-03003684de0c",
              "name": "Could not Update patient workflow with missing Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
                  }
                }
              ]
            },
            {
              "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
              "name": "Could not Update patient workflow with invalid Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
                  }
                }
              ]
            },
            {
              "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
              "name": "Could not Update patient workflow with invalid CRUD  operation",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ba575c8-94c9-4f3a-8ea7-b916d4386034",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const currentUTCTime = new Date().toISOString();\r",
                  "\r",
                  "// Log the current time in UTC ISO format (optional)\r",
                  "console.log(currentUTCTime);\r",
                  "\r",
                  "// Set the current time as an environment variable\r",
                  "pm.environment.set(\"currentUTCTime\", currentUTCTime);"
                ],
                "_lastExecutionId": "13179f48-3ab6-4b25-b8a2-4d591b400258"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e804be1b-ff60-4706-9c60-b5747189fcb8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f8bf15a0-4af1-4169-9c78-99166ab67236"
              }
            }
          ]
        },
        "cursor": {
          "ref": "94de56f0-1d45-4710-80cd-3eac489abc7a",
          "length": 92,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ac6454c6-f377-429b-98c7-f9623a47aae6",
          "scriptId": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
          "execution": "94be2f13-ce28-4a1c-8985-c633267c0169"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Status message is Valid",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:87)",
          "checksum": "17c7d15122e1446ec96d761603731da7",
          "id": "6f3a08f3-cf28-402a-bd3e-eb83ec49c5ac",
          "timestamp": 1722419101596,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 87,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "47e71458-0121-485d-bb8e-8754668d3549",
          "name": "Update patient workflow",
          "request": {
            "url": {
              "port": "8001",
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "13",
                "233",
                "37",
                "45"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                  "});"
                ],
                "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
              }
            }
          ]
        },
        "parent": {
          "id": "aeeeab23-caf5-442e-a9cb-57e6d0d49808",
          "name": "Update Patient Workflow",
          "item": [
            {
              "id": "47e71458-0121-485d-bb8e-8754668d3549",
              "name": "Update patient workflow",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
                  }
                }
              ]
            },
            {
              "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
              "name": "Could not Update patient workflow with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
                  }
                }
              ]
            },
            {
              "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
              "name": "Could not Update patient workflow with missing required fields",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
                  }
                }
              ]
            },
            {
              "id": "785834f9-86cc-497b-8c46-03003684de0c",
              "name": "Could not Update patient workflow with missing Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
                  }
                }
              ]
            },
            {
              "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
              "name": "Could not Update patient workflow with invalid Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
                  }
                }
              ]
            },
            {
              "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
              "name": "Could not Update patient workflow with invalid CRUD  operation",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ba575c8-94c9-4f3a-8ea7-b916d4386034",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const currentUTCTime = new Date().toISOString();\r",
                  "\r",
                  "// Log the current time in UTC ISO format (optional)\r",
                  "console.log(currentUTCTime);\r",
                  "\r",
                  "// Set the current time as an environment variable\r",
                  "pm.environment.set(\"currentUTCTime\", currentUTCTime);"
                ],
                "_lastExecutionId": "13179f48-3ab6-4b25-b8a2-4d591b400258"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e804be1b-ff60-4706-9c60-b5747189fcb8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f8bf15a0-4af1-4169-9c78-99166ab67236"
              }
            }
          ]
        },
        "cursor": {
          "ref": "94de56f0-1d45-4710-80cd-3eac489abc7a",
          "length": 92,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ac6454c6-f377-429b-98c7-f9623a47aae6",
          "scriptId": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
          "execution": "94be2f13-ce28-4a1c-8985-c633267c0169"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)",
          "checksum": "12ca44a0a9d865f0149627d432db3601",
          "id": "dc4bdd46-9e87-45f9-ac4b-e622e2482203",
          "timestamp": 1722419102353,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 88,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
          "name": "Could not Update patient workflow with incorrect id",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
              }
            }
          ]
        },
        "parent": {
          "id": "aeeeab23-caf5-442e-a9cb-57e6d0d49808",
          "name": "Update Patient Workflow",
          "item": [
            {
              "id": "47e71458-0121-485d-bb8e-8754668d3549",
              "name": "Update patient workflow",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
                  }
                }
              ]
            },
            {
              "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
              "name": "Could not Update patient workflow with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
                  }
                }
              ]
            },
            {
              "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
              "name": "Could not Update patient workflow with missing required fields",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
                  }
                }
              ]
            },
            {
              "id": "785834f9-86cc-497b-8c46-03003684de0c",
              "name": "Could not Update patient workflow with missing Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
                  }
                }
              ]
            },
            {
              "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
              "name": "Could not Update patient workflow with invalid Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
                  }
                }
              ]
            },
            {
              "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
              "name": "Could not Update patient workflow with invalid CRUD  operation",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ba575c8-94c9-4f3a-8ea7-b916d4386034",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const currentUTCTime = new Date().toISOString();\r",
                  "\r",
                  "// Log the current time in UTC ISO format (optional)\r",
                  "console.log(currentUTCTime);\r",
                  "\r",
                  "// Set the current time as an environment variable\r",
                  "pm.environment.set(\"currentUTCTime\", currentUTCTime);"
                ],
                "_lastExecutionId": "13179f48-3ab6-4b25-b8a2-4d591b400258"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e804be1b-ff60-4706-9c60-b5747189fcb8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f8bf15a0-4af1-4169-9c78-99166ab67236"
              }
            }
          ]
        },
        "cursor": {
          "ref": "8bea57f4-fe23-4731-9540-5de8eab81a6f",
          "length": 92,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3a8277f4-1f89-4d17-9dfd-08e241cdec42",
          "scriptId": "5b19f405-11b5-4a45-a84d-de0db61fa097",
          "execution": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Unknown error occurred'\n   at Object.eval sandbox-script.js:2:88)",
          "checksum": "650be72f2168ed5058bebd1d82d2bab5",
          "id": "0e457566-cb87-411b-9bd2-cf6ddcefa907",
          "timestamp": 1722419102355,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 88,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
          "name": "Could not Update patient workflow with incorrect id",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                  "});"
                ],
                "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
              }
            }
          ]
        },
        "parent": {
          "id": "aeeeab23-caf5-442e-a9cb-57e6d0d49808",
          "name": "Update Patient Workflow",
          "item": [
            {
              "id": "47e71458-0121-485d-bb8e-8754668d3549",
              "name": "Update patient workflow",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
                  }
                }
              ]
            },
            {
              "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
              "name": "Could not Update patient workflow with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
                  }
                }
              ]
            },
            {
              "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
              "name": "Could not Update patient workflow with missing required fields",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
                  }
                }
              ]
            },
            {
              "id": "785834f9-86cc-497b-8c46-03003684de0c",
              "name": "Could not Update patient workflow with missing Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
                  }
                }
              ]
            },
            {
              "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
              "name": "Could not Update patient workflow with invalid Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
                  }
                }
              ]
            },
            {
              "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
              "name": "Could not Update patient workflow with invalid CRUD  operation",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ba575c8-94c9-4f3a-8ea7-b916d4386034",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const currentUTCTime = new Date().toISOString();\r",
                  "\r",
                  "// Log the current time in UTC ISO format (optional)\r",
                  "console.log(currentUTCTime);\r",
                  "\r",
                  "// Set the current time as an environment variable\r",
                  "pm.environment.set(\"currentUTCTime\", currentUTCTime);"
                ],
                "_lastExecutionId": "13179f48-3ab6-4b25-b8a2-4d591b400258"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e804be1b-ff60-4706-9c60-b5747189fcb8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f8bf15a0-4af1-4169-9c78-99166ab67236"
              }
            }
          ]
        },
        "cursor": {
          "ref": "8bea57f4-fe23-4731-9540-5de8eab81a6f",
          "length": 92,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3a8277f4-1f89-4d17-9dfd-08e241cdec42",
          "scriptId": "5b19f405-11b5-4a45-a84d-de0db61fa097",
          "execution": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status Code is valid",
          "message": "expected response to have status code 400 but got 401",
          "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)",
          "checksum": "10adbb449784f0d0f763d1dbd9ff071f",
          "id": "5eeca2b5-2166-4475-909e-5810e8567ee5",
          "timestamp": 1722419102804,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 89,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
          "name": "Could not Update patient workflow with missing required fields",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
              }
            }
          ]
        },
        "parent": {
          "id": "aeeeab23-caf5-442e-a9cb-57e6d0d49808",
          "name": "Update Patient Workflow",
          "item": [
            {
              "id": "47e71458-0121-485d-bb8e-8754668d3549",
              "name": "Update patient workflow",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
                  }
                }
              ]
            },
            {
              "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
              "name": "Could not Update patient workflow with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
                  }
                }
              ]
            },
            {
              "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
              "name": "Could not Update patient workflow with missing required fields",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
                  }
                }
              ]
            },
            {
              "id": "785834f9-86cc-497b-8c46-03003684de0c",
              "name": "Could not Update patient workflow with missing Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
                  }
                }
              ]
            },
            {
              "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
              "name": "Could not Update patient workflow with invalid Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
                  }
                }
              ]
            },
            {
              "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
              "name": "Could not Update patient workflow with invalid CRUD  operation",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ba575c8-94c9-4f3a-8ea7-b916d4386034",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const currentUTCTime = new Date().toISOString();\r",
                  "\r",
                  "// Log the current time in UTC ISO format (optional)\r",
                  "console.log(currentUTCTime);\r",
                  "\r",
                  "// Set the current time as an environment variable\r",
                  "pm.environment.set(\"currentUTCTime\", currentUTCTime);"
                ],
                "_lastExecutionId": "13179f48-3ab6-4b25-b8a2-4d591b400258"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e804be1b-ff60-4706-9c60-b5747189fcb8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f8bf15a0-4af1-4169-9c78-99166ab67236"
              }
            }
          ]
        },
        "cursor": {
          "ref": "46cbebf5-45f7-4f9d-8164-f04d3f41a607",
          "length": 92,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cb5bcf47-8218-40e9-aeb0-60193ee4f672",
          "scriptId": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
          "execution": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status message is Valid",
          "message": "expected 'Token is invalid or expired' to deeply equal 'Missing required fields'",
          "stack": "AssertionError: expected 'Token is invalid or expired' to deeply equal 'Missing required fields'\n   at Object.eval sandbox-script.js:2:89)",
          "checksum": "99c762713f6c6177b153a9b4c864ce89",
          "id": "c5858661-5ce7-4c65-b064-fafbd74259ed",
          "timestamp": 1722419102808,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 89,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
          "name": "Could not Update patient workflow with missing required fields",
          "request": {
            "url": {
              "path": [
                "update-patient-workflow"
              ],
              "host": [
                "{{baseUrl_patient_service}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{bearer_token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test('Status Code is valid', () => {\r",
                  "    pm.response.to.have.status(400);\r",
                  "});\r",
                  "pm.test('Status message is Valid', ()=>{\r",
                  "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                  "});"
                ],
                "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
              }
            }
          ]
        },
        "parent": {
          "id": "aeeeab23-caf5-442e-a9cb-57e6d0d49808",
          "name": "Update Patient Workflow",
          "item": [
            {
              "id": "47e71458-0121-485d-bb8e-8754668d3549",
              "name": "Update patient workflow",
              "request": {
                "url": {
                  "port": "8001",
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "13",
                    "233",
                    "37",
                    "45"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"958fd271-1a6f-4cbb-8c53-bb1cbd3405cc\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"{{currentUTCTime}}\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fcbce3f1-a5af-4cf5-975f-cecbbed060d0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Updated Task\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94be2f13-ce28-4a1c-8985-c633267c0169"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cd4205c2-3308-4a58-8ba8-cc05e6920033",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "78e78f2e-15f2-41c9-9a96-81628fd7da36"
                  }
                }
              ]
            },
            {
              "id": "1a044407-685f-4ab5-a53a-07daac20deb4",
              "name": "Could not Update patient workflow with incorrect id",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"1234567890\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5b19f405-11b5-4a45-a84d-de0db61fa097",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Unknown error occurred\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "4af1dc29-17bd-49bb-b8ee-4fb2a153ec89"
                  }
                }
              ]
            },
            {
              "id": "3f6d51ad-2945-4ef2-9d4f-8f8689d854e6",
              "name": "Could not Update patient workflow with missing required fields",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Missing required fields\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
                  }
                }
              ]
            },
            {
              "id": "785834f9-86cc-497b-8c46-03003684de0c",
              "name": "Could not Update patient workflow with missing Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "noauth",
                  "noauth": []
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d3df7f9d-f039-4e8e-97d1-8501a7440402",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Authorization header is missing\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "dce86330-7e6d-4823-aea8-e021c0166194"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8b908f5e-0383-4f02-ba6c-2c982d3aaae0",
                    "type": "text/javascript",
                    "exec": [],
                    "_lastExecutionId": "83be5000-77f0-498c-99c0-3e97e6b374c6"
                  }
                }
              ]
            },
            {
              "id": "d5eab1d0-8ba4-4227-aa95-5f0230f31e08",
              "name": "Could not Update patient workflow with invalid Authorization",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "eyJraWQiOiJRclZUTzdRaHBYZ2Rna0VvamJBbDRnTmh4NmNLK1FzMm5LbGlLenRsZVVFPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI3NGU4NDQ4OC0yMDAxLTcwODEtNWVmZi03ODAyNjIyNzVmMTciLCJpc3MiOiJodHRwczpcL1wvY29nbml0by1pZHAudXMtZWFzdC0xLmFtYXpvbmF3cy5jb21cL3VzLWVhc3QtMV9RWUw4M0NEeG8iLCJjbGllbnRfaWQiOiI3Z2luazlhaTVzNTYwMWdjNjJwaTA5dHZxZyIsIm9yaWdpbl9qdGkiOiI2ZmI2NjZmMy1iNmFlLTQ5ZmQtYmVhNC05MzhkMGQzMTgwMGEiLCJldmVudF9pZCI6ImVmZDkxNjQxLTlhNmItNDk2Zi1hOGNlLTliY2E4NGNiMDc1ZiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiYXdzLmNvZ25pdG8uc2lnbmluLnVzZXIuYWRtaW4iLCJhdXRoX3RpbWUiOjE3MTkzODM0MTcsImV4cCI6MTcxOTM4NzAxNywiaWF0IjoxNzE5MzgzNDE3LCJqdGkiOiJmZWRlNTRhOS1jY2M4LTQzMjgtYmY3Ni1hMDQ5ODA1OGZhNjAiLCJ1c2VybmFtZSI6Ijc0ZTg0NDg4LTIwMDEtNzA4MS01ZWZmLTc4MDI2MjI3NWYxNyJ9.fDPh_Fkq0MiVpcaboE_aIndnhpnGsbA4Lax7vKLt4MQX3AKKfEG-L0kJj2lxRH9LBsR0vmlreBn33bWm1wUJTnkFZiGwLnLSYii4-J3cK5L2a8JX9rdgAfblzQK4_bxZnHjJXnnRudvKzYFrPUTdAUTGYigPRy4MYIsKeYkvyvpB_YeTma1E5tIaJBQdl2ck3w_WZ8Iy1Jw6m8-HzQe47BgqiKfKKxPzrp7Jh68QMGKLPDiuV9tQtOdJp2IpVfmQNMvcj7rEYyKShwN1O3fP0EFTQiFTNaKenE1ElmK-ihQuOFe02QdTe_bv9WAA8N21olruiG5AP_fM",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "33f14c37-a9ee-473d-88e7-a5add006d964",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(401);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().message).to.eql(\"Token is invalid or expired\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "ca040258-90f7-4815-8327-acd67fee0e1c"
                  }
                }
              ]
            },
            {
              "id": "48ed11a2-7261-4e47-93a5-0f31ca0c484e",
              "name": "Could not Update patient workflow with invalid CRUD  operation",
              "request": {
                "url": {
                  "path": [
                    "update-patient-workflow"
                  ],
                  "host": [
                    "{{baseUrl_patient_service}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"id\": \"string\",\r\n  \"profile\": {\r\n    \"current_stage\": \"string\",\r\n    \"state\": \"string\",\r\n    \"status\": \"string\"\r\n  },\r\n  \"updated_at\": \"2024-06-27T02:49:54.247Z\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{bearer_token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6281dafa-164d-4c0f-8379-c1cf182b4588",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test('Status Code is valid', () => {\r",
                      "    pm.response.to.have.status(405);\r",
                      "});\r",
                      "pm.test('Status message is Valid', ()=>{\r",
                      "    pm.expect(pm.response.json().detail).to.eql(\"Method Not Allowed\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "1f281a90-0b1e-4282-ad2d-17a1e0b8b6eb"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ba575c8-94c9-4f3a-8ea7-b916d4386034",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const currentUTCTime = new Date().toISOString();\r",
                  "\r",
                  "// Log the current time in UTC ISO format (optional)\r",
                  "console.log(currentUTCTime);\r",
                  "\r",
                  "// Set the current time as an environment variable\r",
                  "pm.environment.set(\"currentUTCTime\", currentUTCTime);"
                ],
                "_lastExecutionId": "13179f48-3ab6-4b25-b8a2-4d591b400258"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e804be1b-ff60-4706-9c60-b5747189fcb8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f8bf15a0-4af1-4169-9c78-99166ab67236"
              }
            }
          ]
        },
        "cursor": {
          "ref": "46cbebf5-45f7-4f9d-8164-f04d3f41a607",
          "length": 92,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "cb5bcf47-8218-40e9-aeb0-60193ee4f672",
          "scriptId": "e5a08342-f057-4003-a1d0-ab011bee7e8d",
          "execution": "94382075-e5e7-439e-b98b-a1248fe3c3fe"
        }
      }
    ],
    "error": null
  }
}